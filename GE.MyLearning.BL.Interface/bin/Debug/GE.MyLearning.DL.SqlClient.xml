<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GE.MyLearning.DL.SqlClient</name>
    </assembly>
    <members>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlEvlScoredescriptionProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.EvlScoredescription"/> entity.
            </summary>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlEvlScoredescriptionProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.EvlScoredescription"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlScoredescriptionProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlScoredescriptionProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlScoredescriptionProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlScoredescriptionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlScoredescriptionProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlScoredescriptionProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlScoredescription objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlScoredescriptionProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlScoredescription objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlScoredescriptionProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlScoredescription objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlScoredescriptionProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlScoredescription objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlScoredescriptionProviderBase.GetById(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_evl_scoredescription index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.EvlScoredescription"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlScoredescriptionProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.EvlScoredescription})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.EvlScoredescription object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlScoredescriptionProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.EvlScoredescription)">
            <summary>
            	Inserts a GE.MyLearning.BL.EvlScoredescription object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.EvlScoredescription object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.EvlScoredescription object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlScoredescriptionProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.EvlScoredescription)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.EvlScoredescription object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.EvlScoredescription object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlScoredescriptionProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlScoredescriptionProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlScoredescriptionProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlScoredescriptionProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlScoredescriptionProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlDegreeApplyProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.DegreeApply"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreeApplyProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlDegreeApplyProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreeApplyProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlDegreeApplyProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreeApplyProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_degreeApplyId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreeApplyProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.DegreeApply objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreeApplyProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.DegreeApply objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreeApplyProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.DegreeApply objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreeApplyProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.DegreeApply objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreeApplyProviderBase.GetByDegreeApplyId(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DegreeApply index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_degreeApplyId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.DegreeApply"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreeApplyProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.DegreeApply})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.DegreeApply object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreeApplyProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.DegreeApply)">
            <summary>
            	Inserts a GE.MyLearning.BL.DegreeApply object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.DegreeApply object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.DegreeApply object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreeApplyProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.DegreeApply)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.DegreeApply object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.DegreeApply object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlDegreeApplyProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlDegreeApplyProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlDegreeApplyProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlLoginLogProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.LoginLog"/> entity.
            </summary>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlLoginLogProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.LoginLog"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLoginLogProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlLoginLogProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLoginLogProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlLoginLogProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLoginLogProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_loginLogId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLoginLogProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.LoginLog objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLoginLogProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.LoginLog objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLoginLogProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.LoginLog objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLoginLogProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.LoginLog objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLoginLogProviderBase.GetByLoginLogId(GE.MyLearning.DL.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_LoginLog index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_loginLogId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.LoginLog"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLoginLogProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.LoginLog})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.LoginLog object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLoginLogProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.LoginLog)">
            <summary>
            	Inserts a GE.MyLearning.BL.LoginLog object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.LoginLog object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.LoginLog object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLoginLogProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.LoginLog)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.LoginLog object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.LoginLog object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlLoginLogProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlLoginLogProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlLoginLogProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLoginLogProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlLoginLogProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVuNewpostProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VuNewpost"/> entity.
            </summary>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVuNewpostProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VuNewpost"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuNewpostProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuNewpostProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuNewpostProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuNewpostProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuNewpostProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuNewpostProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuNewpost objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuNewpostProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuNewpost objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuNewpostProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuNewpost objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuNewpostProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuNewpost objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuNewpostProviderBase.GetById(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_VU_NEWPOST index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.VuNewpost"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuNewpostProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.VuNewpost})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.VuNewpost object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuNewpostProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.VuNewpost)">
            <summary>
            	Inserts a GE.MyLearning.BL.VuNewpost object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.VuNewpost object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.VuNewpost object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuNewpostProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.VuNewpost)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.VuNewpost object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.VuNewpost object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuNewpostProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuNewpostProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuNewpostProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuNewpostProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuNewpostProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlUserInfoProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.UserInfo"/> entity.
            </summary>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlUserInfoProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.UserInfo"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserInfoProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlUserInfoProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserInfoProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlUserInfoProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserInfoProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_userId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserInfoProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.UserInfo objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserInfoProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.UserInfo objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserInfoProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.UserInfo objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserInfoProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.UserInfo objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserInfoProviderBase.GetByUserId(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_UserInfo index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.UserInfo"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserInfoProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.UserInfo})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.UserInfo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserInfoProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.UserInfo)">
            <summary>
            	Inserts a GE.MyLearning.BL.UserInfo object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.UserInfo object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.UserInfo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserInfoProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.UserInfo)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.UserInfo object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.UserInfo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlUserInfoProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlUserInfoProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlUserInfoProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserInfoProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlUserInfoProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreeStudentsProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwInstituteDegreeStudents objects.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreeStudentsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreeStudentsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreeStudentsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreeStudentsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreeStudentsProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwInstituteDegreeStudents objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreeStudentsProviderBase.Get(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwInstituteDegreeStudents objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreeStudentsProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwInstituteDegreeStudents objects.</returns>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreeStudentsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreeStudentsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreeStudentsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider">
            <summary>
            This class is the Sql implementation of the NetTiersProvider.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider"/> class.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.CreateTransaction">
            <summary>
            Creates a new <c cref="T:GE.MyLearning.DL.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(GE.MyLearning.DL.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(GE.MyLearning.DL.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(GE.MyLearning.DL.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.ExecuteReader(GE.MyLearning.DL.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.ExecuteReader(GE.MyLearning.DL.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.ExecuteReader(GE.MyLearning.DL.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.ExecuteDataSet(GE.MyLearning.DL.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.ExecuteDataSet(GE.MyLearning.DL.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.ExecuteDataSet(GE.MyLearning.DL.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.ExecuteScalar(GE.MyLearning.DL.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.ExecuteScalar(GE.MyLearning.DL.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.ExecuteScalar(GE.MyLearning.DL.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.UseStoredProcedure">
            <summary>
            Gets a value indicating whether to use stored procedure or not.
            </summary>
            <value>
            	<c>true</c> if this repository use stored procedures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.IsTransactionSupported">
            <summary>
             Indicates if the current <c cref="T:GE.MyLearning.DL.Bases.NetTiersProvider"/> implementation supports Transacton.
            </summary>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.CallRolesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.CallRoles"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlCallRolesProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlCallRolesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.TrainingLogProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.TrainingLog"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlTrainingLogProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlTrainingLogProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.TrainingUserProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.TrainingUser"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlTrainingUserProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlTrainingUserProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.UserGroupProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.UserGroup"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlUserGroupProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlUserGroupProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.UserInfoProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.UserInfo"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlUserInfoProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlUserInfoProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SysLogProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.SysLog"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlSysLogProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlSysLogProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.StudentsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.Students"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlStudentsProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlStudentsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.PermissionProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.Permission"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlPermissionProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlPermissionProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.RolePermissionProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.RolePermission"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlRolePermissionProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlRolePermissionProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.RolesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.Roles"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlRolesProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlRolesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.StudentCourseRelationProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.StudentCourseRelation"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlStudentCourseRelationProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlStudentCourseRelationProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.UserRoleProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.UserRole"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlUserRoleProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlUserRoleProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.VuArticleProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.VuArticle"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVuArticleProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVuArticleProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.VuGroupListProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.VuGroupList"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVuGroupListProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVuGroupListProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.VuNewpostProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.VuNewpost"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVuNewpostProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVuNewpostProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.VuRenyuanProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.VuRenyuan"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVuRenyuanProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVuRenyuanProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.VuReplypostProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.VuReplypost"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVuReplypostProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVuReplypostProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.VuGroupItemProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.VuGroupItem"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVuGroupItemProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVuGroupItemProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.VuFriendshipProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.VuFriendship"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVuFriendshipProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVuFriendshipProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.VuCatogaryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.VuCatogary"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVuCatogaryProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVuCatogaryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.VuCatogaryExpertsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.VuCatogaryExperts"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVuCatogaryExpertsProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVuCatogaryExpertsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.VuCatogaryManagerProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.VuCatogaryManager"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVuCatogaryManagerProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVuCatogaryManagerProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.VuClassInfoProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.VuClassInfo"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVuClassInfoProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVuClassInfoProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.NoticesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.Notices"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlNoticesProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlNoticesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.MenusProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.Menus"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlMenusProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlMenusProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.LoginLogProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.LoginLog"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlLoginLogProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlLoginLogProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.DepartmentProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.Department"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlDepartmentProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlDepartmentProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.EvlAssessmentProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.EvlAssessment"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlEvlAssessmentProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlEvlAssessmentProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.EvlBehaviorProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.EvlBehavior"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlEvlBehaviorProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlEvlBehaviorProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.EvlBehaviordescriptionProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.EvlBehaviordescription"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlEvlBehaviordescriptionProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlEvlBehaviordescriptionProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.DegreesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.Degrees"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlDegreesProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlDegreesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.DegreeCoursesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.DegreeCourses"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlDegreeCoursesProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlDegreeCoursesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.CourseIdeaProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.CourseIdea"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlCourseIdeaProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlCourseIdeaProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.CoursesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.Courses"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlCoursesProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlCoursesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.CoursewaresProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.Coursewares"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlCoursewaresProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlCoursewaresProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.DegreeApplyProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.DegreeApply"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlDegreeApplyProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlDegreeApplyProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.EvlCatalogProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.EvlCatalog"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlEvlCatalogProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlEvlCatalogProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.EvlCompetencyScoreDeptProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.EvlCompetencyScoreDept"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlEvlCompetencyScoreDeptProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlEvlCompetencyScoreDeptProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.GroupsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.Groups"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlGroupsProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlGroupsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.InstitutesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.Institutes"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlInstitutesProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlInstitutesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.LearningRecordCsvProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.LearningRecordCsv"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlLearningRecordCsvProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlLearningRecordCsvProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.LearningRecordExcelProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.LearningRecordExcel"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlLearningRecordExcelProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlLearningRecordExcelProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.EvlUsertypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.EvlUsertype"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlEvlUsertypeProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlEvlUsertypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.EvlUserProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.EvlUser"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlEvlUserProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlEvlUserProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.EvlGuestevlProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.EvlGuestevl"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlEvlGuestevlProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlEvlGuestevlProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.EvlModelProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.EvlModel"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlEvlModelProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlEvlModelProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.EvlScoreProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.EvlScore"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlEvlScoreProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlEvlScoreProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.EvlScoredescriptionProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.EvlScoredescription"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlEvlScoredescriptionProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlEvlScoredescriptionProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.VuRightsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.VuRights"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVuRightsProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVuRightsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.EvlVLearningRecordCsvProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.EvlVLearningRecordCsv"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlEvlVLearningRecordCsvProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlEvlVLearningRecordCsvProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.EvlVLearningRecordExcelProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.EvlVLearningRecordExcel"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlEvlVLearningRecordExcelProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlEvlVLearningRecordExcelProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.EvlVScoreProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.EvlVScore"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlEvlVScoreProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlEvlVScoreProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.VwDegreeCoursesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.VwDegreeCourses"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVwDegreeCoursesProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVwDegreeCoursesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.VwEvlUserProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.VwEvlUser"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVwEvlUserProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVwEvlUserProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.VwInstituteDegreeCoursesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.VwInstituteDegreeCourses"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVwInstituteDegreeCoursesProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVwInstituteDegreeCoursesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.VwInstituteDegreesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.VwInstituteDegrees"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVwInstituteDegreesProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVwInstituteDegreesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.VwInstituteDegreeStudentsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.VwInstituteDegreeStudents"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVwInstituteDegreeStudentsProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVwInstituteDegreeStudentsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.VwInstitutesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.VwInstitutes"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVwInstitutesProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVwInstitutesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.VwMenuPermissionProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.VwMenuPermission"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVwMenuPermissionProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVwMenuPermissionProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.VwRolePermissionProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.VwRolePermission"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVwRolePermissionProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVwRolePermissionProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.VwRolesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.VwRoles"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVwRolesProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVwRolesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.VwStudentCourseRelationProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.VwStudentCourseRelation"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVwStudentCourseRelationProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVwStudentCourseRelationProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.VwStudentsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.VwStudents"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVwStudentsProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVwStudentsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.VwTrainingUserProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.VwTrainingUser"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVwTrainingUserProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVwTrainingUserProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.VwTrainingUserLogProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.VwTrainingUserLog"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVwTrainingUserLogProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVwTrainingUserLogProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.VwUserGroupProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.VwUserGroup"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVwUserGroupProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVwUserGroupProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.VwUserGroupPermissionProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.VwUserGroupPermission"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVwUserGroupPermissionProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVwUserGroupPermissionProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.VwUserRoleProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:GE.MyLearning.BL.VwUserRole"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVwUserRoleProvider">
            <summary>
            Gets the current <c cref="P:GE.MyLearning.DL.SqlClient.SqlNetTiersProvider.SqlVwUserRoleProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlEvlModelProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.EvlModel"/> entity.
            </summary>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlEvlModelProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.EvlModel"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlModelProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlModelProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlModelProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlModelProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlModelProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_modelId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlModelProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlModel objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlModelProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlModel objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlModelProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlModel objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlModelProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlModel objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlModelProviderBase.GetByModelId(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_evl_model index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_modelId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.EvlModel"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlModelProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.EvlModel})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.EvlModel object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlModelProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.EvlModel)">
            <summary>
            	Inserts a GE.MyLearning.BL.EvlModel object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.EvlModel object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.EvlModel object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlModelProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.EvlModel)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.EvlModel object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.EvlModel object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlModelProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlModelProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlModelProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlModelProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlModelProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlEvlUserProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.EvlUser"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlUserProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlUserProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlUserProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlUserProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlUserProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlUserProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlUser objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlUserProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlUser objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlUserProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlUser objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlUserProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlUser objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlUserProviderBase.GetById(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_evl_user_role index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.EvlUser"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlUserProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.EvlUser})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.EvlUser object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlUserProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.EvlUser)">
            <summary>
            	Inserts a GE.MyLearning.BL.EvlUser object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.EvlUser object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.EvlUser object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlUserProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.EvlUser)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.EvlUser object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.EvlUser object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlUserProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlUserProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlUserProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlLearningRecordCsvProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.LearningRecordCsv"/> entity.
            </summary>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlLearningRecordCsvProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.LearningRecordCsv"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLearningRecordCsvProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlLearningRecordCsvProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLearningRecordCsvProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlLearningRecordCsvProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLearningRecordCsvProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLearningRecordCsvProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.LearningRecordCsv objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLearningRecordCsvProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.LearningRecordCsv objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLearningRecordCsvProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.LearningRecordCsv objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLearningRecordCsvProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.LearningRecordCsv objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLearningRecordCsvProviderBase.GetById(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK__Learning__3214EC277446A26D index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.LearningRecordCsv"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLearningRecordCsvProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.LearningRecordCsv})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.LearningRecordCsv object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLearningRecordCsvProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.LearningRecordCsv)">
            <summary>
            	Inserts a GE.MyLearning.BL.LearningRecordCsv object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.LearningRecordCsv object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.LearningRecordCsv object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLearningRecordCsvProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.LearningRecordCsv)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.LearningRecordCsv object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.LearningRecordCsv object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlLearningRecordCsvProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlLearningRecordCsvProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlLearningRecordCsvProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLearningRecordCsvProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlLearningRecordCsvProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlEvlCatalogProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.EvlCatalog"/> entity.
            </summary>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlEvlCatalogProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.EvlCatalog"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlCatalogProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlCatalogProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlCatalogProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlCatalogProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlCatalogProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_cId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlCatalogProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlCatalog objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlCatalogProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlCatalog objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlCatalogProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlCatalog objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlCatalogProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlCatalog objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlCatalogProviderBase.GetByCId(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_evl_catalog index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_cId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.EvlCatalog"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlCatalogProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.EvlCatalog})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.EvlCatalog object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlCatalogProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.EvlCatalog)">
            <summary>
            	Inserts a GE.MyLearning.BL.EvlCatalog object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.EvlCatalog object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.EvlCatalog object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlCatalogProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.EvlCatalog)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.EvlCatalog object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.EvlCatalog object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlCatalogProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlCatalogProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlCatalogProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlCatalogProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlCatalogProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlCoursewaresProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.Coursewares"/> entity.
            </summary>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlCoursewaresProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.Coursewares"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCoursewaresProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlCoursewaresProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCoursewaresProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlCoursewaresProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCoursewaresProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_coursewareId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCoursewaresProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.Coursewares objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCoursewaresProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.Coursewares objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCoursewaresProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.Coursewares objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCoursewaresProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.Coursewares objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCoursewaresProviderBase.GetByCoursewareId(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Data_Library index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_coursewareId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.Coursewares"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCoursewaresProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.Coursewares})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.Coursewares object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCoursewaresProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.Coursewares)">
            <summary>
            	Inserts a GE.MyLearning.BL.Coursewares object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.Coursewares object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.Coursewares object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCoursewaresProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.Coursewares)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.Coursewares object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.Coursewares object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlCoursewaresProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlCoursewaresProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlCoursewaresProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCoursewaresProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlCoursewaresProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVwEvlUserProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwEvlUser objects.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwEvlUserProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwEvlUserProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwEvlUserProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwEvlUserProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwEvlUserProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwEvlUser objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwEvlUserProviderBase.Get(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwEvlUser objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwEvlUserProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwEvlUser objects.</returns>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwEvlUserProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwEvlUserProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwEvlUserProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlEvlVScoreProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.EvlVScore"/> entity.
            </summary>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlEvlVScoreProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the EvlVScore objects.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlVScoreProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlVScoreProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlVScoreProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlVScoreProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlVScoreProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of EvlVScore objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlVScoreProviderBase.Get(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of EvlVScore objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlVScoreProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of EvlVScore objects.</returns>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlVScoreProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlVScoreProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlVScoreProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlVScoreProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlVScoreProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlEvlVLearningRecordCsvProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.EvlVLearningRecordCsv"/> entity.
            </summary>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlEvlVLearningRecordCsvProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the EvlVLearningRecordCsv objects.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlVLearningRecordCsvProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlVLearningRecordCsvProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlVLearningRecordCsvProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlVLearningRecordCsvProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlVLearningRecordCsvProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of EvlVLearningRecordCsv objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlVLearningRecordCsvProviderBase.Get(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of EvlVLearningRecordCsv objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlVLearningRecordCsvProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of EvlVLearningRecordCsv objects.</returns>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlVLearningRecordCsvProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlVLearningRecordCsvProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlVLearningRecordCsvProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlVLearningRecordCsvProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlVLearningRecordCsvProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlCoursesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.Courses"/> entity.
            </summary>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlCoursesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.Courses"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCoursesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlCoursesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCoursesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlCoursesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCoursesProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_courseId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCoursesProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.Courses objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCoursesProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.Courses objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCoursesProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.Courses objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCoursesProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.Courses objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCoursesProviderBase.GetByCourseId(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Courses index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_courseId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.Courses"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCoursesProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.Courses})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.Courses object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCoursesProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.Courses)">
            <summary>
            	Inserts a GE.MyLearning.BL.Courses object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.Courses object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.Courses object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCoursesProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.Courses)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.Courses object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.Courses object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlCoursesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlCoursesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlCoursesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCoursesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlCoursesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlMenusProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.Menus"/> entity.
            </summary>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlMenusProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.Menus"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlMenusProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlMenusProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlMenusProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlMenusProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlMenusProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_menuId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlMenusProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.Menus objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlMenusProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.Menus objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlMenusProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.Menus objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlMenusProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.Menus objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlMenusProviderBase.GetByMenuId(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the XPKMenus index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_menuId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.Menus"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlMenusProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.Menus})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.Menus object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlMenusProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.Menus)">
            <summary>
            	Inserts a GE.MyLearning.BL.Menus object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.Menus object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.Menus object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlMenusProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.Menus)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.Menus object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.Menus object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlMenusProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlMenusProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlMenusProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlMenusProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlMenusProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVuCatogaryManagerProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VuCatogaryManager"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryManagerProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuCatogaryManagerProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryManagerProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuCatogaryManagerProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryManagerProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryManagerProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuCatogaryManager objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryManagerProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuCatogaryManager objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryManagerProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuCatogaryManager objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryManagerProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuCatogaryManager objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryManagerProviderBase.GetById(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_VU_Catogary_Manager index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.VuCatogaryManager"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryManagerProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.VuCatogaryManager})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.VuCatogaryManager object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryManagerProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.VuCatogaryManager)">
            <summary>
            	Inserts a GE.MyLearning.BL.VuCatogaryManager object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.VuCatogaryManager object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.VuCatogaryManager object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryManagerProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.VuCatogaryManager)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.VuCatogaryManager object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.VuCatogaryManager object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuCatogaryManagerProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuCatogaryManagerProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuCatogaryManagerProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlStudentCourseRelationProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.StudentCourseRelation"/> entity.
            </summary>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlStudentCourseRelationProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.StudentCourseRelation"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlStudentCourseRelationProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlStudentCourseRelationProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlStudentCourseRelationProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlStudentCourseRelationProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlStudentCourseRelationProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_autoId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlStudentCourseRelationProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.StudentCourseRelation objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlStudentCourseRelationProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.StudentCourseRelation objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlStudentCourseRelationProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.StudentCourseRelation objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlStudentCourseRelationProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.StudentCourseRelation objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlStudentCourseRelationProviderBase.GetByAutoId(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the XPKStudentCourseRelation index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_autoId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.StudentCourseRelation"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlStudentCourseRelationProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.StudentCourseRelation})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.StudentCourseRelation object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlStudentCourseRelationProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.StudentCourseRelation)">
            <summary>
            	Inserts a GE.MyLearning.BL.StudentCourseRelation object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.StudentCourseRelation object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.StudentCourseRelation object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlStudentCourseRelationProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.StudentCourseRelation)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.StudentCourseRelation object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.StudentCourseRelation object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlStudentCourseRelationProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlStudentCourseRelationProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlStudentCourseRelationProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlStudentCourseRelationProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlStudentCourseRelationProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVwStudentCourseRelationProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VwStudentCourseRelation"/> entity.
            </summary>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVwStudentCourseRelationProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwStudentCourseRelation objects.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwStudentCourseRelationProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwStudentCourseRelationProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwStudentCourseRelationProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwStudentCourseRelationProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwStudentCourseRelationProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwStudentCourseRelation objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwStudentCourseRelationProviderBase.Get(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwStudentCourseRelation objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwStudentCourseRelationProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwStudentCourseRelation objects.</returns>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwStudentCourseRelationProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwStudentCourseRelationProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwStudentCourseRelationProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwStudentCourseRelationProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwStudentCourseRelationProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlInstitutesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.Institutes"/> entity.
            </summary>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlInstitutesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.Institutes"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlInstitutesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlInstitutesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlInstitutesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlInstitutesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlInstitutesProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_instituteId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlInstitutesProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.Institutes objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlInstitutesProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.Institutes objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlInstitutesProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.Institutes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlInstitutesProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.Institutes objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlInstitutesProviderBase.GetByInstituteId(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the XPKInstitutes index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_instituteId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.Institutes"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlInstitutesProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.Institutes})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.Institutes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlInstitutesProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.Institutes)">
            <summary>
            	Inserts a GE.MyLearning.BL.Institutes object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.Institutes object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.Institutes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlInstitutesProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.Institutes)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.Institutes object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.Institutes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlInstitutesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlInstitutesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlInstitutesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlInstitutesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlInstitutesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlDegreeCoursesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.DegreeCourses"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreeCoursesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlDegreeCoursesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreeCoursesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlDegreeCoursesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreeCoursesProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_degreeCourseId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreeCoursesProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.DegreeCourses objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreeCoursesProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.DegreeCourses objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreeCoursesProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.DegreeCourses objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreeCoursesProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.DegreeCourses objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreeCoursesProviderBase.GetByDegreeCourseId(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the XPKInstituteCourses index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_degreeCourseId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.DegreeCourses"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreeCoursesProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.DegreeCourses})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.DegreeCourses object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreeCoursesProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.DegreeCourses)">
            <summary>
            	Inserts a GE.MyLearning.BL.DegreeCourses object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.DegreeCourses object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.DegreeCourses object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreeCoursesProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.DegreeCourses)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.DegreeCourses object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.DegreeCourses object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlDegreeCoursesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlDegreeCoursesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlDegreeCoursesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVuCatogaryExpertsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VuCatogaryExperts"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryExpertsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuCatogaryExpertsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryExpertsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuCatogaryExpertsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryExpertsProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryExpertsProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuCatogaryExperts objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryExpertsProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuCatogaryExperts objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryExpertsProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuCatogaryExperts objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryExpertsProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuCatogaryExperts objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryExpertsProviderBase.GetById(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_VU_Catogary_Experts index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.VuCatogaryExperts"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryExpertsProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.VuCatogaryExperts})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.VuCatogaryExperts object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryExpertsProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.VuCatogaryExperts)">
            <summary>
            	Inserts a GE.MyLearning.BL.VuCatogaryExperts object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.VuCatogaryExperts object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.VuCatogaryExperts object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryExpertsProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.VuCatogaryExperts)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.VuCatogaryExperts object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.VuCatogaryExperts object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuCatogaryExpertsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuCatogaryExpertsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuCatogaryExpertsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVuArticleProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VuArticle"/> entity.
            </summary>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVuArticleProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VuArticle"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuArticleProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuArticleProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuArticleProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuArticleProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuArticleProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuArticleProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuArticle objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuArticleProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuArticle objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuArticleProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuArticle objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuArticleProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuArticle objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuArticleProviderBase.GetById(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_VU_article index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.VuArticle"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuArticleProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.VuArticle})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.VuArticle object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuArticleProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.VuArticle)">
            <summary>
            	Inserts a GE.MyLearning.BL.VuArticle object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.VuArticle object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.VuArticle object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuArticleProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.VuArticle)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.VuArticle object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.VuArticle object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuArticleProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuArticleProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuArticleProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuArticleProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuArticleProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlPermissionProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.Permission"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlPermissionProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlPermissionProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlPermissionProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlPermissionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlPermissionProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_permissionId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlPermissionProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.Permission objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlPermissionProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.Permission objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlPermissionProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.Permission objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlPermissionProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.Permission objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlPermissionProviderBase.GetByPermissionId(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Permission index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_permissionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.Permission"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlPermissionProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.Permission})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.Permission object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlPermissionProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.Permission)">
            <summary>
            	Inserts a GE.MyLearning.BL.Permission object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.Permission object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.Permission object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlPermissionProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.Permission)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.Permission object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.Permission object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlPermissionProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlPermissionProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlPermissionProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVwTrainingUserLogProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwTrainingUserLog objects.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwTrainingUserLogProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwTrainingUserLogProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwTrainingUserLogProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwTrainingUserLogProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwTrainingUserLogProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwTrainingUserLog objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwTrainingUserLogProviderBase.Get(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwTrainingUserLog objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwTrainingUserLogProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwTrainingUserLog objects.</returns>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwTrainingUserLogProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwTrainingUserLogProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwTrainingUserLogProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVwTrainingUserProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VwTrainingUser"/> entity.
            </summary>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVwTrainingUserProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwTrainingUser objects.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwTrainingUserProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwTrainingUserProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwTrainingUserProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwTrainingUserProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwTrainingUserProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwTrainingUser objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwTrainingUserProviderBase.Get(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwTrainingUser objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwTrainingUserProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwTrainingUser objects.</returns>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwTrainingUserProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwTrainingUserProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwTrainingUserProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwTrainingUserProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwTrainingUserProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VwInstituteDegrees"/> entity.
            </summary>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreesProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwInstituteDegrees objects.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreesProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwInstituteDegrees objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreesProviderBase.Get(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwInstituteDegrees objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreesProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwInstituteDegrees objects.</returns>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.StoredProcedureProvider">
            <summary>
            Summary description for Procedures.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.StoredProcedureProvider.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.StoredProcedureProvider"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.StoredProcedureProvider.Serialize(System.String)">
            <summary>
            Serializes the specified filename.
            </summary>
            <param name="filename">Filename.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.StoredProcedureProvider.Deserialize">
            <summary>
            Deserializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.StoredProcedureProvider.GetProcedureBodyFromEmbeddedResource(System.String)">
            <summary>
            Get the query text from the embedded xml file.
            </summary>
            <param name="name">The name of the query.</param>
            <returns>the text of the query</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Boolean)">
            <summary>
            Get the command wrapper, either from the stored procedures or from the embedded queries.
            </summary>
            <param name="database">The database instance.</param>
            <param name="commandName">the name of the sp.</param>
            <param name="useStoredProcedure">Indicates if we want stored procedure.</param>
            <returns></returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Type,GE.MyLearning.DL.SqlFilterParameterCollection,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the command wrapper for a dynamically generated query and
            optionally includes server-side paging.
            </summary>
            <param name="database"></param>
            <param name="commandName"></param>
            <param name="columnEnum"></param>
            <param name="parameters"></param>
            <param name="orderBy"></param>
            <param name="start"></param>
            <param name="pageLength"></param>
            <returns></returns>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.StoredProcedureProvider.Current">
            <summary>
            Gets the current <see cref="T:GE.MyLearning.DL.SqlClient.StoredProcedureProvider"/> singleton instance.
            </summary>
            <value><see cref="T:GE.MyLearning.DL.SqlClient.StoredProcedureProvider"/></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.StoredProcedureProvider.Procedures">
            <summary>
            Gets or sets the procedures.
            </summary>
            <value>An <see cref="T:System.Collections.ArrayList"/> of <see cref="T:GE.MyLearning.DL.SqlClient.Procedure"/> objects.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.StoredProcedureProvider.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:GE.MyLearning.DL.SqlClient.Procedure"/> instance with the specified name.
            </summary>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.StoredProcedureProvider.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:GE.MyLearning.DL.SqlClient.Procedure"/> instance at the specified index.
            </summary>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.Procedure">
            <summary>
            Represents a sql query.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.Procedure.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.Procedure"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.Procedure.Parameter(System.String)">
            <summary>
            Get the parameter from the specified name of the param.
            </summary>
            <param name="paramName">Name of the param.</param>
            <returns></returns>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.Procedure.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.Procedure.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.Procedure.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.Procedure.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.Procedure.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value></value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.Parameter">
            <summary>
            Respresents a query parameter.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.Parameter.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.Parameter"/> instance.
            </summary>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.Parameter.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.Parameter.SqlType">
            <summary>
            Gets or sets the SqlType.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.Parameter.Direction">
            <summary>
            Gets or sets the Direction.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.Parameter.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.Parameter.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value></value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.Parameter.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value></value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlGroupsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.Groups"/> entity.
            </summary>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlGroupsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.Groups"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlGroupsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlGroupsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlGroupsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlGroupsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlGroupsProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_groupId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlGroupsProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.Groups objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlGroupsProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.Groups objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlGroupsProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.Groups objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlGroupsProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.Groups objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlGroupsProviderBase.GetByGroupId(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the XPKGroups index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_groupId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.Groups"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlGroupsProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.Groups})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.Groups object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlGroupsProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.Groups)">
            <summary>
            	Inserts a GE.MyLearning.BL.Groups object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.Groups object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.Groups object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlGroupsProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.Groups)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.Groups object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.Groups object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlGroupsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlGroupsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlGroupsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlGroupsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlGroupsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVuCatogaryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VuCatogary"/> entity.
            </summary>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVuCatogaryProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VuCatogary"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuCatogaryProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuCatogaryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuCatogary objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuCatogary objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuCatogary objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuCatogary objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryProviderBase.GetById(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_VU_catogary index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.VuCatogary"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.VuCatogary})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.VuCatogary object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.VuCatogary)">
            <summary>
            	Inserts a GE.MyLearning.BL.VuCatogary object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.VuCatogary object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.VuCatogary object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.VuCatogary)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.VuCatogary object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.VuCatogary object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuCatogaryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuCatogaryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuCatogaryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuCatogaryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVwUserGroupPermissionProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwUserGroupPermission objects.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwUserGroupPermissionProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwUserGroupPermissionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwUserGroupPermissionProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwUserGroupPermissionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwUserGroupPermissionProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwUserGroupPermission objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwUserGroupPermissionProviderBase.Get(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwUserGroupPermission objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwUserGroupPermissionProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwUserGroupPermission objects.</returns>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwUserGroupPermissionProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwUserGroupPermissionProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwUserGroupPermissionProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlEvlUserProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.EvlUser"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlUserProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlUserProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlEvlCompetencyScoreDeptProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.EvlCompetencyScoreDept"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlCompetencyScoreDeptProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlCompetencyScoreDeptProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlCompetencyScoreDeptProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlCompetencyScoreDeptProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlCompetencyScoreDeptProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlCompetencyScoreDeptProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlCompetencyScoreDept objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlCompetencyScoreDeptProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlCompetencyScoreDept objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlCompetencyScoreDeptProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlCompetencyScoreDept objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlCompetencyScoreDeptProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlCompetencyScoreDept objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlCompetencyScoreDeptProviderBase.GetById(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_evl_competencyScoreDept index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.EvlCompetencyScoreDept"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlCompetencyScoreDeptProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.EvlCompetencyScoreDept})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.EvlCompetencyScoreDept object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlCompetencyScoreDeptProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.EvlCompetencyScoreDept)">
            <summary>
            	Inserts a GE.MyLearning.BL.EvlCompetencyScoreDept object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.EvlCompetencyScoreDept object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.EvlCompetencyScoreDept object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlCompetencyScoreDeptProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.EvlCompetencyScoreDept)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.EvlCompetencyScoreDept object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.EvlCompetencyScoreDept object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlCompetencyScoreDeptProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlCompetencyScoreDeptProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlCompetencyScoreDeptProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlStudentsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.Students"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlStudentsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlStudentsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlStudentsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlStudentsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlStudentsProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_studentId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlStudentsProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.Students objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlStudentsProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.Students objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlStudentsProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.Students objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlStudentsProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.Students objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlStudentsProviderBase.GetByStudentId(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the XPKStudents index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_studentId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.Students"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlStudentsProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.Students})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.Students object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlStudentsProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.Students)">
            <summary>
            	Inserts a GE.MyLearning.BL.Students object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.Students object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.Students object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlStudentsProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.Students)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.Students object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.Students object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlStudentsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlStudentsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlStudentsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVwUserGroupProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwUserGroup objects.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwUserGroupProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwUserGroupProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwUserGroupProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwUserGroupProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwUserGroupProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwUserGroup objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwUserGroupProviderBase.Get(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwUserGroup objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwUserGroupProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwUserGroup objects.</returns>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwUserGroupProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwUserGroupProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwUserGroupProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVwRolePermissionProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VwRolePermission"/> entity.
            </summary>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVwRolePermissionProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwRolePermission objects.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwRolePermissionProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwRolePermissionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwRolePermissionProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwRolePermissionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwRolePermissionProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwRolePermission objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwRolePermissionProviderBase.Get(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwRolePermission objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwRolePermissionProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwRolePermission objects.</returns>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwRolePermissionProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwRolePermissionProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwRolePermissionProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwRolePermissionProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwRolePermissionProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVwInstitutesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VwInstitutes"/> entity.
            </summary>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVwInstitutesProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwInstitutes objects.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwInstitutesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwInstitutesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwInstitutesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwInstitutesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwInstitutesProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwInstitutes objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwInstitutesProviderBase.Get(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwInstitutes objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwInstitutesProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwInstitutes objects.</returns>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwInstitutesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwInstitutesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwInstitutesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwInstitutesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwInstitutesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreeCoursesProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwInstituteDegreeCourses objects.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreeCoursesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreeCoursesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreeCoursesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreeCoursesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreeCoursesProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwInstituteDegreeCourses objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreeCoursesProviderBase.Get(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwInstituteDegreeCourses objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreeCoursesProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwInstituteDegreeCourses objects.</returns>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreeCoursesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreeCoursesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreeCoursesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVuFriendshipProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VuFriendship"/> entity.
            </summary>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVuFriendshipProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VuFriendship"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuFriendshipProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuFriendshipProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuFriendshipProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuFriendshipProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuFriendshipProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuFriendshipProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuFriendship objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuFriendshipProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuFriendship objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuFriendshipProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuFriendship objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuFriendshipProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuFriendship objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuFriendshipProviderBase.GetById(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_vu_friendship index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.VuFriendship"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuFriendshipProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.VuFriendship})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.VuFriendship object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuFriendshipProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.VuFriendship)">
            <summary>
            	Inserts a GE.MyLearning.BL.VuFriendship object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.VuFriendship object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.VuFriendship object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuFriendshipProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.VuFriendship)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.VuFriendship object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.VuFriendship object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuFriendshipProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuFriendshipProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuFriendshipProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuFriendshipProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuFriendshipProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlUserGroupProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.UserGroup"/> entity.
            </summary>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlUserGroupProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.UserGroup"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserGroupProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlUserGroupProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserGroupProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlUserGroupProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserGroupProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_autoId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserGroupProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.UserGroup objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserGroupProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.UserGroup objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserGroupProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.UserGroup objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserGroupProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.UserGroup objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserGroupProviderBase.GetByAutoId(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the XPKUserGroup index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_autoId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.UserGroup"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserGroupProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.UserGroup})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.UserGroup object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserGroupProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.UserGroup)">
            <summary>
            	Inserts a GE.MyLearning.BL.UserGroup object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.UserGroup object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.UserGroup object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserGroupProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.UserGroup)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.UserGroup object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.UserGroup object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlUserGroupProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlUserGroupProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlUserGroupProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserGroupProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlUserGroupProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlTrainingLogProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.TrainingLog"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlTrainingLogProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlTrainingLogProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlTrainingLogProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlTrainingLogProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlTrainingLogProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_trainingLogId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlTrainingLogProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.TrainingLog objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlTrainingLogProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.TrainingLog objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlTrainingLogProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.TrainingLog objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlTrainingLogProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.TrainingLog objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlTrainingLogProviderBase.GetByTrainingLogId(GE.MyLearning.DL.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_TrainingLog index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_trainingLogId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.TrainingLog"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlTrainingLogProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.TrainingLog})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.TrainingLog object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlTrainingLogProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TrainingLog)">
            <summary>
            	Inserts a GE.MyLearning.BL.TrainingLog object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.TrainingLog object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.TrainingLog object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlTrainingLogProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TrainingLog)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.TrainingLog object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.TrainingLog object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlTrainingLogProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlTrainingLogProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlTrainingLogProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlTrainingLogProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.TrainingLog"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlTrainingLogProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlTrainingLogProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVwTrainingUserLogProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VwTrainingUserLog"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwTrainingUserLogProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwTrainingUserLogProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreeStudentsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VwInstituteDegreeStudents"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreeStudentsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreeStudentsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreeCoursesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VwInstituteDegreeCourses"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreeCoursesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwInstituteDegreeCoursesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlEvlScoreProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.EvlScore"/> entity.
            </summary>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlEvlScoreProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.EvlScore"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlScoreProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlScoreProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlScoreProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlScoreProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlScoreProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlScoreProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlScore objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlScoreProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlScore objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlScoreProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlScore objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlScoreProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlScore objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlScoreProviderBase.GetById(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_evl_score index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.EvlScore"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlScoreProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.EvlScore})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.EvlScore object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlScoreProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.EvlScore)">
            <summary>
            	Inserts a GE.MyLearning.BL.EvlScore object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.EvlScore object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.EvlScore object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlScoreProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.EvlScore)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.EvlScore object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.EvlScore object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlScoreProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlScoreProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlScoreProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlScoreProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlScoreProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlCourseIdeaProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.CourseIdea"/> entity.
            </summary>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlCourseIdeaProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.CourseIdea"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCourseIdeaProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlCourseIdeaProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCourseIdeaProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlCourseIdeaProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCourseIdeaProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_courseideaId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCourseIdeaProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.CourseIdea objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCourseIdeaProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.CourseIdea objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCourseIdeaProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.CourseIdea objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCourseIdeaProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.CourseIdea objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCourseIdeaProviderBase.GetByCourseideaId(GE.MyLearning.DL.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_CourseIdea index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_courseideaId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.CourseIdea"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCourseIdeaProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.CourseIdea})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.CourseIdea object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCourseIdeaProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.CourseIdea)">
            <summary>
            	Inserts a GE.MyLearning.BL.CourseIdea object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.CourseIdea object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.CourseIdea object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCourseIdeaProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.CourseIdea)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.CourseIdea object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.CourseIdea object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlCourseIdeaProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlCourseIdeaProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlCourseIdeaProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCourseIdeaProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlCourseIdeaProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVuCatogaryManagerProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VuCatogaryManager"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryManagerProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuCatogaryManagerProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlUserRoleProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.UserRole"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserRoleProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlUserRoleProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserRoleProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlUserRoleProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserRoleProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_roleId">. Primary Key.</param>	
            <param name="_userId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserRoleProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.UserRole objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserRoleProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.UserRole objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserRoleProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.UserRole objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserRoleProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.UserRole objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserRoleProviderBase.GetByRoleIdUserId(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the XPKUserRole index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_roleId"></param>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.UserRole"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserRoleProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.UserRole})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.UserRole object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserRoleProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.UserRole)">
            <summary>
            	Inserts a GE.MyLearning.BL.UserRole object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.UserRole object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.UserRole object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserRoleProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.UserRole)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.UserRole object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.UserRole object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlUserRoleProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlUserRoleProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlUserRoleProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVwUserGroupPermissionProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VwUserGroupPermission"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwUserGroupPermissionProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwUserGroupPermissionProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVuRightsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VuRights"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuRightsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuRightsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuRightsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuRightsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuRightsProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuRightsProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuRights objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuRightsProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuRights objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuRightsProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuRights objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuRightsProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuRights objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuRightsProviderBase.GetById(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_VU_rights index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.VuRights"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuRightsProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.VuRights})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.VuRights object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuRightsProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.VuRights)">
            <summary>
            	Inserts a GE.MyLearning.BL.VuRights object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.VuRights object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.VuRights object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuRightsProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.VuRights)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.VuRights object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.VuRights object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuRightsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuRightsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuRightsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlLearningRecordExcelProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.LearningRecordExcel"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLearningRecordExcelProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlLearningRecordExcelProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLearningRecordExcelProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlLearningRecordExcelProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLearningRecordExcelProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLearningRecordExcelProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.LearningRecordExcel objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLearningRecordExcelProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.LearningRecordExcel objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLearningRecordExcelProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.LearningRecordExcel objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLearningRecordExcelProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.LearningRecordExcel objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLearningRecordExcelProviderBase.GetById(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK__Learning__3214EC2770761189 index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.LearningRecordExcel"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLearningRecordExcelProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.LearningRecordExcel})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.LearningRecordExcel object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLearningRecordExcelProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.LearningRecordExcel)">
            <summary>
            	Inserts a GE.MyLearning.BL.LearningRecordExcel object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.LearningRecordExcel object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.LearningRecordExcel object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLearningRecordExcelProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.LearningRecordExcel)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.LearningRecordExcel object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.LearningRecordExcel object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlLearningRecordExcelProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlLearningRecordExcelProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlLearningRecordExcelProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlEvlBehaviordescriptionProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.EvlBehaviordescription"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlBehaviordescriptionProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlBehaviordescriptionProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlBehaviordescriptionProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlBehaviordescriptionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlBehaviordescriptionProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlBehaviordescriptionProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlBehaviordescription objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlBehaviordescriptionProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlBehaviordescription objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlBehaviordescriptionProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlBehaviordescription objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlBehaviordescriptionProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlBehaviordescription objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlBehaviordescriptionProviderBase.GetById(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_evl_behaviordescription index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.EvlBehaviordescription"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlBehaviordescriptionProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.EvlBehaviordescription})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.EvlBehaviordescription object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlBehaviordescriptionProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.EvlBehaviordescription)">
            <summary>
            	Inserts a GE.MyLearning.BL.EvlBehaviordescription object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.EvlBehaviordescription object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.EvlBehaviordescription object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlBehaviordescriptionProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.EvlBehaviordescription)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.EvlBehaviordescription object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.EvlBehaviordescription object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlBehaviordescriptionProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlBehaviordescriptionProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlBehaviordescriptionProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlNoticesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.Notices"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNoticesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlNoticesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNoticesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlNoticesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNoticesProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_noticeId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNoticesProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.Notices objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNoticesProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.Notices objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNoticesProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.Notices objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNoticesProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.Notices objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNoticesProviderBase.GetByNoticeId(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Notices index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_noticeId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.Notices"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNoticesProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.Notices})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.Notices object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNoticesProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.Notices)">
            <summary>
            	Inserts a GE.MyLearning.BL.Notices object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.Notices object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.Notices object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNoticesProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.Notices)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.Notices object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.Notices object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNoticesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNoticesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlNoticesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVuGroupListProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VuGroupList"/> entity.
            </summary>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVuGroupListProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VuGroupList"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuGroupListProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuGroupListProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuGroupListProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuGroupListProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuGroupListProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuGroupListProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuGroupList objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuGroupListProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuGroupList objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuGroupListProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuGroupList objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuGroupListProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuGroupList objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuGroupListProviderBase.GetById(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_VU_GroupList index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.VuGroupList"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuGroupListProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.VuGroupList})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.VuGroupList object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuGroupListProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.VuGroupList)">
            <summary>
            	Inserts a GE.MyLearning.BL.VuGroupList object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.VuGroupList object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.VuGroupList object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuGroupListProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.VuGroupList)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.VuGroupList object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.VuGroupList object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuGroupListProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuGroupListProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuGroupListProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuGroupListProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuGroupListProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlPermissionProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.Permission"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlPermissionProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlPermissionProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVwRolesProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwRoles objects.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwRolesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwRolesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwRolesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwRolesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwRolesProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwRoles objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwRolesProviderBase.Get(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwRoles objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwRolesProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwRoles objects.</returns>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwRolesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwRolesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwRolesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVwMenuPermissionProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VwMenuPermission"/> entity.
            </summary>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVwMenuPermissionProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwMenuPermission objects.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwMenuPermissionProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwMenuPermissionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwMenuPermissionProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwMenuPermissionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwMenuPermissionProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwMenuPermission objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwMenuPermissionProviderBase.Get(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwMenuPermission objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwMenuPermissionProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwMenuPermission objects.</returns>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwMenuPermissionProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwMenuPermissionProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwMenuPermissionProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwMenuPermissionProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwMenuPermissionProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVwDegreeCoursesProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwDegreeCourses objects.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwDegreeCoursesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwDegreeCoursesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwDegreeCoursesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwDegreeCoursesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwDegreeCoursesProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwDegreeCourses objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwDegreeCoursesProviderBase.Get(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwDegreeCourses objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwDegreeCoursesProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwDegreeCourses objects.</returns>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwDegreeCoursesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwDegreeCoursesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwDegreeCoursesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVuRightsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VuRights"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuRightsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuRightsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlEvlUsertypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.EvlUsertype"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlUsertypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlUsertypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlUsertypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlUsertypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlUsertypeProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlUsertypeProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlUsertype objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlUsertypeProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlUsertype objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlUsertypeProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlUsertype objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlUsertypeProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlUsertype objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlUsertypeProviderBase.GetById(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_evl_UserType index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.EvlUsertype"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlUsertypeProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.EvlUsertype})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.EvlUsertype object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlUsertypeProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.EvlUsertype)">
            <summary>
            	Inserts a GE.MyLearning.BL.EvlUsertype object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.EvlUsertype object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.EvlUsertype object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlUsertypeProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.EvlUsertype)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.EvlUsertype object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.EvlUsertype object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlUsertypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlUsertypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlUsertypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlDegreeCoursesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.DegreeCourses"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreeCoursesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlDegreeCoursesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlDepartmentProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.Department"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDepartmentProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlDepartmentProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDepartmentProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlDepartmentProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDepartmentProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_departmentName">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDepartmentProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.Department objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDepartmentProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.Department objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDepartmentProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.Department objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDepartmentProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.Department objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDepartmentProviderBase.GetByDepartmentName(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK__Departme__D949CC356D99A4DE index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_departmentName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.Department"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDepartmentProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.Department})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.Department object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDepartmentProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.Department)">
            <summary>
            	Inserts a GE.MyLearning.BL.Department object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.Department object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.Department object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDepartmentProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.Department)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.Department object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.Department object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlDepartmentProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlDepartmentProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlDepartmentProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVuClassInfoProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VuClassInfo"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuClassInfoProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuClassInfoProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuClassInfoProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuClassInfoProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuClassInfoProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuClassInfoProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuClassInfo objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuClassInfoProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuClassInfo objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuClassInfoProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuClassInfo objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuClassInfoProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuClassInfo objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuClassInfoProviderBase.GetById(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_VU_ClassInfo index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.VuClassInfo"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuClassInfoProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.VuClassInfo})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.VuClassInfo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuClassInfoProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.VuClassInfo)">
            <summary>
            	Inserts a GE.MyLearning.BL.VuClassInfo object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.VuClassInfo object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.VuClassInfo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuClassInfoProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.VuClassInfo)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.VuClassInfo object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.VuClassInfo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuClassInfoProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuClassInfoProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuClassInfoProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVuGroupItemProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VuGroupItem"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuGroupItemProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuGroupItemProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuGroupItemProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuGroupItemProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuGroupItemProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuGroupItemProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuGroupItem objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuGroupItemProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuGroupItem objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuGroupItemProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuGroupItem objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuGroupItemProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuGroupItem objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuGroupItemProviderBase.GetById(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_VU_GroupItem index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.VuGroupItem"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuGroupItemProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.VuGroupItem})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.VuGroupItem object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuGroupItemProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.VuGroupItem)">
            <summary>
            	Inserts a GE.MyLearning.BL.VuGroupItem object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.VuGroupItem object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.VuGroupItem object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuGroupItemProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.VuGroupItem)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.VuGroupItem object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.VuGroupItem object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuGroupItemProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuGroupItemProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuGroupItemProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlEvlAssessmentProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.EvlAssessment"/> entity.
            </summary>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlEvlAssessmentProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.EvlAssessment"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlAssessmentProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlAssessmentProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlAssessmentProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlAssessmentProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlAssessmentProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlAssessmentProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlAssessment objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlAssessmentProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlAssessment objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlAssessmentProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlAssessment objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlAssessmentProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlAssessment objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlAssessmentProviderBase.GetById(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_evl_assessment index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.EvlAssessment"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlAssessmentProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.EvlAssessment})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.EvlAssessment object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlAssessmentProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.EvlAssessment)">
            <summary>
            	Inserts a GE.MyLearning.BL.EvlAssessment object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.EvlAssessment object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.EvlAssessment object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlAssessmentProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.EvlAssessment)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.EvlAssessment object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.EvlAssessment object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlAssessmentProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlAssessmentProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlAssessmentProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlAssessmentProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlAssessmentProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVuReplypostProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VuReplypost"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuReplypostProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuReplypostProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuReplypostProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuReplypostProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuReplypostProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_ids">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuReplypostProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuReplypost objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuReplypostProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuReplypost objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuReplypostProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuReplypost objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuReplypostProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuReplypost objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuReplypostProviderBase.GetByIds(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_VU_REPLYPOST index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_ids"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.VuReplypost"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuReplypostProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.VuReplypost})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.VuReplypost object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuReplypostProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.VuReplypost)">
            <summary>
            	Inserts a GE.MyLearning.BL.VuReplypost object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.VuReplypost object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.VuReplypost object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuReplypostProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.VuReplypost)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.VuReplypost object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.VuReplypost object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuReplypostProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuReplypostProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuReplypostProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlRolePermissionProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.RolePermission"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlRolePermissionProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlRolePermissionProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlRolePermissionProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlRolePermissionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlRolePermissionProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_permissionId">. Primary Key.</param>	
            <param name="_roleId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlRolePermissionProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.RolePermission objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlRolePermissionProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.RolePermission objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlRolePermissionProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.RolePermission objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlRolePermissionProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.RolePermission objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlRolePermissionProviderBase.GetByPermissionIdRoleId(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the XPKRolePermission index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_permissionId"></param>
            <param name="_roleId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.RolePermission"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlRolePermissionProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.RolePermission})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.RolePermission object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlRolePermissionProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.RolePermission)">
            <summary>
            	Inserts a GE.MyLearning.BL.RolePermission object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.RolePermission object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.RolePermission object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlRolePermissionProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.RolePermission)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.RolePermission object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.RolePermission object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlRolePermissionProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlRolePermissionProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlRolePermissionProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlStudentsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.Students"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlStudentsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlStudentsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVwStudentsProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwStudents objects.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwStudentsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwStudentsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwStudentsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwStudentsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwStudentsProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwStudents objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwStudentsProviderBase.Get(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwStudents objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwStudentsProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwStudents objects.</returns>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwStudentsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwStudentsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwStudentsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVwDegreeCoursesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VwDegreeCourses"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwDegreeCoursesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwDegreeCoursesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlEvlVLearningRecordExcelProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the EvlVLearningRecordExcel objects.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlVLearningRecordExcelProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlVLearningRecordExcelProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlVLearningRecordExcelProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlVLearningRecordExcelProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlVLearningRecordExcelProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of EvlVLearningRecordExcel objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlVLearningRecordExcelProviderBase.Get(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of EvlVLearningRecordExcel objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlVLearningRecordExcelProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of EvlVLearningRecordExcel objects.</returns>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlVLearningRecordExcelProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlVLearningRecordExcelProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlVLearningRecordExcelProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlEvlBehaviordescriptionProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.EvlBehaviordescription"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlBehaviordescriptionProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlBehaviordescriptionProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlEvlBehaviorProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.EvlBehavior"/> entity.
            </summary>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlEvlBehaviorProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.EvlBehavior"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlBehaviorProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlBehaviorProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlBehaviorProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlBehaviorProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlBehaviorProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlBehaviorProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlBehavior objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlBehaviorProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlBehavior objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlBehaviorProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlBehavior objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlBehaviorProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlBehavior objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlBehaviorProviderBase.GetById(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_evl_Behavior index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.EvlBehavior"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlBehaviorProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.EvlBehavior})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.EvlBehavior object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlBehaviorProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.EvlBehavior)">
            <summary>
            	Inserts a GE.MyLearning.BL.EvlBehavior object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.EvlBehavior object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.EvlBehavior object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlBehaviorProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.EvlBehavior)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.EvlBehavior object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.EvlBehavior object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlBehaviorProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlBehaviorProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlBehaviorProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlBehaviorProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlBehaviorProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVuCatogaryExpertsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VuCatogaryExperts"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuCatogaryExpertsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuCatogaryExpertsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVuRenyuanProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VuRenyuan"/> entity.
            </summary>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVuRenyuanProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VuRenyuan"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuRenyuanProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuRenyuanProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuRenyuanProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuRenyuanProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuRenyuanProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuRenyuanProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuRenyuan objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuRenyuanProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuRenyuan objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuRenyuanProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuRenyuan objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuRenyuanProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.VuRenyuan objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuRenyuanProviderBase.GetById(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_VU_renyuan index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.VuRenyuan"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuRenyuanProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.VuRenyuan})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.VuRenyuan object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuRenyuanProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.VuRenyuan)">
            <summary>
            	Inserts a GE.MyLearning.BL.VuRenyuan object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.VuRenyuan object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.VuRenyuan object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuRenyuanProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.VuRenyuan)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.VuRenyuan object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.VuRenyuan object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuRenyuanProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuRenyuanProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVuRenyuanProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuRenyuanProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuRenyuanProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlUserRoleProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.UserRole"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlUserRoleProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlUserRoleProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlTrainingUserProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.TrainingUser"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlTrainingUserProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlTrainingUserProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlTrainingUserProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlTrainingUserProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlTrainingUserProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_trainUserId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlTrainingUserProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.TrainingUser objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlTrainingUserProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.TrainingUser objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlTrainingUserProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.TrainingUser objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlTrainingUserProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.TrainingUser objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlTrainingUserProviderBase.GetByTrainUserId(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_TrainingUser index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_trainUserId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.TrainingUser"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlTrainingUserProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.TrainingUser})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.TrainingUser object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlTrainingUserProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TrainingUser)">
            <summary>
            	Inserts a GE.MyLearning.BL.TrainingUser object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.TrainingUser object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.TrainingUser object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlTrainingUserProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TrainingUser)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.TrainingUser object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.TrainingUser object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlTrainingUserProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlTrainingUserProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlTrainingUserProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVwRolesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VwRoles"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwRolesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwRolesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVwEvlUserProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VwEvlUser"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwEvlUserProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwEvlUserProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlEvlUsertypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.EvlUsertype"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlUsertypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlUsertypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlLearningRecordExcelProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.LearningRecordExcel"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlLearningRecordExcelProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlLearningRecordExcelProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlDegreeApplyProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.DegreeApply"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreeApplyProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlDegreeApplyProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlDegreesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.Degrees"/> entity.
            </summary>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlDegreesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.Degrees"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlDegreesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlDegreesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreesProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_degreeId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreesProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.Degrees objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreesProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.Degrees objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreesProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.Degrees objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreesProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.Degrees objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreesProviderBase.GetByDegreeId(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Degrees index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_degreeId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.Degrees"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreesProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.Degrees})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.Degrees object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreesProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.Degrees)">
            <summary>
            	Inserts a GE.MyLearning.BL.Degrees object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.Degrees object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.Degrees object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreesProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.Degrees)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.Degrees object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.Degrees object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlDegreesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlDegreesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlDegreesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDegreesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlDegreesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlNoticesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.Notices"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlNoticesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlNoticesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlRolesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.Roles"/> entity.
            </summary>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlRolesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.Roles"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlRolesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlRolesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlRolesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlRolesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlRolesProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_roleId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlRolesProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.Roles objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlRolesProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.Roles objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlRolesProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.Roles objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlRolesProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.Roles objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlRolesProviderBase.GetByRoleId(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Roles index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_roleId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.Roles"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlRolesProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.Roles})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.Roles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlRolesProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.Roles)">
            <summary>
            	Inserts a GE.MyLearning.BL.Roles object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.Roles object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.Roles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlRolesProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.Roles)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.Roles object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.Roles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlRolesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlRolesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlRolesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlRolesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlRolesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlSysLogProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.SysLog"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlSysLogProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlSysLogProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlSysLogProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlSysLogProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlSysLogProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_logId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlSysLogProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.SysLog objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlSysLogProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.SysLog objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlSysLogProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.SysLog objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlSysLogProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.SysLog objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlSysLogProviderBase.GetByLogId(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SysLog index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_logId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.SysLog"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlSysLogProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.SysLog})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.SysLog object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlSysLogProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.SysLog)">
            <summary>
            	Inserts a GE.MyLearning.BL.SysLog object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.SysLog object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.SysLog object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlSysLogProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.SysLog)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.SysLog object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.SysLog object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlSysLogProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlSysLogProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlSysLogProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlSysLogProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.SysLog"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlSysLogProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlSysLogProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVwUserGroupProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VwUserGroup"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwUserGroupProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwUserGroupProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlEvlVLearningRecordExcelProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.EvlVLearningRecordExcel"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlVLearningRecordExcelProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlVLearningRecordExcelProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVuReplypostProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VuReplypost"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuReplypostProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuReplypostProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlRolePermissionProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.RolePermission"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlRolePermissionProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlRolePermissionProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlTrainingUserProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.TrainingUser"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlTrainingUserProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlTrainingUserProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlCallRolesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.CallRoles"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCallRolesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlCallRolesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCallRolesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlCallRolesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCallRolesProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_callRoleId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCallRolesProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.CallRoles objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCallRolesProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.CallRoles objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCallRolesProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.CallRoles objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCallRolesProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.CallRoles objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCallRolesProviderBase.GetByCallRoleId(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_CallRoles index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_callRoleId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.CallRoles"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCallRolesProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.CallRoles})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.CallRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCallRolesProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.CallRoles)">
            <summary>
            	Inserts a GE.MyLearning.BL.CallRoles object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.CallRoles object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.CallRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCallRolesProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.CallRoles)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.CallRoles object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.CallRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlCallRolesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlCallRolesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlCallRolesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVwUserRoleProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwUserRole objects.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwUserRoleProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwUserRoleProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwUserRoleProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwUserRoleProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwUserRoleProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwUserRole objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwUserRoleProviderBase.Get(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwUserRole objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwUserRoleProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwUserRole objects.</returns>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwUserRoleProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwUserRoleProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlVwUserRoleProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlEvlGuestevlProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.EvlGuestevl"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlGuestevlProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlGuestevlProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlGuestevlProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlGuestevlProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlGuestevlProviderBase.Delete(GE.MyLearning.DL.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlGuestevlProviderBase.Find(GE.MyLearning.DL.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlGuestevl objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlGuestevlProviderBase.Find(GE.MyLearning.DL.TransactionManager,GE.MyLearning.DL.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:GE.MyLearning.DL.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlGuestevl objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlGuestevlProviderBase.GetAll(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlGuestevl objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlGuestevlProviderBase.GetPaged(GE.MyLearning.DL.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GE.MyLearning.BL.EvlGuestevl objects.</returns>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlGuestevlProviderBase.GetById(GE.MyLearning.DL.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_evl_guestevl index.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:GE.MyLearning.BL.EvlGuestevl"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlGuestevlProviderBase.BulkInsert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.TList{GE.MyLearning.BL.EvlGuestevl})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.EvlGuestevl object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlGuestevlProviderBase.Insert(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.EvlGuestevl)">
            <summary>
            	Inserts a GE.MyLearning.BL.EvlGuestevl object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.EvlGuestevl object to insert.</param>
            <remarks>
            	After inserting into the datasource, the GE.MyLearning.BL.EvlGuestevl object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlGuestevlProviderBase.Update(GE.MyLearning.DL.TransactionManager,GE.MyLearning.BL.EvlGuestevl)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:GE.MyLearning.DL.TransactionManager"/> object</param>
            <param name="entity">GE.MyLearning.BL.EvlGuestevl object to update.</param>
            <remarks>
            	After updating the datasource, the GE.MyLearning.BL.EvlGuestevl object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlGuestevlProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlGuestevlProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GE.MyLearning.DL.SqlClient.SqlEvlGuestevlProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlEvlCompetencyScoreDeptProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.EvlCompetencyScoreDept"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlCompetencyScoreDeptProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlCompetencyScoreDeptProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVuGroupItemProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VuGroupItem"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuGroupItemProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuGroupItemProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlCallRolesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.CallRoles"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlCallRolesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlCallRolesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlEvlGuestevlProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.EvlGuestevl"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlEvlGuestevlProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlEvlGuestevlProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlDepartmentProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.Department"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlDepartmentProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlDepartmentProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVuClassInfoProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VuClassInfo"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVuClassInfoProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVuClassInfoProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVwUserRoleProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VwUserRole"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwUserRoleProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwUserRoleProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:GE.MyLearning.DL.SqlClient.SqlVwStudentsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:GE.MyLearning.BL.VwStudents"/> entity.
            </summary>
        </member>
        <member name="M:GE.MyLearning.DL.SqlClient.SqlVwStudentsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GE.MyLearning.DL.SqlClient.SqlVwStudentsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
    </members>
</doc>
