
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file CourseIdea.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using Microsoft.Practices.EnterpriseLibrary.Validation.Validators;
using Microsoft.Practices.EnterpriseLibrary.Validation;

using GE.MyLearning.BL.Validation;
#endregion

namespace GE.MyLearning.BL
{
	///<summary>
	/// An object representation of the 'CourseIdea' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class CourseIdeaBase : EntityBase, ICourseIdea, IEntityId<CourseIdeaKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private CourseIdeaEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private CourseIdeaEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private CourseIdeaEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<CourseIdea> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CourseIdeaEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CourseIdeaEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="CourseIdeaBase"/> instance.
		///</summary>
		public CourseIdeaBase()
		{
			this.entityData = new CourseIdeaEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="CourseIdeaBase"/> instance.
		///</summary>
		///<param name="_courseId"></param>
		///<param name="_courseUserId"></param>
		///<param name="_courseUserDate"></param>
		///<param name="_courseKnowledge"></param>
		///<param name="_courseinstance"></param>
		///<param name="_courseUserIdea"></param>
		///<param name="_checkUserId"></param>
		///<param name="_checkUserDate"></param>
		///<param name="_checkUserIdea"></param>
		///<param name="_status"></param>
		public CourseIdeaBase(System.String _courseId, System.String _courseUserId, System.DateTime? _courseUserDate, 
			System.String _courseKnowledge, System.String _courseinstance, System.String _courseUserIdea, 
			System.String _checkUserId, System.DateTime? _checkUserDate, System.String _checkUserIdea, 
			System.Int32? _status)
		{
			this.entityData = new CourseIdeaEntityData();
			this.backupData = null;

			this.CourseId = _courseId;
			this.CourseUserId = _courseUserId;
			this.CourseUserDate = _courseUserDate;
			this.CourseKnowledge = _courseKnowledge;
			this.Courseinstance = _courseinstance;
			this.CourseUserIdea = _courseUserIdea;
			this.CheckUserId = _checkUserId;
			this.CheckUserDate = _checkUserDate;
			this.CheckUserIdea = _checkUserIdea;
			this.Status = _status;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="CourseIdea"/> instance.
		///</summary>
		///<param name="_courseId"></param>
		///<param name="_courseUserId"></param>
		///<param name="_courseUserDate"></param>
		///<param name="_courseKnowledge"></param>
		///<param name="_courseinstance"></param>
		///<param name="_courseUserIdea"></param>
		///<param name="_checkUserId"></param>
		///<param name="_checkUserDate"></param>
		///<param name="_checkUserIdea"></param>
		///<param name="_status"></param>
		public static CourseIdea CreateCourseIdea(System.String _courseId, System.String _courseUserId, System.DateTime? _courseUserDate, 
			System.String _courseKnowledge, System.String _courseinstance, System.String _courseUserIdea, 
			System.String _checkUserId, System.DateTime? _checkUserDate, System.String _checkUserIdea, 
			System.Int32? _status)
		{
			CourseIdea newCourseIdea = new CourseIdea();
			newCourseIdea.CourseId = _courseId;
			newCourseIdea.CourseUserId = _courseUserId;
			newCourseIdea.CourseUserDate = _courseUserDate;
			newCourseIdea.CourseKnowledge = _courseKnowledge;
			newCourseIdea.Courseinstance = _courseinstance;
			newCourseIdea.CourseUserIdea = _courseUserIdea;
			newCourseIdea.CheckUserId = _checkUserId;
			newCourseIdea.CheckUserDate = _checkUserDate;
			newCourseIdea.CheckUserIdea = _checkUserIdea;
			newCourseIdea.Status = _status;
			return newCourseIdea;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the CourseideaId property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int64 CourseideaId
		{
			get
			{
				return this.entityData.CourseideaId; 
			}
			
			set
			{
				if (this.entityData.CourseideaId == value)
					return;
					
				OnColumnChanging(CourseIdeaColumn.CourseideaId, this.entityData.CourseideaId);
				this.entityData.CourseideaId = value;
				this.EntityId.CourseideaId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CourseIdeaColumn.CourseideaId, this.entityData.CourseideaId);
				OnPropertyChanged("CourseideaId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CourseId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[NotNullValidator(MessageTemplate="Property does not allow null values.", Tag="CourseID")]
		[ValidatorComposition(CompositionType.And, Tag="CourseID")]

		[StringLengthValidator(20, MessageTemplate="Maximum length has been exceeded.", Tag="CourseID")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual System.String CourseId
		{
			get
			{
				return this.entityData.CourseId; 
			}
			
			set
			{
				if (this.entityData.CourseId == value)
					return;
					
				OnColumnChanging(CourseIdeaColumn.CourseId, this.entityData.CourseId);
				this.entityData.CourseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CourseIdeaColumn.CourseId, this.entityData.CourseId);
				OnPropertyChanged("CourseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CourseUserId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="CourseUserID")]
		[ValidatorComposition(CompositionType.Or, Tag="CourseUserID")]
		[StringLengthValidator(20, MessageTemplate="Maximum length has been exceeded.", Tag="CourseUserID")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String CourseUserId
		{
			get
			{
				return this.entityData.CourseUserId; 
			}
			
			set
			{
				if (this.entityData.CourseUserId == value)
					return;
					
				OnColumnChanging(CourseIdeaColumn.CourseUserId, this.entityData.CourseUserId);
				this.entityData.CourseUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CourseIdeaColumn.CourseUserId, this.entityData.CourseUserId);
				OnPropertyChanged("CourseUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CourseUserDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCourseUserDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CourseUserDate
		{
			get
			{
				return this.entityData.CourseUserDate; 
			}
			
			set
			{
				if (this.entityData.CourseUserDate == value)
					return;
					
				OnColumnChanging(CourseIdeaColumn.CourseUserDate, this.entityData.CourseUserDate);
				this.entityData.CourseUserDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CourseIdeaColumn.CourseUserDate, this.entityData.CourseUserDate);
				OnPropertyChanged("CourseUserDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CourseKnowledge property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="CourseKnowledge")]
		[ValidatorComposition(CompositionType.Or, Tag="CourseKnowledge")]
		[StringLengthValidator(250, MessageTemplate="Maximum length has been exceeded.", Tag="CourseKnowledge")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String CourseKnowledge
		{
			get
			{
				return this.entityData.CourseKnowledge; 
			}
			
			set
			{
				if (this.entityData.CourseKnowledge == value)
					return;
					
				OnColumnChanging(CourseIdeaColumn.CourseKnowledge, this.entityData.CourseKnowledge);
				this.entityData.CourseKnowledge = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CourseIdeaColumn.CourseKnowledge, this.entityData.CourseKnowledge);
				OnPropertyChanged("CourseKnowledge");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Courseinstance property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Courseinstance
		{
			get
			{
				return this.entityData.Courseinstance; 
			}
			
			set
			{
				if (this.entityData.Courseinstance == value)
					return;
					
				OnColumnChanging(CourseIdeaColumn.Courseinstance, this.entityData.Courseinstance);
				this.entityData.Courseinstance = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CourseIdeaColumn.Courseinstance, this.entityData.Courseinstance);
				OnPropertyChanged("Courseinstance");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CourseUserIdea property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String CourseUserIdea
		{
			get
			{
				return this.entityData.CourseUserIdea; 
			}
			
			set
			{
				if (this.entityData.CourseUserIdea == value)
					return;
					
				OnColumnChanging(CourseIdeaColumn.CourseUserIdea, this.entityData.CourseUserIdea);
				this.entityData.CourseUserIdea = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CourseIdeaColumn.CourseUserIdea, this.entityData.CourseUserIdea);
				OnPropertyChanged("CourseUserIdea");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CheckUserId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="CheckUserID")]
		[ValidatorComposition(CompositionType.Or, Tag="CheckUserID")]
		[StringLengthValidator(20, MessageTemplate="Maximum length has been exceeded.", Tag="CheckUserID")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String CheckUserId
		{
			get
			{
				return this.entityData.CheckUserId; 
			}
			
			set
			{
				if (this.entityData.CheckUserId == value)
					return;
					
				OnColumnChanging(CourseIdeaColumn.CheckUserId, this.entityData.CheckUserId);
				this.entityData.CheckUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CourseIdeaColumn.CheckUserId, this.entityData.CheckUserId);
				OnPropertyChanged("CheckUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CheckUserDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCheckUserDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CheckUserDate
		{
			get
			{
				return this.entityData.CheckUserDate; 
			}
			
			set
			{
				if (this.entityData.CheckUserDate == value)
					return;
					
				OnColumnChanging(CourseIdeaColumn.CheckUserDate, this.entityData.CheckUserDate);
				this.entityData.CheckUserDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CourseIdeaColumn.CheckUserDate, this.entityData.CheckUserDate);
				OnPropertyChanged("CheckUserDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CheckUserIdea property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String CheckUserIdea
		{
			get
			{
				return this.entityData.CheckUserIdea; 
			}
			
			set
			{
				if (this.entityData.CheckUserIdea == value)
					return;
					
				OnColumnChanging(CourseIdeaColumn.CheckUserIdea, this.entityData.CheckUserIdea);
				this.entityData.CheckUserIdea = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CourseIdeaColumn.CheckUserIdea, this.entityData.CheckUserIdea);
				OnPropertyChanged("CheckUserIdea");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsStatusNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
					
				OnColumnChanging(CourseIdeaColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CourseIdeaColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "CourseIdea"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"CourseideaID", "CourseID", "CourseUserID", "CourseUserDate", "CourseKnowledge", "Courseinstance", "CourseUserIdea", "CheckUserID", "CheckUserDate", "CheckUserIdea", "Status"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as CourseIdeaEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (CourseIdea) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<CourseIdea>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as CourseIdea);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed CourseIdea Entity 
		///</summary>
		protected virtual CourseIdea Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			CourseIdea copy = new CourseIdea();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.CourseideaId = this.CourseideaId;
				copy.CourseId = this.CourseId;
				copy.CourseUserId = this.CourseUserId;
				copy.CourseUserDate = this.CourseUserDate;
				copy.CourseKnowledge = this.CourseKnowledge;
				copy.Courseinstance = this.Courseinstance;
				copy.CourseUserIdea = this.CourseUserIdea;
				copy.CheckUserId = this.CheckUserId;
				copy.CheckUserDate = this.CheckUserDate;
				copy.CheckUserIdea = this.CheckUserIdea;
				copy.Status = this.Status;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed CourseIdea Entity 
		///</summary>
		public virtual CourseIdea Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed CourseIdea Entity which is a deep copy of the current entity.
		///</summary>
		public virtual CourseIdea DeepCopy()
		{
			return EntityHelper.Clone<CourseIdea>(this as CourseIdea);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as CourseIdeaEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new CourseIdeaEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as CourseIdeaEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(CourseIdeaColumn column)
		{
			switch(column)
			{
					case CourseIdeaColumn.CourseideaId:
					return entityData.CourseideaId != _originalData.CourseideaId;
					case CourseIdeaColumn.CourseId:
					return entityData.CourseId != _originalData.CourseId;
					case CourseIdeaColumn.CourseUserId:
					return entityData.CourseUserId != _originalData.CourseUserId;
					case CourseIdeaColumn.CourseUserDate:
					return entityData.CourseUserDate != _originalData.CourseUserDate;
					case CourseIdeaColumn.CourseKnowledge:
					return entityData.CourseKnowledge != _originalData.CourseKnowledge;
					case CourseIdeaColumn.Courseinstance:
					return entityData.Courseinstance != _originalData.Courseinstance;
					case CourseIdeaColumn.CourseUserIdea:
					return entityData.CourseUserIdea != _originalData.CourseUserIdea;
					case CourseIdeaColumn.CheckUserId:
					return entityData.CheckUserId != _originalData.CheckUserId;
					case CourseIdeaColumn.CheckUserDate:
					return entityData.CheckUserDate != _originalData.CheckUserDate;
					case CourseIdeaColumn.CheckUserIdea:
					return entityData.CheckUserIdea != _originalData.CheckUserIdea;
					case CourseIdeaColumn.Status:
					return entityData.Status != _originalData.Status;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< CourseIdeaColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.CourseideaId != _originalData.CourseideaId;
			result = result || entityData.CourseId != _originalData.CourseId;
			result = result || entityData.CourseUserId != _originalData.CourseUserId;
			result = result || entityData.CourseUserDate != _originalData.CourseUserDate;
			result = result || entityData.CourseKnowledge != _originalData.CourseKnowledge;
			result = result || entityData.Courseinstance != _originalData.Courseinstance;
			result = result || entityData.CourseUserIdea != _originalData.CourseUserIdea;
			result = result || entityData.CheckUserId != _originalData.CheckUserId;
			result = result || entityData.CheckUserDate != _originalData.CheckUserDate;
			result = result || entityData.CheckUserIdea != _originalData.CheckUserIdea;
			result = result || entityData.Status != _originalData.Status;
			return result;
		}	
		
		///<summary>
		///  Returns a CourseIdea Entity with the original data.
		///</summary>
		public CourseIdea GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateCourseIdea(
				_originalData.CourseId,
				_originalData.CourseUserId,
				_originalData.CourseUserDate,
				_originalData.CourseKnowledge,
				_originalData.Courseinstance,
				_originalData.CourseUserIdea,
				_originalData.CheckUserId,
				_originalData.CheckUserDate,
				_originalData.CheckUserIdea,
				_originalData.Status
				);
				
			return (CourseIdea)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="CourseIdeaBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is CourseIdeaBase)
				return ValueEquals(this, (CourseIdeaBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="CourseIdeaBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.CourseideaId.GetHashCode() ^ 
					this.CourseId.GetHashCode() ^ 
					((this.CourseUserId == null) ? string.Empty : this.CourseUserId.ToString()).GetHashCode() ^ 
					((this.CourseUserDate == null) ? string.Empty : this.CourseUserDate.ToString()).GetHashCode() ^ 
					((this.CourseKnowledge == null) ? string.Empty : this.CourseKnowledge.ToString()).GetHashCode() ^ 
					((this.Courseinstance == null) ? string.Empty : this.Courseinstance.ToString()).GetHashCode() ^ 
					((this.CourseUserIdea == null) ? string.Empty : this.CourseUserIdea.ToString()).GetHashCode() ^ 
					((this.CheckUserId == null) ? string.Empty : this.CheckUserId.ToString()).GetHashCode() ^ 
					((this.CheckUserDate == null) ? string.Empty : this.CheckUserDate.ToString()).GetHashCode() ^ 
					((this.CheckUserIdea == null) ? string.Empty : this.CheckUserIdea.ToString()).GetHashCode() ^ 
					((this.Status == null) ? string.Empty : this.Status.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="CourseIdeaBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(CourseIdeaBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="CourseIdeaBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="CourseIdeaBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="CourseIdeaBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(CourseIdeaBase Object1, CourseIdeaBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.CourseideaId != Object2.CourseideaId)
				equal = false;
			if (Object1.CourseId != Object2.CourseId)
				equal = false;
			if ( Object1.CourseUserId != null && Object2.CourseUserId != null )
			{
				if (Object1.CourseUserId != Object2.CourseUserId)
					equal = false;
			}
			else if (Object1.CourseUserId == null ^ Object2.CourseUserId == null )
			{
				equal = false;
			}
			if ( Object1.CourseUserDate != null && Object2.CourseUserDate != null )
			{
				if (Object1.CourseUserDate != Object2.CourseUserDate)
					equal = false;
			}
			else if (Object1.CourseUserDate == null ^ Object2.CourseUserDate == null )
			{
				equal = false;
			}
			if ( Object1.CourseKnowledge != null && Object2.CourseKnowledge != null )
			{
				if (Object1.CourseKnowledge != Object2.CourseKnowledge)
					equal = false;
			}
			else if (Object1.CourseKnowledge == null ^ Object2.CourseKnowledge == null )
			{
				equal = false;
			}
			if ( Object1.Courseinstance != null && Object2.Courseinstance != null )
			{
				if (Object1.Courseinstance != Object2.Courseinstance)
					equal = false;
			}
			else if (Object1.Courseinstance == null ^ Object2.Courseinstance == null )
			{
				equal = false;
			}
			if ( Object1.CourseUserIdea != null && Object2.CourseUserIdea != null )
			{
				if (Object1.CourseUserIdea != Object2.CourseUserIdea)
					equal = false;
			}
			else if (Object1.CourseUserIdea == null ^ Object2.CourseUserIdea == null )
			{
				equal = false;
			}
			if ( Object1.CheckUserId != null && Object2.CheckUserId != null )
			{
				if (Object1.CheckUserId != Object2.CheckUserId)
					equal = false;
			}
			else if (Object1.CheckUserId == null ^ Object2.CheckUserId == null )
			{
				equal = false;
			}
			if ( Object1.CheckUserDate != null && Object2.CheckUserDate != null )
			{
				if (Object1.CheckUserDate != Object2.CheckUserDate)
					equal = false;
			}
			else if (Object1.CheckUserDate == null ^ Object2.CheckUserDate == null )
			{
				equal = false;
			}
			if ( Object1.CheckUserIdea != null && Object2.CheckUserIdea != null )
			{
				if (Object1.CheckUserIdea != Object2.CheckUserIdea)
					equal = false;
			}
			else if (Object1.CheckUserIdea == null ^ Object2.CheckUserIdea == null )
			{
				equal = false;
			}
			if ( Object1.Status != null && Object2.Status != null )
			{
				if (Object1.Status != Object2.Status)
					equal = false;
			}
			else if (Object1.Status == null ^ Object2.Status == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((CourseIdeaBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static CourseIdeaComparer GetComparer()
        {
            return new CourseIdeaComparer();
        }
        */

        // Comparer delegates back to CourseIdea
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(CourseIdea rhs, CourseIdeaColumn which)
        {
            switch (which)
            {
            	
            	
            	case CourseIdeaColumn.CourseideaId:
            		return this.CourseideaId.CompareTo(rhs.CourseideaId);
            		
            		                 
            	
            	
            	case CourseIdeaColumn.CourseId:
            		return this.CourseId.CompareTo(rhs.CourseId);
            		
            		                 
            	
            	
            	case CourseIdeaColumn.CourseUserId:
            		return this.CourseUserId.CompareTo(rhs.CourseUserId);
            		
            		                 
            	
            	
            	case CourseIdeaColumn.CourseUserDate:
            		return this.CourseUserDate.Value.CompareTo(rhs.CourseUserDate.Value);
            		
            		                 
            	
            	
            	case CourseIdeaColumn.CourseKnowledge:
            		return this.CourseKnowledge.CompareTo(rhs.CourseKnowledge);
            		
            		                 
            	
            	
            	case CourseIdeaColumn.Courseinstance:
            		return this.Courseinstance.CompareTo(rhs.Courseinstance);
            		
            		                 
            	
            	
            	case CourseIdeaColumn.CourseUserIdea:
            		return this.CourseUserIdea.CompareTo(rhs.CourseUserIdea);
            		
            		                 
            	
            	
            	case CourseIdeaColumn.CheckUserId:
            		return this.CheckUserId.CompareTo(rhs.CheckUserId);
            		
            		                 
            	
            	
            	case CourseIdeaColumn.CheckUserDate:
            		return this.CheckUserDate.Value.CompareTo(rhs.CheckUserDate.Value);
            		
            		                 
            	
            	
            	case CourseIdeaColumn.CheckUserIdea:
            		return this.CheckUserIdea.CompareTo(rhs.CheckUserIdea);
            		
            		                 
            	
            	
            	case CourseIdeaColumn.Status:
            		return this.Status.Value.CompareTo(rhs.Status.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<CourseIdeaKey> Members
		
		// member variable for the EntityId property
		private CourseIdeaKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual CourseIdeaKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new CourseIdeaKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("CourseIdea")
					.Append("|").Append( this.CourseideaId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{12}{11}- CourseideaId: {0}{11}- CourseId: {1}{11}- CourseUserId: {2}{11}- CourseUserDate: {3}{11}- CourseKnowledge: {4}{11}- Courseinstance: {5}{11}- CourseUserIdea: {6}{11}- CheckUserId: {7}{11}- CheckUserDate: {8}{11}- CheckUserIdea: {9}{11}- Status: {10}{11}{13}", 
				this.CourseideaId,
				this.CourseId,
				(this.CourseUserId == null) ? string.Empty : this.CourseUserId.ToString(),
				(this.CourseUserDate == null) ? string.Empty : this.CourseUserDate.ToString(),
				(this.CourseKnowledge == null) ? string.Empty : this.CourseKnowledge.ToString(),
				(this.Courseinstance == null) ? string.Empty : this.Courseinstance.ToString(),
				(this.CourseUserIdea == null) ? string.Empty : this.CourseUserIdea.ToString(),
				(this.CheckUserId == null) ? string.Empty : this.CheckUserId.ToString(),
				(this.CheckUserDate == null) ? string.Empty : this.CheckUserDate.ToString(),
				(this.CheckUserIdea == null) ? string.Empty : this.CheckUserIdea.ToString(),
				(this.Status == null) ? string.Empty : this.Status.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'CourseIdea' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class CourseIdeaEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// CourseideaID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "CourseIdea"</remarks>
		public System.Int64 CourseideaId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// CourseID : 
		/// </summary>
		public System.String		  CourseId = string.Empty;
		
		/// <summary>
		/// CourseUserID : 
		/// </summary>
		public System.String		  CourseUserId = null;
		
		/// <summary>
		/// CourseUserDate : 
		/// </summary>
		public System.DateTime?		  CourseUserDate = null;
		
		/// <summary>
		/// CourseKnowledge : 
		/// </summary>
		public System.String		  CourseKnowledge = null;
		
		/// <summary>
		/// Courseinstance : 
		/// </summary>
		public System.String		  Courseinstance = null;
		
		/// <summary>
		/// CourseUserIdea : 
		/// </summary>
		public System.String		  CourseUserIdea = null;
		
		/// <summary>
		/// CheckUserID : 
		/// </summary>
		public System.String		  CheckUserId = null;
		
		/// <summary>
		/// CheckUserDate : 
		/// </summary>
		public System.DateTime?		  CheckUserDate = null;
		
		/// <summary>
		/// CheckUserIdea : 
		/// </summary>
		public System.String		  CheckUserIdea = null;
		
		/// <summary>
		/// Status : 
		/// </summary>
		public System.Int32?		  Status = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			CourseIdeaEntityData _tmp = new CourseIdeaEntityData();
						
			_tmp.CourseideaId = this.CourseideaId;
			
			_tmp.CourseId = this.CourseId;
			_tmp.CourseUserId = this.CourseUserId;
			_tmp.CourseUserDate = this.CourseUserDate;
			_tmp.CourseKnowledge = this.CourseKnowledge;
			_tmp.Courseinstance = this.Courseinstance;
			_tmp.CourseUserIdea = this.CourseUserIdea;
			_tmp.CheckUserId = this.CheckUserId;
			_tmp.CheckUserDate = this.CheckUserDate;
			_tmp.CheckUserIdea = this.CheckUserIdea;
			_tmp.Status = this.Status;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			CourseIdeaEntityData _tmp = new CourseIdeaEntityData();
						
			_tmp.CourseideaId = this.CourseideaId;
			
			_tmp.CourseId = this.CourseId;
			_tmp.CourseUserId = this.CourseUserId;
			_tmp.CourseUserDate = this.CourseUserDate;
			_tmp.CourseKnowledge = this.CourseKnowledge;
			_tmp.Courseinstance = this.Courseinstance;
			_tmp.CourseUserIdea = this.CourseUserIdea;
			_tmp.CheckUserId = this.CheckUserId;
			_tmp.CheckUserDate = this.CheckUserDate;
			_tmp.CheckUserIdea = this.CheckUserIdea;
			_tmp.Status = this.Status;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CourseIdeaColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(CourseIdeaColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CourseIdeaColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(CourseIdeaColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CourseIdeaColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(CourseIdeaColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				CourseIdeaEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new CourseIdeaEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CourseIdeaColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(CourseIdeaColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				CourseIdeaEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new CourseIdeaEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region CourseIdeaEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="CourseIdea"/> object.
	/// </remarks>
	public class CourseIdeaEventArgs : System.EventArgs
	{
		private CourseIdeaColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the CourseIdeaEventArgs class.
		///</summary>
		public CourseIdeaEventArgs(CourseIdeaColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the CourseIdeaEventArgs class.
		///</summary>
		public CourseIdeaEventArgs(CourseIdeaColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The CourseIdeaColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="CourseIdeaColumn" />
		public CourseIdeaColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all CourseIdea related events.
	///</summary>
	public delegate void CourseIdeaEventHandler(object sender, CourseIdeaEventArgs e);
	
	#region CourseIdeaComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class CourseIdeaComparer : System.Collections.Generic.IComparer<CourseIdea>
	{
		CourseIdeaColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:CourseIdeaComparer"/> class.
        /// </summary>
		public CourseIdeaComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:CourseIdeaComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public CourseIdeaComparer(CourseIdeaColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="CourseIdea"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="CourseIdea"/> to compare.</param>
        /// <param name="b">The second <c>CourseIdea</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(CourseIdea a, CourseIdea b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(CourseIdea entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(CourseIdea a, CourseIdea b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public CourseIdeaColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region CourseIdeaKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="CourseIdea"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class CourseIdeaKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the CourseIdeaKey class.
		/// </summary>
		public CourseIdeaKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the CourseIdeaKey class.
		/// </summary>
		public CourseIdeaKey(CourseIdeaBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.CourseideaId = entity.CourseideaId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the CourseIdeaKey class.
		/// </summary>
		public CourseIdeaKey(System.Int64 _courseideaId)
		{
			#region Init Properties

			this.CourseideaId = _courseideaId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private CourseIdeaBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public CourseIdeaBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the CourseideaId property
		private System.Int64 _courseideaId;
		
		/// <summary>
		/// Gets or sets the CourseideaId property.
		/// </summary>
		public System.Int64 CourseideaId
		{
			get { return _courseideaId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.CourseideaId = value;
				
				_courseideaId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				CourseideaId = ( values["CourseideaId"] != null ) ? (System.Int64) EntityUtil.ChangeType(values["CourseideaId"], typeof(System.Int64)) : (long)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("CourseideaId", CourseideaId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("CourseideaId: {0}{1}",
								CourseideaId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region CourseIdeaColumn Enum
	
	/// <summary>
	/// Enumerate the CourseIdea columns.
	/// </summary>
	[Serializable]
	public enum CourseIdeaColumn : int
	{
		/// <summary>
		/// CourseideaId : 
		/// </summary>
		[EnumTextValue("CourseideaID")]
		[ColumnEnum("CourseideaID", typeof(System.Int64), System.Data.DbType.Int64, true, true, false)]
		CourseideaId = 1,
		/// <summary>
		/// CourseId : 
		/// </summary>
		[EnumTextValue("CourseID")]
		[ColumnEnum("CourseID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		CourseId = 2,
		/// <summary>
		/// CourseUserId : 
		/// </summary>
		[EnumTextValue("CourseUserID")]
		[ColumnEnum("CourseUserID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		CourseUserId = 3,
		/// <summary>
		/// CourseUserDate : 
		/// </summary>
		[EnumTextValue("CourseUserDate")]
		[ColumnEnum("CourseUserDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CourseUserDate = 4,
		/// <summary>
		/// CourseKnowledge : 
		/// </summary>
		[EnumTextValue("CourseKnowledge")]
		[ColumnEnum("CourseKnowledge", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		CourseKnowledge = 5,
		/// <summary>
		/// Courseinstance : 
		/// </summary>
		[EnumTextValue("Courseinstance")]
		[ColumnEnum("Courseinstance", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Courseinstance = 6,
		/// <summary>
		/// CourseUserIdea : 
		/// </summary>
		[EnumTextValue("CourseUserIdea")]
		[ColumnEnum("CourseUserIdea", typeof(System.String), System.Data.DbType.String, false, false, true)]
		CourseUserIdea = 7,
		/// <summary>
		/// CheckUserId : 
		/// </summary>
		[EnumTextValue("CheckUserID")]
		[ColumnEnum("CheckUserID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		CheckUserId = 8,
		/// <summary>
		/// CheckUserDate : 
		/// </summary>
		[EnumTextValue("CheckUserDate")]
		[ColumnEnum("CheckUserDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CheckUserDate = 9,
		/// <summary>
		/// CheckUserIdea : 
		/// </summary>
		[EnumTextValue("CheckUserIdea")]
		[ColumnEnum("CheckUserIdea", typeof(System.String), System.Data.DbType.String, false, false, true)]
		CheckUserIdea = 10,
		/// <summary>
		/// Status : 
		/// </summary>
		[EnumTextValue("Status")]
		[ColumnEnum("Status", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Status = 11
	}//End enum

	#endregion CourseIdeaColumn Enum

} // end namespace
