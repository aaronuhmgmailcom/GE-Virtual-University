
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file TrainingUser.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using Microsoft.Practices.EnterpriseLibrary.Validation.Validators;
using Microsoft.Practices.EnterpriseLibrary.Validation;

using GE.MyLearning.BL.Validation;
#endregion

namespace GE.MyLearning.BL
{
	///<summary>
	/// An object representation of the 'TrainingUser' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class TrainingUserBase : EntityBase, ITrainingUser, IEntityId<TrainingUserKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private TrainingUserEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private TrainingUserEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private TrainingUserEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<TrainingUser> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event TrainingUserEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event TrainingUserEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="TrainingUserBase"/> instance.
		///</summary>
		public TrainingUserBase()
		{
			this.entityData = new TrainingUserEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="TrainingUserBase"/> instance.
		///</summary>
		///<param name="_userId"></param>
		///<param name="_groupId"></param>
		///<param name="_trainingUserType"></param>
		///<param name="_trainUserStatus"></param>
		///<param name="_trainAuditingStatus"></param>
		///<param name="_trainAuditingMan"></param>
		///<param name="_trainAuditingDate"></param>
		///<param name="_createTime"></param>
		///<param name="_courseId"></param>
		///<param name="_trainAuditingDescription"></param>
		///<param name="_trainingFinishTime"></param>
		///<param name="_testFinishTime"></param>
		///<param name="_investigationFinishTime"></param>
		///<param name="_studyFinishTime"></param>
		///<param name="_trainTimeUseCredit"></param>
		///<param name="_trainTimeAddPoint"></param>
		public TrainingUserBase(System.String _userId, System.String _groupId, System.Int32 _trainingUserType, 
			System.Int32 _trainUserStatus, System.Int32? _trainAuditingStatus, System.String _trainAuditingMan, 
			System.DateTime? _trainAuditingDate, System.DateTime? _createTime, System.String _courseId, 
			System.String _trainAuditingDescription, System.DateTime? _trainingFinishTime, System.DateTime? _testFinishTime, 
			System.DateTime? _investigationFinishTime, System.DateTime? _studyFinishTime, System.Int32? _trainTimeUseCredit, 
			System.Int32? _trainTimeAddPoint)
		{
			this.entityData = new TrainingUserEntityData();
			this.backupData = null;

			this.UserId = _userId;
			this.GroupId = _groupId;
			this.TrainingUserType = _trainingUserType;
			this.TrainUserStatus = _trainUserStatus;
			this.TrainAuditingStatus = _trainAuditingStatus;
			this.TrainAuditingMan = _trainAuditingMan;
			this.TrainAuditingDate = _trainAuditingDate;
			this.CreateTime = _createTime;
			this.CourseId = _courseId;
			this.TrainAuditingDescription = _trainAuditingDescription;
			this.TrainingFinishTime = _trainingFinishTime;
			this.TestFinishTime = _testFinishTime;
			this.InvestigationFinishTime = _investigationFinishTime;
			this.StudyFinishTime = _studyFinishTime;
			this.TrainTimeUseCredit = _trainTimeUseCredit;
			this.TrainTimeAddPoint = _trainTimeAddPoint;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="TrainingUser"/> instance.
		///</summary>
		///<param name="_userId"></param>
		///<param name="_groupId"></param>
		///<param name="_trainingUserType"></param>
		///<param name="_trainUserStatus"></param>
		///<param name="_trainAuditingStatus"></param>
		///<param name="_trainAuditingMan"></param>
		///<param name="_trainAuditingDate"></param>
		///<param name="_createTime"></param>
		///<param name="_courseId"></param>
		///<param name="_trainAuditingDescription"></param>
		///<param name="_trainingFinishTime"></param>
		///<param name="_testFinishTime"></param>
		///<param name="_investigationFinishTime"></param>
		///<param name="_studyFinishTime"></param>
		///<param name="_trainTimeUseCredit"></param>
		///<param name="_trainTimeAddPoint"></param>
		public static TrainingUser CreateTrainingUser(System.String _userId, System.String _groupId, System.Int32 _trainingUserType, 
			System.Int32 _trainUserStatus, System.Int32? _trainAuditingStatus, System.String _trainAuditingMan, 
			System.DateTime? _trainAuditingDate, System.DateTime? _createTime, System.String _courseId, 
			System.String _trainAuditingDescription, System.DateTime? _trainingFinishTime, System.DateTime? _testFinishTime, 
			System.DateTime? _investigationFinishTime, System.DateTime? _studyFinishTime, System.Int32? _trainTimeUseCredit, 
			System.Int32? _trainTimeAddPoint)
		{
			TrainingUser newTrainingUser = new TrainingUser();
			newTrainingUser.UserId = _userId;
			newTrainingUser.GroupId = _groupId;
			newTrainingUser.TrainingUserType = _trainingUserType;
			newTrainingUser.TrainUserStatus = _trainUserStatus;
			newTrainingUser.TrainAuditingStatus = _trainAuditingStatus;
			newTrainingUser.TrainAuditingMan = _trainAuditingMan;
			newTrainingUser.TrainAuditingDate = _trainAuditingDate;
			newTrainingUser.CreateTime = _createTime;
			newTrainingUser.CourseId = _courseId;
			newTrainingUser.TrainAuditingDescription = _trainAuditingDescription;
			newTrainingUser.TrainingFinishTime = _trainingFinishTime;
			newTrainingUser.TestFinishTime = _testFinishTime;
			newTrainingUser.InvestigationFinishTime = _investigationFinishTime;
			newTrainingUser.StudyFinishTime = _studyFinishTime;
			newTrainingUser.TrainTimeUseCredit = _trainTimeUseCredit;
			newTrainingUser.TrainTimeAddPoint = _trainTimeAddPoint;
			return newTrainingUser;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the TrainUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 TrainUserId
		{
			get
			{
				return this.entityData.TrainUserId; 
			}
			
			set
			{
				if (this.entityData.TrainUserId == value)
					return;
					
				OnColumnChanging(TrainingUserColumn.TrainUserId, this.entityData.TrainUserId);
				this.entityData.TrainUserId = value;
				this.EntityId.TrainUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrainingUserColumn.TrainUserId, this.entityData.TrainUserId);
				OnPropertyChanged("TrainUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[NotNullValidator(MessageTemplate="Property does not allow null values.", Tag="UserID")]
		[ValidatorComposition(CompositionType.And, Tag="UserID")]

		[StringLengthValidator(20, MessageTemplate="Maximum length has been exceeded.", Tag="UserID")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual System.String UserId
		{
			get
			{
				return this.entityData.UserId; 
			}
			
			set
			{
				if (this.entityData.UserId == value)
					return;
					
				OnColumnChanging(TrainingUserColumn.UserId, this.entityData.UserId);
				this.entityData.UserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrainingUserColumn.UserId, this.entityData.UserId);
				OnPropertyChanged("UserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GroupId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="GroupID")]
		[ValidatorComposition(CompositionType.Or, Tag="GroupID")]
		[StringLengthValidator(20, MessageTemplate="Maximum length has been exceeded.", Tag="GroupID")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String GroupId
		{
			get
			{
				return this.entityData.GroupId; 
			}
			
			set
			{
				if (this.entityData.GroupId == value)
					return;
					
				OnColumnChanging(TrainingUserColumn.GroupId, this.entityData.GroupId);
				this.entityData.GroupId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrainingUserColumn.GroupId, this.entityData.GroupId);
				OnPropertyChanged("GroupId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TrainingUserType property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 TrainingUserType
		{
			get
			{
				return this.entityData.TrainingUserType; 
			}
			
			set
			{
				if (this.entityData.TrainingUserType == value)
					return;
					
				OnColumnChanging(TrainingUserColumn.TrainingUserType, this.entityData.TrainingUserType);
				this.entityData.TrainingUserType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrainingUserColumn.TrainingUserType, this.entityData.TrainingUserType);
				OnPropertyChanged("TrainingUserType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TrainUserStatus property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 TrainUserStatus
		{
			get
			{
				return this.entityData.TrainUserStatus; 
			}
			
			set
			{
				if (this.entityData.TrainUserStatus == value)
					return;
					
				OnColumnChanging(TrainingUserColumn.TrainUserStatus, this.entityData.TrainUserStatus);
				this.entityData.TrainUserStatus = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrainingUserColumn.TrainUserStatus, this.entityData.TrainUserStatus);
				OnPropertyChanged("TrainUserStatus");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TrainAuditingStatus property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTrainAuditingStatusNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? TrainAuditingStatus
		{
			get
			{
				return this.entityData.TrainAuditingStatus; 
			}
			
			set
			{
				if (this.entityData.TrainAuditingStatus == value)
					return;
					
				OnColumnChanging(TrainingUserColumn.TrainAuditingStatus, this.entityData.TrainAuditingStatus);
				this.entityData.TrainAuditingStatus = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrainingUserColumn.TrainAuditingStatus, this.entityData.TrainAuditingStatus);
				OnPropertyChanged("TrainAuditingStatus");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TrainAuditingMan property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="TrainAuditingMan")]
		[ValidatorComposition(CompositionType.Or, Tag="TrainAuditingMan")]
		[StringLengthValidator(20, MessageTemplate="Maximum length has been exceeded.", Tag="TrainAuditingMan")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String TrainAuditingMan
		{
			get
			{
				return this.entityData.TrainAuditingMan; 
			}
			
			set
			{
				if (this.entityData.TrainAuditingMan == value)
					return;
					
				OnColumnChanging(TrainingUserColumn.TrainAuditingMan, this.entityData.TrainAuditingMan);
				this.entityData.TrainAuditingMan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrainingUserColumn.TrainAuditingMan, this.entityData.TrainAuditingMan);
				OnPropertyChanged("TrainAuditingMan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TrainAuditingDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsTrainAuditingDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? TrainAuditingDate
		{
			get
			{
				return this.entityData.TrainAuditingDate; 
			}
			
			set
			{
				if (this.entityData.TrainAuditingDate == value)
					return;
					
				OnColumnChanging(TrainingUserColumn.TrainAuditingDate, this.entityData.TrainAuditingDate);
				this.entityData.TrainAuditingDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrainingUserColumn.TrainAuditingDate, this.entityData.TrainAuditingDate);
				OnPropertyChanged("TrainAuditingDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCreateTimeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreateTime
		{
			get
			{
				return this.entityData.CreateTime; 
			}
			
			set
			{
				if (this.entityData.CreateTime == value)
					return;
					
				OnColumnChanging(TrainingUserColumn.CreateTime, this.entityData.CreateTime);
				this.entityData.CreateTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrainingUserColumn.CreateTime, this.entityData.CreateTime);
				OnPropertyChanged("CreateTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CourseId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[NotNullValidator(MessageTemplate="Property does not allow null values.", Tag="CourseID")]
		[ValidatorComposition(CompositionType.And, Tag="CourseID")]

		[StringLengthValidator(20, MessageTemplate="Maximum length has been exceeded.", Tag="CourseID")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual System.String CourseId
		{
			get
			{
				return this.entityData.CourseId; 
			}
			
			set
			{
				if (this.entityData.CourseId == value)
					return;
					
				OnColumnChanging(TrainingUserColumn.CourseId, this.entityData.CourseId);
				this.entityData.CourseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrainingUserColumn.CourseId, this.entityData.CourseId);
				OnPropertyChanged("CourseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TrainAuditingDescription property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="TrainAuditingDescription")]
		[ValidatorComposition(CompositionType.Or, Tag="TrainAuditingDescription")]
		[StringLengthValidator(500, MessageTemplate="Maximum length has been exceeded.", Tag="TrainAuditingDescription")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String TrainAuditingDescription
		{
			get
			{
				return this.entityData.TrainAuditingDescription; 
			}
			
			set
			{
				if (this.entityData.TrainAuditingDescription == value)
					return;
					
				OnColumnChanging(TrainingUserColumn.TrainAuditingDescription, this.entityData.TrainAuditingDescription);
				this.entityData.TrainAuditingDescription = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrainingUserColumn.TrainAuditingDescription, this.entityData.TrainAuditingDescription);
				OnPropertyChanged("TrainAuditingDescription");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TrainingFinishTime property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsTrainingFinishTimeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? TrainingFinishTime
		{
			get
			{
				return this.entityData.TrainingFinishTime; 
			}
			
			set
			{
				if (this.entityData.TrainingFinishTime == value)
					return;
					
				OnColumnChanging(TrainingUserColumn.TrainingFinishTime, this.entityData.TrainingFinishTime);
				this.entityData.TrainingFinishTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrainingUserColumn.TrainingFinishTime, this.entityData.TrainingFinishTime);
				OnPropertyChanged("TrainingFinishTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TestFinishTime property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsTestFinishTimeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? TestFinishTime
		{
			get
			{
				return this.entityData.TestFinishTime; 
			}
			
			set
			{
				if (this.entityData.TestFinishTime == value)
					return;
					
				OnColumnChanging(TrainingUserColumn.TestFinishTime, this.entityData.TestFinishTime);
				this.entityData.TestFinishTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrainingUserColumn.TestFinishTime, this.entityData.TestFinishTime);
				OnPropertyChanged("TestFinishTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InvestigationFinishTime property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsInvestigationFinishTimeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? InvestigationFinishTime
		{
			get
			{
				return this.entityData.InvestigationFinishTime; 
			}
			
			set
			{
				if (this.entityData.InvestigationFinishTime == value)
					return;
					
				OnColumnChanging(TrainingUserColumn.InvestigationFinishTime, this.entityData.InvestigationFinishTime);
				this.entityData.InvestigationFinishTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrainingUserColumn.InvestigationFinishTime, this.entityData.InvestigationFinishTime);
				OnPropertyChanged("InvestigationFinishTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StudyFinishTime property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsStudyFinishTimeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? StudyFinishTime
		{
			get
			{
				return this.entityData.StudyFinishTime; 
			}
			
			set
			{
				if (this.entityData.StudyFinishTime == value)
					return;
					
				OnColumnChanging(TrainingUserColumn.StudyFinishTime, this.entityData.StudyFinishTime);
				this.entityData.StudyFinishTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrainingUserColumn.StudyFinishTime, this.entityData.StudyFinishTime);
				OnPropertyChanged("StudyFinishTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TrainTimeUseCredit property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTrainTimeUseCreditNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? TrainTimeUseCredit
		{
			get
			{
				return this.entityData.TrainTimeUseCredit; 
			}
			
			set
			{
				if (this.entityData.TrainTimeUseCredit == value)
					return;
					
				OnColumnChanging(TrainingUserColumn.TrainTimeUseCredit, this.entityData.TrainTimeUseCredit);
				this.entityData.TrainTimeUseCredit = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrainingUserColumn.TrainTimeUseCredit, this.entityData.TrainTimeUseCredit);
				OnPropertyChanged("TrainTimeUseCredit");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TrainTimeAddPoint property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTrainTimeAddPointNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? TrainTimeAddPoint
		{
			get
			{
				return this.entityData.TrainTimeAddPoint; 
			}
			
			set
			{
				if (this.entityData.TrainTimeAddPoint == value)
					return;
					
				OnColumnChanging(TrainingUserColumn.TrainTimeAddPoint, this.entityData.TrainTimeAddPoint);
				this.entityData.TrainTimeAddPoint = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrainingUserColumn.TrainTimeAddPoint, this.entityData.TrainTimeAddPoint);
				OnPropertyChanged("TrainTimeAddPoint");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "TrainingUser"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"TrainUserID", "UserID", "GroupID", "TrainingUserType", "TrainUserStatus", "TrainAuditingStatus", "TrainAuditingMan", "TrainAuditingDate", "CreateTime", "CourseID", "TrainAuditingDescription", "TrainingFinishTime", "TestFinishTime", "InvestigationFinishTime", "StudyFinishTime", "TrainTimeUseCredit", "TrainTimeAddPoint"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as TrainingUserEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (TrainingUser) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<TrainingUser>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as TrainingUser);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed TrainingUser Entity 
		///</summary>
		protected virtual TrainingUser Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			TrainingUser copy = new TrainingUser();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.TrainUserId = this.TrainUserId;
				copy.UserId = this.UserId;
				copy.GroupId = this.GroupId;
				copy.TrainingUserType = this.TrainingUserType;
				copy.TrainUserStatus = this.TrainUserStatus;
				copy.TrainAuditingStatus = this.TrainAuditingStatus;
				copy.TrainAuditingMan = this.TrainAuditingMan;
				copy.TrainAuditingDate = this.TrainAuditingDate;
				copy.CreateTime = this.CreateTime;
				copy.CourseId = this.CourseId;
				copy.TrainAuditingDescription = this.TrainAuditingDescription;
				copy.TrainingFinishTime = this.TrainingFinishTime;
				copy.TestFinishTime = this.TestFinishTime;
				copy.InvestigationFinishTime = this.InvestigationFinishTime;
				copy.StudyFinishTime = this.StudyFinishTime;
				copy.TrainTimeUseCredit = this.TrainTimeUseCredit;
				copy.TrainTimeAddPoint = this.TrainTimeAddPoint;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed TrainingUser Entity 
		///</summary>
		public virtual TrainingUser Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed TrainingUser Entity which is a deep copy of the current entity.
		///</summary>
		public virtual TrainingUser DeepCopy()
		{
			return EntityHelper.Clone<TrainingUser>(this as TrainingUser);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as TrainingUserEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new TrainingUserEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as TrainingUserEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(TrainingUserColumn column)
		{
			switch(column)
			{
					case TrainingUserColumn.TrainUserId:
					return entityData.TrainUserId != _originalData.TrainUserId;
					case TrainingUserColumn.UserId:
					return entityData.UserId != _originalData.UserId;
					case TrainingUserColumn.GroupId:
					return entityData.GroupId != _originalData.GroupId;
					case TrainingUserColumn.TrainingUserType:
					return entityData.TrainingUserType != _originalData.TrainingUserType;
					case TrainingUserColumn.TrainUserStatus:
					return entityData.TrainUserStatus != _originalData.TrainUserStatus;
					case TrainingUserColumn.TrainAuditingStatus:
					return entityData.TrainAuditingStatus != _originalData.TrainAuditingStatus;
					case TrainingUserColumn.TrainAuditingMan:
					return entityData.TrainAuditingMan != _originalData.TrainAuditingMan;
					case TrainingUserColumn.TrainAuditingDate:
					return entityData.TrainAuditingDate != _originalData.TrainAuditingDate;
					case TrainingUserColumn.CreateTime:
					return entityData.CreateTime != _originalData.CreateTime;
					case TrainingUserColumn.CourseId:
					return entityData.CourseId != _originalData.CourseId;
					case TrainingUserColumn.TrainAuditingDescription:
					return entityData.TrainAuditingDescription != _originalData.TrainAuditingDescription;
					case TrainingUserColumn.TrainingFinishTime:
					return entityData.TrainingFinishTime != _originalData.TrainingFinishTime;
					case TrainingUserColumn.TestFinishTime:
					return entityData.TestFinishTime != _originalData.TestFinishTime;
					case TrainingUserColumn.InvestigationFinishTime:
					return entityData.InvestigationFinishTime != _originalData.InvestigationFinishTime;
					case TrainingUserColumn.StudyFinishTime:
					return entityData.StudyFinishTime != _originalData.StudyFinishTime;
					case TrainingUserColumn.TrainTimeUseCredit:
					return entityData.TrainTimeUseCredit != _originalData.TrainTimeUseCredit;
					case TrainingUserColumn.TrainTimeAddPoint:
					return entityData.TrainTimeAddPoint != _originalData.TrainTimeAddPoint;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< TrainingUserColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.TrainUserId != _originalData.TrainUserId;
			result = result || entityData.UserId != _originalData.UserId;
			result = result || entityData.GroupId != _originalData.GroupId;
			result = result || entityData.TrainingUserType != _originalData.TrainingUserType;
			result = result || entityData.TrainUserStatus != _originalData.TrainUserStatus;
			result = result || entityData.TrainAuditingStatus != _originalData.TrainAuditingStatus;
			result = result || entityData.TrainAuditingMan != _originalData.TrainAuditingMan;
			result = result || entityData.TrainAuditingDate != _originalData.TrainAuditingDate;
			result = result || entityData.CreateTime != _originalData.CreateTime;
			result = result || entityData.CourseId != _originalData.CourseId;
			result = result || entityData.TrainAuditingDescription != _originalData.TrainAuditingDescription;
			result = result || entityData.TrainingFinishTime != _originalData.TrainingFinishTime;
			result = result || entityData.TestFinishTime != _originalData.TestFinishTime;
			result = result || entityData.InvestigationFinishTime != _originalData.InvestigationFinishTime;
			result = result || entityData.StudyFinishTime != _originalData.StudyFinishTime;
			result = result || entityData.TrainTimeUseCredit != _originalData.TrainTimeUseCredit;
			result = result || entityData.TrainTimeAddPoint != _originalData.TrainTimeAddPoint;
			return result;
		}	
		
		///<summary>
		///  Returns a TrainingUser Entity with the original data.
		///</summary>
		public TrainingUser GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateTrainingUser(
				_originalData.UserId,
				_originalData.GroupId,
				_originalData.TrainingUserType,
				_originalData.TrainUserStatus,
				_originalData.TrainAuditingStatus,
				_originalData.TrainAuditingMan,
				_originalData.TrainAuditingDate,
				_originalData.CreateTime,
				_originalData.CourseId,
				_originalData.TrainAuditingDescription,
				_originalData.TrainingFinishTime,
				_originalData.TestFinishTime,
				_originalData.InvestigationFinishTime,
				_originalData.StudyFinishTime,
				_originalData.TrainTimeUseCredit,
				_originalData.TrainTimeAddPoint
				);
				
			return (TrainingUser)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="TrainingUserBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is TrainingUserBase)
				return ValueEquals(this, (TrainingUserBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="TrainingUserBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.TrainUserId.GetHashCode() ^ 
					this.UserId.GetHashCode() ^ 
					((this.GroupId == null) ? string.Empty : this.GroupId.ToString()).GetHashCode() ^ 
					this.TrainingUserType.GetHashCode() ^ 
					this.TrainUserStatus.GetHashCode() ^ 
					((this.TrainAuditingStatus == null) ? string.Empty : this.TrainAuditingStatus.ToString()).GetHashCode() ^ 
					((this.TrainAuditingMan == null) ? string.Empty : this.TrainAuditingMan.ToString()).GetHashCode() ^ 
					((this.TrainAuditingDate == null) ? string.Empty : this.TrainAuditingDate.ToString()).GetHashCode() ^ 
					((this.CreateTime == null) ? string.Empty : this.CreateTime.ToString()).GetHashCode() ^ 
					this.CourseId.GetHashCode() ^ 
					((this.TrainAuditingDescription == null) ? string.Empty : this.TrainAuditingDescription.ToString()).GetHashCode() ^ 
					((this.TrainingFinishTime == null) ? string.Empty : this.TrainingFinishTime.ToString()).GetHashCode() ^ 
					((this.TestFinishTime == null) ? string.Empty : this.TestFinishTime.ToString()).GetHashCode() ^ 
					((this.InvestigationFinishTime == null) ? string.Empty : this.InvestigationFinishTime.ToString()).GetHashCode() ^ 
					((this.StudyFinishTime == null) ? string.Empty : this.StudyFinishTime.ToString()).GetHashCode() ^ 
					((this.TrainTimeUseCredit == null) ? string.Empty : this.TrainTimeUseCredit.ToString()).GetHashCode() ^ 
					((this.TrainTimeAddPoint == null) ? string.Empty : this.TrainTimeAddPoint.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="TrainingUserBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(TrainingUserBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="TrainingUserBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="TrainingUserBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="TrainingUserBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(TrainingUserBase Object1, TrainingUserBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.TrainUserId != Object2.TrainUserId)
				equal = false;
			if (Object1.UserId != Object2.UserId)
				equal = false;
			if ( Object1.GroupId != null && Object2.GroupId != null )
			{
				if (Object1.GroupId != Object2.GroupId)
					equal = false;
			}
			else if (Object1.GroupId == null ^ Object2.GroupId == null )
			{
				equal = false;
			}
			if (Object1.TrainingUserType != Object2.TrainingUserType)
				equal = false;
			if (Object1.TrainUserStatus != Object2.TrainUserStatus)
				equal = false;
			if ( Object1.TrainAuditingStatus != null && Object2.TrainAuditingStatus != null )
			{
				if (Object1.TrainAuditingStatus != Object2.TrainAuditingStatus)
					equal = false;
			}
			else if (Object1.TrainAuditingStatus == null ^ Object2.TrainAuditingStatus == null )
			{
				equal = false;
			}
			if ( Object1.TrainAuditingMan != null && Object2.TrainAuditingMan != null )
			{
				if (Object1.TrainAuditingMan != Object2.TrainAuditingMan)
					equal = false;
			}
			else if (Object1.TrainAuditingMan == null ^ Object2.TrainAuditingMan == null )
			{
				equal = false;
			}
			if ( Object1.TrainAuditingDate != null && Object2.TrainAuditingDate != null )
			{
				if (Object1.TrainAuditingDate != Object2.TrainAuditingDate)
					equal = false;
			}
			else if (Object1.TrainAuditingDate == null ^ Object2.TrainAuditingDate == null )
			{
				equal = false;
			}
			if ( Object1.CreateTime != null && Object2.CreateTime != null )
			{
				if (Object1.CreateTime != Object2.CreateTime)
					equal = false;
			}
			else if (Object1.CreateTime == null ^ Object2.CreateTime == null )
			{
				equal = false;
			}
			if (Object1.CourseId != Object2.CourseId)
				equal = false;
			if ( Object1.TrainAuditingDescription != null && Object2.TrainAuditingDescription != null )
			{
				if (Object1.TrainAuditingDescription != Object2.TrainAuditingDescription)
					equal = false;
			}
			else if (Object1.TrainAuditingDescription == null ^ Object2.TrainAuditingDescription == null )
			{
				equal = false;
			}
			if ( Object1.TrainingFinishTime != null && Object2.TrainingFinishTime != null )
			{
				if (Object1.TrainingFinishTime != Object2.TrainingFinishTime)
					equal = false;
			}
			else if (Object1.TrainingFinishTime == null ^ Object2.TrainingFinishTime == null )
			{
				equal = false;
			}
			if ( Object1.TestFinishTime != null && Object2.TestFinishTime != null )
			{
				if (Object1.TestFinishTime != Object2.TestFinishTime)
					equal = false;
			}
			else if (Object1.TestFinishTime == null ^ Object2.TestFinishTime == null )
			{
				equal = false;
			}
			if ( Object1.InvestigationFinishTime != null && Object2.InvestigationFinishTime != null )
			{
				if (Object1.InvestigationFinishTime != Object2.InvestigationFinishTime)
					equal = false;
			}
			else if (Object1.InvestigationFinishTime == null ^ Object2.InvestigationFinishTime == null )
			{
				equal = false;
			}
			if ( Object1.StudyFinishTime != null && Object2.StudyFinishTime != null )
			{
				if (Object1.StudyFinishTime != Object2.StudyFinishTime)
					equal = false;
			}
			else if (Object1.StudyFinishTime == null ^ Object2.StudyFinishTime == null )
			{
				equal = false;
			}
			if ( Object1.TrainTimeUseCredit != null && Object2.TrainTimeUseCredit != null )
			{
				if (Object1.TrainTimeUseCredit != Object2.TrainTimeUseCredit)
					equal = false;
			}
			else if (Object1.TrainTimeUseCredit == null ^ Object2.TrainTimeUseCredit == null )
			{
				equal = false;
			}
			if ( Object1.TrainTimeAddPoint != null && Object2.TrainTimeAddPoint != null )
			{
				if (Object1.TrainTimeAddPoint != Object2.TrainTimeAddPoint)
					equal = false;
			}
			else if (Object1.TrainTimeAddPoint == null ^ Object2.TrainTimeAddPoint == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((TrainingUserBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static TrainingUserComparer GetComparer()
        {
            return new TrainingUserComparer();
        }
        */

        // Comparer delegates back to TrainingUser
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(TrainingUser rhs, TrainingUserColumn which)
        {
            switch (which)
            {
            	
            	
            	case TrainingUserColumn.TrainUserId:
            		return this.TrainUserId.CompareTo(rhs.TrainUserId);
            		
            		                 
            	
            	
            	case TrainingUserColumn.UserId:
            		return this.UserId.CompareTo(rhs.UserId);
            		
            		                 
            	
            	
            	case TrainingUserColumn.GroupId:
            		return this.GroupId.CompareTo(rhs.GroupId);
            		
            		                 
            	
            	
            	case TrainingUserColumn.TrainingUserType:
            		return this.TrainingUserType.CompareTo(rhs.TrainingUserType);
            		
            		                 
            	
            	
            	case TrainingUserColumn.TrainUserStatus:
            		return this.TrainUserStatus.CompareTo(rhs.TrainUserStatus);
            		
            		                 
            	
            	
            	case TrainingUserColumn.TrainAuditingStatus:
            		return this.TrainAuditingStatus.Value.CompareTo(rhs.TrainAuditingStatus.Value);
            		
            		                 
            	
            	
            	case TrainingUserColumn.TrainAuditingMan:
            		return this.TrainAuditingMan.CompareTo(rhs.TrainAuditingMan);
            		
            		                 
            	
            	
            	case TrainingUserColumn.TrainAuditingDate:
            		return this.TrainAuditingDate.Value.CompareTo(rhs.TrainAuditingDate.Value);
            		
            		                 
            	
            	
            	case TrainingUserColumn.CreateTime:
            		return this.CreateTime.Value.CompareTo(rhs.CreateTime.Value);
            		
            		                 
            	
            	
            	case TrainingUserColumn.CourseId:
            		return this.CourseId.CompareTo(rhs.CourseId);
            		
            		                 
            	
            	
            	case TrainingUserColumn.TrainAuditingDescription:
            		return this.TrainAuditingDescription.CompareTo(rhs.TrainAuditingDescription);
            		
            		                 
            	
            	
            	case TrainingUserColumn.TrainingFinishTime:
            		return this.TrainingFinishTime.Value.CompareTo(rhs.TrainingFinishTime.Value);
            		
            		                 
            	
            	
            	case TrainingUserColumn.TestFinishTime:
            		return this.TestFinishTime.Value.CompareTo(rhs.TestFinishTime.Value);
            		
            		                 
            	
            	
            	case TrainingUserColumn.InvestigationFinishTime:
            		return this.InvestigationFinishTime.Value.CompareTo(rhs.InvestigationFinishTime.Value);
            		
            		                 
            	
            	
            	case TrainingUserColumn.StudyFinishTime:
            		return this.StudyFinishTime.Value.CompareTo(rhs.StudyFinishTime.Value);
            		
            		                 
            	
            	
            	case TrainingUserColumn.TrainTimeUseCredit:
            		return this.TrainTimeUseCredit.Value.CompareTo(rhs.TrainTimeUseCredit.Value);
            		
            		                 
            	
            	
            	case TrainingUserColumn.TrainTimeAddPoint:
            		return this.TrainTimeAddPoint.Value.CompareTo(rhs.TrainTimeAddPoint.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<TrainingUserKey> Members
		
		// member variable for the EntityId property
		private TrainingUserKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual TrainingUserKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new TrainingUserKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("TrainingUser")
					.Append("|").Append( this.TrainUserId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{18}{17}- TrainUserId: {0}{17}- UserId: {1}{17}- GroupId: {2}{17}- TrainingUserType: {3}{17}- TrainUserStatus: {4}{17}- TrainAuditingStatus: {5}{17}- TrainAuditingMan: {6}{17}- TrainAuditingDate: {7}{17}- CreateTime: {8}{17}- CourseId: {9}{17}- TrainAuditingDescription: {10}{17}- TrainingFinishTime: {11}{17}- TestFinishTime: {12}{17}- InvestigationFinishTime: {13}{17}- StudyFinishTime: {14}{17}- TrainTimeUseCredit: {15}{17}- TrainTimeAddPoint: {16}{17}{19}", 
				this.TrainUserId,
				this.UserId,
				(this.GroupId == null) ? string.Empty : this.GroupId.ToString(),
				this.TrainingUserType,
				this.TrainUserStatus,
				(this.TrainAuditingStatus == null) ? string.Empty : this.TrainAuditingStatus.ToString(),
				(this.TrainAuditingMan == null) ? string.Empty : this.TrainAuditingMan.ToString(),
				(this.TrainAuditingDate == null) ? string.Empty : this.TrainAuditingDate.ToString(),
				(this.CreateTime == null) ? string.Empty : this.CreateTime.ToString(),
				this.CourseId,
				(this.TrainAuditingDescription == null) ? string.Empty : this.TrainAuditingDescription.ToString(),
				(this.TrainingFinishTime == null) ? string.Empty : this.TrainingFinishTime.ToString(),
				(this.TestFinishTime == null) ? string.Empty : this.TestFinishTime.ToString(),
				(this.InvestigationFinishTime == null) ? string.Empty : this.InvestigationFinishTime.ToString(),
				(this.StudyFinishTime == null) ? string.Empty : this.StudyFinishTime.ToString(),
				(this.TrainTimeUseCredit == null) ? string.Empty : this.TrainTimeUseCredit.ToString(),
				(this.TrainTimeAddPoint == null) ? string.Empty : this.TrainTimeAddPoint.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'TrainingUser' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class TrainingUserEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// TrainUserID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "TrainingUser"</remarks>
		public System.Int32 TrainUserId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// UserID : 
		/// </summary>
		public System.String		  UserId = string.Empty;
		
		/// <summary>
		/// GroupID : 
		/// </summary>
		public System.String		  GroupId = null;
		
		/// <summary>
		/// TrainingUserType : 
		/// </summary>
		public System.Int32		  TrainingUserType = (int)0;
		
		/// <summary>
		/// TrainUserStatus : 
		/// </summary>
		public System.Int32		  TrainUserStatus = (int)0;
		
		/// <summary>
		/// TrainAuditingStatus : 
		/// </summary>
		public System.Int32?		  TrainAuditingStatus = null;
		
		/// <summary>
		/// TrainAuditingMan : 
		/// </summary>
		public System.String		  TrainAuditingMan = null;
		
		/// <summary>
		/// TrainAuditingDate : 
		/// </summary>
		public System.DateTime?		  TrainAuditingDate = null;
		
		/// <summary>
		/// CreateTime : 
		/// </summary>
		public System.DateTime?		  CreateTime = null;
		
		/// <summary>
		/// CourseID : 
		/// </summary>
		public System.String		  CourseId = string.Empty;
		
		/// <summary>
		/// TrainAuditingDescription : 
		/// </summary>
		public System.String		  TrainAuditingDescription = null;
		
		/// <summary>
		/// TrainingFinishTime : 
		/// </summary>
		public System.DateTime?		  TrainingFinishTime = null;
		
		/// <summary>
		/// TestFinishTime : 
		/// </summary>
		public System.DateTime?		  TestFinishTime = null;
		
		/// <summary>
		/// InvestigationFinishTime : 
		/// </summary>
		public System.DateTime?		  InvestigationFinishTime = null;
		
		/// <summary>
		/// StudyFinishTime : 
		/// </summary>
		public System.DateTime?		  StudyFinishTime = null;
		
		/// <summary>
		/// TrainTimeUseCredit : 
		/// </summary>
		public System.Int32?		  TrainTimeUseCredit = null;
		
		/// <summary>
		/// TrainTimeAddPoint : 
		/// </summary>
		public System.Int32?		  TrainTimeAddPoint = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			TrainingUserEntityData _tmp = new TrainingUserEntityData();
						
			_tmp.TrainUserId = this.TrainUserId;
			
			_tmp.UserId = this.UserId;
			_tmp.GroupId = this.GroupId;
			_tmp.TrainingUserType = this.TrainingUserType;
			_tmp.TrainUserStatus = this.TrainUserStatus;
			_tmp.TrainAuditingStatus = this.TrainAuditingStatus;
			_tmp.TrainAuditingMan = this.TrainAuditingMan;
			_tmp.TrainAuditingDate = this.TrainAuditingDate;
			_tmp.CreateTime = this.CreateTime;
			_tmp.CourseId = this.CourseId;
			_tmp.TrainAuditingDescription = this.TrainAuditingDescription;
			_tmp.TrainingFinishTime = this.TrainingFinishTime;
			_tmp.TestFinishTime = this.TestFinishTime;
			_tmp.InvestigationFinishTime = this.InvestigationFinishTime;
			_tmp.StudyFinishTime = this.StudyFinishTime;
			_tmp.TrainTimeUseCredit = this.TrainTimeUseCredit;
			_tmp.TrainTimeAddPoint = this.TrainTimeAddPoint;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			TrainingUserEntityData _tmp = new TrainingUserEntityData();
						
			_tmp.TrainUserId = this.TrainUserId;
			
			_tmp.UserId = this.UserId;
			_tmp.GroupId = this.GroupId;
			_tmp.TrainingUserType = this.TrainingUserType;
			_tmp.TrainUserStatus = this.TrainUserStatus;
			_tmp.TrainAuditingStatus = this.TrainAuditingStatus;
			_tmp.TrainAuditingMan = this.TrainAuditingMan;
			_tmp.TrainAuditingDate = this.TrainAuditingDate;
			_tmp.CreateTime = this.CreateTime;
			_tmp.CourseId = this.CourseId;
			_tmp.TrainAuditingDescription = this.TrainAuditingDescription;
			_tmp.TrainingFinishTime = this.TrainingFinishTime;
			_tmp.TestFinishTime = this.TestFinishTime;
			_tmp.InvestigationFinishTime = this.InvestigationFinishTime;
			_tmp.StudyFinishTime = this.StudyFinishTime;
			_tmp.TrainTimeUseCredit = this.TrainTimeUseCredit;
			_tmp.TrainTimeAddPoint = this.TrainTimeAddPoint;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TrainingUserColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(TrainingUserColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TrainingUserColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(TrainingUserColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TrainingUserColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(TrainingUserColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				TrainingUserEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new TrainingUserEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TrainingUserColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(TrainingUserColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				TrainingUserEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new TrainingUserEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region TrainingUserEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="TrainingUser"/> object.
	/// </remarks>
	public class TrainingUserEventArgs : System.EventArgs
	{
		private TrainingUserColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the TrainingUserEventArgs class.
		///</summary>
		public TrainingUserEventArgs(TrainingUserColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the TrainingUserEventArgs class.
		///</summary>
		public TrainingUserEventArgs(TrainingUserColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The TrainingUserColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="TrainingUserColumn" />
		public TrainingUserColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all TrainingUser related events.
	///</summary>
	public delegate void TrainingUserEventHandler(object sender, TrainingUserEventArgs e);
	
	#region TrainingUserComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class TrainingUserComparer : System.Collections.Generic.IComparer<TrainingUser>
	{
		TrainingUserColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:TrainingUserComparer"/> class.
        /// </summary>
		public TrainingUserComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:TrainingUserComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public TrainingUserComparer(TrainingUserColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="TrainingUser"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="TrainingUser"/> to compare.</param>
        /// <param name="b">The second <c>TrainingUser</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(TrainingUser a, TrainingUser b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(TrainingUser entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(TrainingUser a, TrainingUser b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public TrainingUserColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region TrainingUserKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="TrainingUser"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class TrainingUserKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the TrainingUserKey class.
		/// </summary>
		public TrainingUserKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the TrainingUserKey class.
		/// </summary>
		public TrainingUserKey(TrainingUserBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.TrainUserId = entity.TrainUserId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the TrainingUserKey class.
		/// </summary>
		public TrainingUserKey(System.Int32 _trainUserId)
		{
			#region Init Properties

			this.TrainUserId = _trainUserId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private TrainingUserBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public TrainingUserBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the TrainUserId property
		private System.Int32 _trainUserId;
		
		/// <summary>
		/// Gets or sets the TrainUserId property.
		/// </summary>
		public System.Int32 TrainUserId
		{
			get { return _trainUserId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.TrainUserId = value;
				
				_trainUserId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				TrainUserId = ( values["TrainUserId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["TrainUserId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("TrainUserId", TrainUserId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("TrainUserId: {0}{1}",
								TrainUserId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region TrainingUserColumn Enum
	
	/// <summary>
	/// Enumerate the TrainingUser columns.
	/// </summary>
	[Serializable]
	public enum TrainingUserColumn : int
	{
		/// <summary>
		/// TrainUserId : 
		/// </summary>
		[EnumTextValue("TrainUserID")]
		[ColumnEnum("TrainUserID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		TrainUserId = 1,
		/// <summary>
		/// UserId : 
		/// </summary>
		[EnumTextValue("UserID")]
		[ColumnEnum("UserID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		UserId = 2,
		/// <summary>
		/// GroupId : 
		/// </summary>
		[EnumTextValue("GroupID")]
		[ColumnEnum("GroupID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		GroupId = 3,
		/// <summary>
		/// TrainingUserType : 
		/// </summary>
		[EnumTextValue("TrainingUserType")]
		[ColumnEnum("TrainingUserType", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		TrainingUserType = 4,
		/// <summary>
		/// TrainUserStatus : 
		/// </summary>
		[EnumTextValue("TrainUserStatus")]
		[ColumnEnum("TrainUserStatus", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		TrainUserStatus = 5,
		/// <summary>
		/// TrainAuditingStatus : 
		/// </summary>
		[EnumTextValue("TrainAuditingStatus")]
		[ColumnEnum("TrainAuditingStatus", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TrainAuditingStatus = 6,
		/// <summary>
		/// TrainAuditingMan : 
		/// </summary>
		[EnumTextValue("TrainAuditingMan")]
		[ColumnEnum("TrainAuditingMan", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		TrainAuditingMan = 7,
		/// <summary>
		/// TrainAuditingDate : 
		/// </summary>
		[EnumTextValue("TrainAuditingDate")]
		[ColumnEnum("TrainAuditingDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		TrainAuditingDate = 8,
		/// <summary>
		/// CreateTime : 
		/// </summary>
		[EnumTextValue("CreateTime")]
		[ColumnEnum("CreateTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreateTime = 9,
		/// <summary>
		/// CourseId : 
		/// </summary>
		[EnumTextValue("CourseID")]
		[ColumnEnum("CourseID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		CourseId = 10,
		/// <summary>
		/// TrainAuditingDescription : 
		/// </summary>
		[EnumTextValue("TrainAuditingDescription")]
		[ColumnEnum("TrainAuditingDescription", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 500)]
		TrainAuditingDescription = 11,
		/// <summary>
		/// TrainingFinishTime : 
		/// </summary>
		[EnumTextValue("TrainingFinishTime")]
		[ColumnEnum("TrainingFinishTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		TrainingFinishTime = 12,
		/// <summary>
		/// TestFinishTime : 
		/// </summary>
		[EnumTextValue("TestFinishTime")]
		[ColumnEnum("TestFinishTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		TestFinishTime = 13,
		/// <summary>
		/// InvestigationFinishTime : 
		/// </summary>
		[EnumTextValue("InvestigationFinishTime")]
		[ColumnEnum("InvestigationFinishTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		InvestigationFinishTime = 14,
		/// <summary>
		/// StudyFinishTime : 
		/// </summary>
		[EnumTextValue("StudyFinishTime")]
		[ColumnEnum("StudyFinishTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		StudyFinishTime = 15,
		/// <summary>
		/// TrainTimeUseCredit : 
		/// </summary>
		[EnumTextValue("TrainTimeUseCredit")]
		[ColumnEnum("TrainTimeUseCredit", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TrainTimeUseCredit = 16,
		/// <summary>
		/// TrainTimeAddPoint : 
		/// </summary>
		[EnumTextValue("TrainTimeAddPoint")]
		[ColumnEnum("TrainTimeAddPoint", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TrainTimeAddPoint = 17
	}//End enum

	#endregion TrainingUserColumn Enum

} // end namespace
