
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file DegreeApply.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using Microsoft.Practices.EnterpriseLibrary.Validation.Validators;
using Microsoft.Practices.EnterpriseLibrary.Validation;

using GE.MyLearning.BL.Validation;
#endregion

namespace GE.MyLearning.BL
{
	///<summary>
	/// An object representation of the 'DegreeApply' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class DegreeApplyBase : EntityBase, IDegreeApply, IEntityId<DegreeApplyKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private DegreeApplyEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private DegreeApplyEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private DegreeApplyEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<DegreeApply> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event DegreeApplyEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event DegreeApplyEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="DegreeApplyBase"/> instance.
		///</summary>
		public DegreeApplyBase()
		{
			this.entityData = new DegreeApplyEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="DegreeApplyBase"/> instance.
		///</summary>
		///<param name="_instituteId"></param>
		///<param name="_degreeId"></param>
		///<param name="_applyUserId"></param>
		///<param name="_approveUserId"></param>
		///<param name="_applyDate"></param>
		///<param name="_approveDate"></param>
		///<param name="_studentId"></param>
		///<param name="_description"></param>
		///<param name="_status"></param>
		public DegreeApplyBase(System.String _instituteId, System.Int32? _degreeId, System.String _applyUserId, 
			System.String _approveUserId, System.DateTime? _applyDate, System.DateTime? _approveDate, 
			System.Int32? _studentId, System.String _description, System.Int32? _status)
		{
			this.entityData = new DegreeApplyEntityData();
			this.backupData = null;

			this.InstituteId = _instituteId;
			this.DegreeId = _degreeId;
			this.ApplyUserId = _applyUserId;
			this.ApproveUserId = _approveUserId;
			this.ApplyDate = _applyDate;
			this.ApproveDate = _approveDate;
			this.StudentId = _studentId;
			this.Description = _description;
			this.Status = _status;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="DegreeApply"/> instance.
		///</summary>
		///<param name="_instituteId"></param>
		///<param name="_degreeId"></param>
		///<param name="_applyUserId"></param>
		///<param name="_approveUserId"></param>
		///<param name="_applyDate"></param>
		///<param name="_approveDate"></param>
		///<param name="_studentId"></param>
		///<param name="_description"></param>
		///<param name="_status"></param>
		public static DegreeApply CreateDegreeApply(System.String _instituteId, System.Int32? _degreeId, System.String _applyUserId, 
			System.String _approveUserId, System.DateTime? _applyDate, System.DateTime? _approveDate, 
			System.Int32? _studentId, System.String _description, System.Int32? _status)
		{
			DegreeApply newDegreeApply = new DegreeApply();
			newDegreeApply.InstituteId = _instituteId;
			newDegreeApply.DegreeId = _degreeId;
			newDegreeApply.ApplyUserId = _applyUserId;
			newDegreeApply.ApproveUserId = _approveUserId;
			newDegreeApply.ApplyDate = _applyDate;
			newDegreeApply.ApproveDate = _approveDate;
			newDegreeApply.StudentId = _studentId;
			newDegreeApply.Description = _description;
			newDegreeApply.Status = _status;
			return newDegreeApply;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the DegreeApplyId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 DegreeApplyId
		{
			get
			{
				return this.entityData.DegreeApplyId; 
			}
			
			set
			{
				if (this.entityData.DegreeApplyId == value)
					return;
					
				OnColumnChanging(DegreeApplyColumn.DegreeApplyId, this.entityData.DegreeApplyId);
				this.entityData.DegreeApplyId = value;
				this.EntityId.DegreeApplyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DegreeApplyColumn.DegreeApplyId, this.entityData.DegreeApplyId);
				OnPropertyChanged("DegreeApplyId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InstituteId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="InstituteID")]
		[ValidatorComposition(CompositionType.Or, Tag="InstituteID")]
		[StringLengthValidator(20, MessageTemplate="Maximum length has been exceeded.", Tag="InstituteID")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String InstituteId
		{
			get
			{
				return this.entityData.InstituteId; 
			}
			
			set
			{
				if (this.entityData.InstituteId == value)
					return;
					
				OnColumnChanging(DegreeApplyColumn.InstituteId, this.entityData.InstituteId);
				this.entityData.InstituteId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DegreeApplyColumn.InstituteId, this.entityData.InstituteId);
				OnPropertyChanged("InstituteId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DegreeId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDegreeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DegreeId
		{
			get
			{
				return this.entityData.DegreeId; 
			}
			
			set
			{
				if (this.entityData.DegreeId == value)
					return;
					
				OnColumnChanging(DegreeApplyColumn.DegreeId, this.entityData.DegreeId);
				this.entityData.DegreeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DegreeApplyColumn.DegreeId, this.entityData.DegreeId);
				OnPropertyChanged("DegreeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApplyUserId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="ApplyUserID")]
		[ValidatorComposition(CompositionType.Or, Tag="ApplyUserID")]
		[StringLengthValidator(20, MessageTemplate="Maximum length has been exceeded.", Tag="ApplyUserID")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String ApplyUserId
		{
			get
			{
				return this.entityData.ApplyUserId; 
			}
			
			set
			{
				if (this.entityData.ApplyUserId == value)
					return;
					
				OnColumnChanging(DegreeApplyColumn.ApplyUserId, this.entityData.ApplyUserId);
				this.entityData.ApplyUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DegreeApplyColumn.ApplyUserId, this.entityData.ApplyUserId);
				OnPropertyChanged("ApplyUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApproveUserId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="ApproveUserID")]
		[ValidatorComposition(CompositionType.Or, Tag="ApproveUserID")]
		[StringLengthValidator(20, MessageTemplate="Maximum length has been exceeded.", Tag="ApproveUserID")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String ApproveUserId
		{
			get
			{
				return this.entityData.ApproveUserId; 
			}
			
			set
			{
				if (this.entityData.ApproveUserId == value)
					return;
					
				OnColumnChanging(DegreeApplyColumn.ApproveUserId, this.entityData.ApproveUserId);
				this.entityData.ApproveUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DegreeApplyColumn.ApproveUserId, this.entityData.ApproveUserId);
				OnPropertyChanged("ApproveUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApplyDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsApplyDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ApplyDate
		{
			get
			{
				return this.entityData.ApplyDate; 
			}
			
			set
			{
				if (this.entityData.ApplyDate == value)
					return;
					
				OnColumnChanging(DegreeApplyColumn.ApplyDate, this.entityData.ApplyDate);
				this.entityData.ApplyDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DegreeApplyColumn.ApplyDate, this.entityData.ApplyDate);
				OnPropertyChanged("ApplyDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApproveDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsApproveDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ApproveDate
		{
			get
			{
				return this.entityData.ApproveDate; 
			}
			
			set
			{
				if (this.entityData.ApproveDate == value)
					return;
					
				OnColumnChanging(DegreeApplyColumn.ApproveDate, this.entityData.ApproveDate);
				this.entityData.ApproveDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DegreeApplyColumn.ApproveDate, this.entityData.ApproveDate);
				OnPropertyChanged("ApproveDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StudentId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsStudentIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? StudentId
		{
			get
			{
				return this.entityData.StudentId; 
			}
			
			set
			{
				if (this.entityData.StudentId == value)
					return;
					
				OnColumnChanging(DegreeApplyColumn.StudentId, this.entityData.StudentId);
				this.entityData.StudentId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DegreeApplyColumn.StudentId, this.entityData.StudentId);
				OnPropertyChanged("StudentId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Description property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="Description")]
		[ValidatorComposition(CompositionType.Or, Tag="Description")]
		[StringLengthValidator(500, MessageTemplate="Maximum length has been exceeded.", Tag="Description")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String Description
		{
			get
			{
				return this.entityData.Description; 
			}
			
			set
			{
				if (this.entityData.Description == value)
					return;
					
				OnColumnChanging(DegreeApplyColumn.Description, this.entityData.Description);
				this.entityData.Description = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DegreeApplyColumn.Description, this.entityData.Description);
				OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsStatusNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
					
				OnColumnChanging(DegreeApplyColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DegreeApplyColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "DegreeApply"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"DegreeApplyID", "InstituteID", "DegreeId", "ApplyUserID", "ApproveUserID", "ApplyDate", "ApproveDate", "StudentID", "Description", "status"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as DegreeApplyEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (DegreeApply) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<DegreeApply>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as DegreeApply);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed DegreeApply Entity 
		///</summary>
		protected virtual DegreeApply Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			DegreeApply copy = new DegreeApply();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.DegreeApplyId = this.DegreeApplyId;
				copy.InstituteId = this.InstituteId;
				copy.DegreeId = this.DegreeId;
				copy.ApplyUserId = this.ApplyUserId;
				copy.ApproveUserId = this.ApproveUserId;
				copy.ApplyDate = this.ApplyDate;
				copy.ApproveDate = this.ApproveDate;
				copy.StudentId = this.StudentId;
				copy.Description = this.Description;
				copy.Status = this.Status;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed DegreeApply Entity 
		///</summary>
		public virtual DegreeApply Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed DegreeApply Entity which is a deep copy of the current entity.
		///</summary>
		public virtual DegreeApply DeepCopy()
		{
			return EntityHelper.Clone<DegreeApply>(this as DegreeApply);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as DegreeApplyEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new DegreeApplyEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as DegreeApplyEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(DegreeApplyColumn column)
		{
			switch(column)
			{
					case DegreeApplyColumn.DegreeApplyId:
					return entityData.DegreeApplyId != _originalData.DegreeApplyId;
					case DegreeApplyColumn.InstituteId:
					return entityData.InstituteId != _originalData.InstituteId;
					case DegreeApplyColumn.DegreeId:
					return entityData.DegreeId != _originalData.DegreeId;
					case DegreeApplyColumn.ApplyUserId:
					return entityData.ApplyUserId != _originalData.ApplyUserId;
					case DegreeApplyColumn.ApproveUserId:
					return entityData.ApproveUserId != _originalData.ApproveUserId;
					case DegreeApplyColumn.ApplyDate:
					return entityData.ApplyDate != _originalData.ApplyDate;
					case DegreeApplyColumn.ApproveDate:
					return entityData.ApproveDate != _originalData.ApproveDate;
					case DegreeApplyColumn.StudentId:
					return entityData.StudentId != _originalData.StudentId;
					case DegreeApplyColumn.Description:
					return entityData.Description != _originalData.Description;
					case DegreeApplyColumn.Status:
					return entityData.Status != _originalData.Status;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< DegreeApplyColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.DegreeApplyId != _originalData.DegreeApplyId;
			result = result || entityData.InstituteId != _originalData.InstituteId;
			result = result || entityData.DegreeId != _originalData.DegreeId;
			result = result || entityData.ApplyUserId != _originalData.ApplyUserId;
			result = result || entityData.ApproveUserId != _originalData.ApproveUserId;
			result = result || entityData.ApplyDate != _originalData.ApplyDate;
			result = result || entityData.ApproveDate != _originalData.ApproveDate;
			result = result || entityData.StudentId != _originalData.StudentId;
			result = result || entityData.Description != _originalData.Description;
			result = result || entityData.Status != _originalData.Status;
			return result;
		}	
		
		///<summary>
		///  Returns a DegreeApply Entity with the original data.
		///</summary>
		public DegreeApply GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateDegreeApply(
				_originalData.InstituteId,
				_originalData.DegreeId,
				_originalData.ApplyUserId,
				_originalData.ApproveUserId,
				_originalData.ApplyDate,
				_originalData.ApproveDate,
				_originalData.StudentId,
				_originalData.Description,
				_originalData.Status
				);
				
			return (DegreeApply)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="DegreeApplyBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is DegreeApplyBase)
				return ValueEquals(this, (DegreeApplyBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="DegreeApplyBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.DegreeApplyId.GetHashCode() ^ 
					((this.InstituteId == null) ? string.Empty : this.InstituteId.ToString()).GetHashCode() ^ 
					((this.DegreeId == null) ? string.Empty : this.DegreeId.ToString()).GetHashCode() ^ 
					((this.ApplyUserId == null) ? string.Empty : this.ApplyUserId.ToString()).GetHashCode() ^ 
					((this.ApproveUserId == null) ? string.Empty : this.ApproveUserId.ToString()).GetHashCode() ^ 
					((this.ApplyDate == null) ? string.Empty : this.ApplyDate.ToString()).GetHashCode() ^ 
					((this.ApproveDate == null) ? string.Empty : this.ApproveDate.ToString()).GetHashCode() ^ 
					((this.StudentId == null) ? string.Empty : this.StudentId.ToString()).GetHashCode() ^ 
					((this.Description == null) ? string.Empty : this.Description.ToString()).GetHashCode() ^ 
					((this.Status == null) ? string.Empty : this.Status.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="DegreeApplyBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(DegreeApplyBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="DegreeApplyBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="DegreeApplyBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="DegreeApplyBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(DegreeApplyBase Object1, DegreeApplyBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.DegreeApplyId != Object2.DegreeApplyId)
				equal = false;
			if ( Object1.InstituteId != null && Object2.InstituteId != null )
			{
				if (Object1.InstituteId != Object2.InstituteId)
					equal = false;
			}
			else if (Object1.InstituteId == null ^ Object2.InstituteId == null )
			{
				equal = false;
			}
			if ( Object1.DegreeId != null && Object2.DegreeId != null )
			{
				if (Object1.DegreeId != Object2.DegreeId)
					equal = false;
			}
			else if (Object1.DegreeId == null ^ Object2.DegreeId == null )
			{
				equal = false;
			}
			if ( Object1.ApplyUserId != null && Object2.ApplyUserId != null )
			{
				if (Object1.ApplyUserId != Object2.ApplyUserId)
					equal = false;
			}
			else if (Object1.ApplyUserId == null ^ Object2.ApplyUserId == null )
			{
				equal = false;
			}
			if ( Object1.ApproveUserId != null && Object2.ApproveUserId != null )
			{
				if (Object1.ApproveUserId != Object2.ApproveUserId)
					equal = false;
			}
			else if (Object1.ApproveUserId == null ^ Object2.ApproveUserId == null )
			{
				equal = false;
			}
			if ( Object1.ApplyDate != null && Object2.ApplyDate != null )
			{
				if (Object1.ApplyDate != Object2.ApplyDate)
					equal = false;
			}
			else if (Object1.ApplyDate == null ^ Object2.ApplyDate == null )
			{
				equal = false;
			}
			if ( Object1.ApproveDate != null && Object2.ApproveDate != null )
			{
				if (Object1.ApproveDate != Object2.ApproveDate)
					equal = false;
			}
			else if (Object1.ApproveDate == null ^ Object2.ApproveDate == null )
			{
				equal = false;
			}
			if ( Object1.StudentId != null && Object2.StudentId != null )
			{
				if (Object1.StudentId != Object2.StudentId)
					equal = false;
			}
			else if (Object1.StudentId == null ^ Object2.StudentId == null )
			{
				equal = false;
			}
			if ( Object1.Description != null && Object2.Description != null )
			{
				if (Object1.Description != Object2.Description)
					equal = false;
			}
			else if (Object1.Description == null ^ Object2.Description == null )
			{
				equal = false;
			}
			if ( Object1.Status != null && Object2.Status != null )
			{
				if (Object1.Status != Object2.Status)
					equal = false;
			}
			else if (Object1.Status == null ^ Object2.Status == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((DegreeApplyBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static DegreeApplyComparer GetComparer()
        {
            return new DegreeApplyComparer();
        }
        */

        // Comparer delegates back to DegreeApply
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(DegreeApply rhs, DegreeApplyColumn which)
        {
            switch (which)
            {
            	
            	
            	case DegreeApplyColumn.DegreeApplyId:
            		return this.DegreeApplyId.CompareTo(rhs.DegreeApplyId);
            		
            		                 
            	
            	
            	case DegreeApplyColumn.InstituteId:
            		return this.InstituteId.CompareTo(rhs.InstituteId);
            		
            		                 
            	
            	
            	case DegreeApplyColumn.DegreeId:
            		return this.DegreeId.Value.CompareTo(rhs.DegreeId.Value);
            		
            		                 
            	
            	
            	case DegreeApplyColumn.ApplyUserId:
            		return this.ApplyUserId.CompareTo(rhs.ApplyUserId);
            		
            		                 
            	
            	
            	case DegreeApplyColumn.ApproveUserId:
            		return this.ApproveUserId.CompareTo(rhs.ApproveUserId);
            		
            		                 
            	
            	
            	case DegreeApplyColumn.ApplyDate:
            		return this.ApplyDate.Value.CompareTo(rhs.ApplyDate.Value);
            		
            		                 
            	
            	
            	case DegreeApplyColumn.ApproveDate:
            		return this.ApproveDate.Value.CompareTo(rhs.ApproveDate.Value);
            		
            		                 
            	
            	
            	case DegreeApplyColumn.StudentId:
            		return this.StudentId.Value.CompareTo(rhs.StudentId.Value);
            		
            		                 
            	
            	
            	case DegreeApplyColumn.Description:
            		return this.Description.CompareTo(rhs.Description);
            		
            		                 
            	
            	
            	case DegreeApplyColumn.Status:
            		return this.Status.Value.CompareTo(rhs.Status.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<DegreeApplyKey> Members
		
		// member variable for the EntityId property
		private DegreeApplyKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual DegreeApplyKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new DegreeApplyKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("DegreeApply")
					.Append("|").Append( this.DegreeApplyId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{11}{10}- DegreeApplyId: {0}{10}- InstituteId: {1}{10}- DegreeId: {2}{10}- ApplyUserId: {3}{10}- ApproveUserId: {4}{10}- ApplyDate: {5}{10}- ApproveDate: {6}{10}- StudentId: {7}{10}- Description: {8}{10}- Status: {9}{10}{12}", 
				this.DegreeApplyId,
				(this.InstituteId == null) ? string.Empty : this.InstituteId.ToString(),
				(this.DegreeId == null) ? string.Empty : this.DegreeId.ToString(),
				(this.ApplyUserId == null) ? string.Empty : this.ApplyUserId.ToString(),
				(this.ApproveUserId == null) ? string.Empty : this.ApproveUserId.ToString(),
				(this.ApplyDate == null) ? string.Empty : this.ApplyDate.ToString(),
				(this.ApproveDate == null) ? string.Empty : this.ApproveDate.ToString(),
				(this.StudentId == null) ? string.Empty : this.StudentId.ToString(),
				(this.Description == null) ? string.Empty : this.Description.ToString(),
				(this.Status == null) ? string.Empty : this.Status.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'DegreeApply' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class DegreeApplyEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// DegreeApplyID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "DegreeApply"</remarks>
		public System.Int32 DegreeApplyId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// InstituteID : 
		/// </summary>
		public System.String		  InstituteId = null;
		
		/// <summary>
		/// DegreeId : 
		/// </summary>
		public System.Int32?		  DegreeId = null;
		
		/// <summary>
		/// ApplyUserID : 
		/// </summary>
		public System.String		  ApplyUserId = null;
		
		/// <summary>
		/// ApproveUserID : 
		/// </summary>
		public System.String		  ApproveUserId = null;
		
		/// <summary>
		/// ApplyDate : 
		/// </summary>
		public System.DateTime?		  ApplyDate = null;
		
		/// <summary>
		/// ApproveDate : 
		/// </summary>
		public System.DateTime?		  ApproveDate = null;
		
		/// <summary>
		/// StudentID : 
		/// </summary>
		public System.Int32?		  StudentId = null;
		
		/// <summary>
		/// Description : 
		/// </summary>
		public System.String		  Description = null;
		
		/// <summary>
		/// status : 
		/// </summary>
		public System.Int32?		  Status = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			DegreeApplyEntityData _tmp = new DegreeApplyEntityData();
						
			_tmp.DegreeApplyId = this.DegreeApplyId;
			
			_tmp.InstituteId = this.InstituteId;
			_tmp.DegreeId = this.DegreeId;
			_tmp.ApplyUserId = this.ApplyUserId;
			_tmp.ApproveUserId = this.ApproveUserId;
			_tmp.ApplyDate = this.ApplyDate;
			_tmp.ApproveDate = this.ApproveDate;
			_tmp.StudentId = this.StudentId;
			_tmp.Description = this.Description;
			_tmp.Status = this.Status;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			DegreeApplyEntityData _tmp = new DegreeApplyEntityData();
						
			_tmp.DegreeApplyId = this.DegreeApplyId;
			
			_tmp.InstituteId = this.InstituteId;
			_tmp.DegreeId = this.DegreeId;
			_tmp.ApplyUserId = this.ApplyUserId;
			_tmp.ApproveUserId = this.ApproveUserId;
			_tmp.ApplyDate = this.ApplyDate;
			_tmp.ApproveDate = this.ApproveDate;
			_tmp.StudentId = this.StudentId;
			_tmp.Description = this.Description;
			_tmp.Status = this.Status;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DegreeApplyColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(DegreeApplyColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DegreeApplyColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(DegreeApplyColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DegreeApplyColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(DegreeApplyColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				DegreeApplyEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new DegreeApplyEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DegreeApplyColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(DegreeApplyColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				DegreeApplyEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new DegreeApplyEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region DegreeApplyEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="DegreeApply"/> object.
	/// </remarks>
	public class DegreeApplyEventArgs : System.EventArgs
	{
		private DegreeApplyColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the DegreeApplyEventArgs class.
		///</summary>
		public DegreeApplyEventArgs(DegreeApplyColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the DegreeApplyEventArgs class.
		///</summary>
		public DegreeApplyEventArgs(DegreeApplyColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The DegreeApplyColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="DegreeApplyColumn" />
		public DegreeApplyColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all DegreeApply related events.
	///</summary>
	public delegate void DegreeApplyEventHandler(object sender, DegreeApplyEventArgs e);
	
	#region DegreeApplyComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class DegreeApplyComparer : System.Collections.Generic.IComparer<DegreeApply>
	{
		DegreeApplyColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:DegreeApplyComparer"/> class.
        /// </summary>
		public DegreeApplyComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:DegreeApplyComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public DegreeApplyComparer(DegreeApplyColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="DegreeApply"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="DegreeApply"/> to compare.</param>
        /// <param name="b">The second <c>DegreeApply</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(DegreeApply a, DegreeApply b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(DegreeApply entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(DegreeApply a, DegreeApply b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public DegreeApplyColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region DegreeApplyKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="DegreeApply"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class DegreeApplyKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the DegreeApplyKey class.
		/// </summary>
		public DegreeApplyKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the DegreeApplyKey class.
		/// </summary>
		public DegreeApplyKey(DegreeApplyBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.DegreeApplyId = entity.DegreeApplyId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the DegreeApplyKey class.
		/// </summary>
		public DegreeApplyKey(System.Int32 _degreeApplyId)
		{
			#region Init Properties

			this.DegreeApplyId = _degreeApplyId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private DegreeApplyBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public DegreeApplyBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the DegreeApplyId property
		private System.Int32 _degreeApplyId;
		
		/// <summary>
		/// Gets or sets the DegreeApplyId property.
		/// </summary>
		public System.Int32 DegreeApplyId
		{
			get { return _degreeApplyId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.DegreeApplyId = value;
				
				_degreeApplyId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				DegreeApplyId = ( values["DegreeApplyId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["DegreeApplyId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("DegreeApplyId", DegreeApplyId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("DegreeApplyId: {0}{1}",
								DegreeApplyId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region DegreeApplyColumn Enum
	
	/// <summary>
	/// Enumerate the DegreeApply columns.
	/// </summary>
	[Serializable]
	public enum DegreeApplyColumn : int
	{
		/// <summary>
		/// DegreeApplyId : 
		/// </summary>
		[EnumTextValue("DegreeApplyID")]
		[ColumnEnum("DegreeApplyID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		DegreeApplyId = 1,
		/// <summary>
		/// InstituteId : 
		/// </summary>
		[EnumTextValue("InstituteID")]
		[ColumnEnum("InstituteID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		InstituteId = 2,
		/// <summary>
		/// DegreeId : 
		/// </summary>
		[EnumTextValue("DegreeId")]
		[ColumnEnum("DegreeId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DegreeId = 3,
		/// <summary>
		/// ApplyUserId : 
		/// </summary>
		[EnumTextValue("ApplyUserID")]
		[ColumnEnum("ApplyUserID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		ApplyUserId = 4,
		/// <summary>
		/// ApproveUserId : 
		/// </summary>
		[EnumTextValue("ApproveUserID")]
		[ColumnEnum("ApproveUserID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		ApproveUserId = 5,
		/// <summary>
		/// ApplyDate : 
		/// </summary>
		[EnumTextValue("ApplyDate")]
		[ColumnEnum("ApplyDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ApplyDate = 6,
		/// <summary>
		/// ApproveDate : 
		/// </summary>
		[EnumTextValue("ApproveDate")]
		[ColumnEnum("ApproveDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ApproveDate = 7,
		/// <summary>
		/// StudentId : 
		/// </summary>
		[EnumTextValue("StudentID")]
		[ColumnEnum("StudentID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		StudentId = 8,
		/// <summary>
		/// Description : 
		/// </summary>
		[EnumTextValue("Description")]
		[ColumnEnum("Description", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 500)]
		Description = 9,
		/// <summary>
		/// Status : 
		/// </summary>
		[EnumTextValue("status")]
		[ColumnEnum("status", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Status = 10
	}//End enum

	#endregion DegreeApplyColumn Enum

} // end namespace
