
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file UserInfo.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using Microsoft.Practices.EnterpriseLibrary.Validation.Validators;
using Microsoft.Practices.EnterpriseLibrary.Validation;

using GE.MyLearning.BL.Validation;
#endregion

namespace GE.MyLearning.BL
{
	///<summary>
	/// An object representation of the 'UserInfo' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class UserInfoBase : EntityBase, IUserInfo, IEntityId<UserInfoKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private UserInfoEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private UserInfoEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private UserInfoEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<UserInfo> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event UserInfoEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event UserInfoEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="UserInfoBase"/> instance.
		///</summary>
		public UserInfoBase()
		{
			this.entityData = new UserInfoEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="UserInfoBase"/> instance.
		///</summary>
		///<param name="_userId"></param>
		///<param name="_userName"></param>
		///<param name="_userCnName"></param>
		///<param name="_password"></param>
		///<param name="_telephone"></param>
		///<param name="_email"></param>
		///<param name="_userStatus"></param>
		///<param name="_createTime"></param>
		///<param name="_feBadgeId"></param>
		///<param name="_mobile"></param>
		///<param name="_userType"></param>
		///<param name="_userCredit"></param>
		///<param name="_department"></param>
		///<param name="_ohrSolidLineMgrId"></param>
		///<param name="_ohrHrRep"></param>
		public UserInfoBase(System.String _userId, System.String _userName, System.String _userCnName, 
			System.String _password, System.String _telephone, System.String _email, System.Int32? _userStatus, 
			System.DateTime? _createTime, System.String _feBadgeId, System.String _mobile, System.Int32? _userType, 
			System.Int32? _userCredit, System.String _department, System.String _ohrSolidLineMgrId, System.String _ohrHrRep)
		{
			this.entityData = new UserInfoEntityData();
			this.backupData = null;

			this.UserId = _userId;
			this.UserName = _userName;
			this.UserCnName = _userCnName;
			this.Password = _password;
			this.Telephone = _telephone;
			this.Email = _email;
			this.UserStatus = _userStatus;
			this.CreateTime = _createTime;
			this.FeBadgeId = _feBadgeId;
			this.Mobile = _mobile;
			this.UserType = _userType;
			this.UserCredit = _userCredit;
			this.Department = _department;
			this.OhrSolidLineMgrId = _ohrSolidLineMgrId;
			this.OhrHrRep = _ohrHrRep;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="UserInfo"/> instance.
		///</summary>
		///<param name="_userId"></param>
		///<param name="_userName"></param>
		///<param name="_userCnName"></param>
		///<param name="_password"></param>
		///<param name="_telephone"></param>
		///<param name="_email"></param>
		///<param name="_userStatus"></param>
		///<param name="_createTime"></param>
		///<param name="_feBadgeId"></param>
		///<param name="_mobile"></param>
		///<param name="_userType"></param>
		///<param name="_userCredit"></param>
		///<param name="_department"></param>
		///<param name="_ohrSolidLineMgrId"></param>
		///<param name="_ohrHrRep"></param>
		public static UserInfo CreateUserInfo(System.String _userId, System.String _userName, System.String _userCnName, 
			System.String _password, System.String _telephone, System.String _email, System.Int32? _userStatus, 
			System.DateTime? _createTime, System.String _feBadgeId, System.String _mobile, System.Int32? _userType, 
			System.Int32? _userCredit, System.String _department, System.String _ohrSolidLineMgrId, System.String _ohrHrRep)
		{
			UserInfo newUserInfo = new UserInfo();
			newUserInfo.UserId = _userId;
			newUserInfo.UserName = _userName;
			newUserInfo.UserCnName = _userCnName;
			newUserInfo.Password = _password;
			newUserInfo.Telephone = _telephone;
			newUserInfo.Email = _email;
			newUserInfo.UserStatus = _userStatus;
			newUserInfo.CreateTime = _createTime;
			newUserInfo.FeBadgeId = _feBadgeId;
			newUserInfo.Mobile = _mobile;
			newUserInfo.UserType = _userType;
			newUserInfo.UserCredit = _userCredit;
			newUserInfo.Department = _department;
			newUserInfo.OhrSolidLineMgrId = _ohrSolidLineMgrId;
			newUserInfo.OhrHrRep = _ohrHrRep;
			return newUserInfo;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the UserId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[NotNullValidator(MessageTemplate="Property does not allow null values.", Tag="UserID")]
		[ValidatorComposition(CompositionType.And, Tag="UserID")]

		[StringLengthValidator(20, MessageTemplate="Maximum length has been exceeded.", Tag="UserID")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 20)]
		public virtual System.String UserId
		{
			get
			{
				return this.entityData.UserId; 
			}
			
			set
			{
				if (this.entityData.UserId == value)
					return;
					
				OnColumnChanging(UserInfoColumn.UserId, this.entityData.UserId);
				this.entityData.UserId = value;
				this.EntityId.UserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserInfoColumn.UserId, this.entityData.UserId);
				OnPropertyChanged("UserId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the UserID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the UserID property.</remarks>
		/// <value>This type is varchar</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalUserId
		{
			get { return this.entityData.OriginalUserId; }
			set { this.entityData.OriginalUserId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the UserName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="UserName")]
		[ValidatorComposition(CompositionType.Or, Tag="UserName")]
		[StringLengthValidator(20, MessageTemplate="Maximum length has been exceeded.", Tag="UserName")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String UserName
		{
			get
			{
				return this.entityData.UserName; 
			}
			
			set
			{
				if (this.entityData.UserName == value)
					return;
					
				OnColumnChanging(UserInfoColumn.UserName, this.entityData.UserName);
				this.entityData.UserName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserInfoColumn.UserName, this.entityData.UserName);
				OnPropertyChanged("UserName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserCnName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[NotNullValidator(MessageTemplate="Property does not allow null values.", Tag="UserCNName")]
		[ValidatorComposition(CompositionType.And, Tag="UserCNName")]

		[StringLengthValidator(20, MessageTemplate="Maximum length has been exceeded.", Tag="UserCNName")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual System.String UserCnName
		{
			get
			{
				return this.entityData.UserCnName; 
			}
			
			set
			{
				if (this.entityData.UserCnName == value)
					return;
					
				OnColumnChanging(UserInfoColumn.UserCnName, this.entityData.UserCnName);
				this.entityData.UserCnName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserInfoColumn.UserCnName, this.entityData.UserCnName);
				OnPropertyChanged("UserCnName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Password property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="Password")]
		[ValidatorComposition(CompositionType.Or, Tag="Password")]
		[StringLengthValidator(50, MessageTemplate="Maximum length has been exceeded.", Tag="Password")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Password
		{
			get
			{
				return this.entityData.Password; 
			}
			
			set
			{
				if (this.entityData.Password == value)
					return;
					
				OnColumnChanging(UserInfoColumn.Password, this.entityData.Password);
				this.entityData.Password = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserInfoColumn.Password, this.entityData.Password);
				OnPropertyChanged("Password");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Telephone property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="Telephone")]
		[ValidatorComposition(CompositionType.Or, Tag="Telephone")]
		[StringLengthValidator(50, MessageTemplate="Maximum length has been exceeded.", Tag="Telephone")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Telephone
		{
			get
			{
				return this.entityData.Telephone; 
			}
			
			set
			{
				if (this.entityData.Telephone == value)
					return;
					
				OnColumnChanging(UserInfoColumn.Telephone, this.entityData.Telephone);
				this.entityData.Telephone = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserInfoColumn.Telephone, this.entityData.Telephone);
				OnPropertyChanged("Telephone");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Email property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[NotNullValidator(MessageTemplate="Property does not allow null values.", Tag="Email")]
		[ValidatorComposition(CompositionType.And, Tag="Email")]

		[StringLengthValidator(50, MessageTemplate="Maximum length has been exceeded.", Tag="Email")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String Email
		{
			get
			{
				return this.entityData.Email; 
			}
			
			set
			{
				if (this.entityData.Email == value)
					return;
					
				OnColumnChanging(UserInfoColumn.Email, this.entityData.Email);
				this.entityData.Email = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserInfoColumn.Email, this.entityData.Email);
				OnPropertyChanged("Email");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserStatus property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsUserStatusNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? UserStatus
		{
			get
			{
				return this.entityData.UserStatus; 
			}
			
			set
			{
				if (this.entityData.UserStatus == value)
					return;
					
				OnColumnChanging(UserInfoColumn.UserStatus, this.entityData.UserStatus);
				this.entityData.UserStatus = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserInfoColumn.UserStatus, this.entityData.UserStatus);
				OnPropertyChanged("UserStatus");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCreateTimeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreateTime
		{
			get
			{
				return this.entityData.CreateTime; 
			}
			
			set
			{
				if (this.entityData.CreateTime == value)
					return;
					
				OnColumnChanging(UserInfoColumn.CreateTime, this.entityData.CreateTime);
				this.entityData.CreateTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserInfoColumn.CreateTime, this.entityData.CreateTime);
				OnPropertyChanged("CreateTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeBadgeId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[NotNullValidator(MessageTemplate="Property does not allow null values.", Tag="FEBadgeID")]
		[ValidatorComposition(CompositionType.And, Tag="FEBadgeID")]

		[StringLengthValidator(20, MessageTemplate="Maximum length has been exceeded.", Tag="FEBadgeID")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual System.String FeBadgeId
		{
			get
			{
				return this.entityData.FeBadgeId; 
			}
			
			set
			{
				if (this.entityData.FeBadgeId == value)
					return;
					
				OnColumnChanging(UserInfoColumn.FeBadgeId, this.entityData.FeBadgeId);
				this.entityData.FeBadgeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserInfoColumn.FeBadgeId, this.entityData.FeBadgeId);
				OnPropertyChanged("FeBadgeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Mobile property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="Mobile")]
		[ValidatorComposition(CompositionType.Or, Tag="Mobile")]
		[StringLengthValidator(50, MessageTemplate="Maximum length has been exceeded.", Tag="Mobile")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Mobile
		{
			get
			{
				return this.entityData.Mobile; 
			}
			
			set
			{
				if (this.entityData.Mobile == value)
					return;
					
				OnColumnChanging(UserInfoColumn.Mobile, this.entityData.Mobile);
				this.entityData.Mobile = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserInfoColumn.Mobile, this.entityData.Mobile);
				OnPropertyChanged("Mobile");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserType property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsUserTypeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? UserType
		{
			get
			{
				return this.entityData.UserType; 
			}
			
			set
			{
				if (this.entityData.UserType == value)
					return;
					
				OnColumnChanging(UserInfoColumn.UserType, this.entityData.UserType);
				this.entityData.UserType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserInfoColumn.UserType, this.entityData.UserType);
				OnPropertyChanged("UserType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserCredit property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsUserCreditNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? UserCredit
		{
			get
			{
				return this.entityData.UserCredit; 
			}
			
			set
			{
				if (this.entityData.UserCredit == value)
					return;
					
				OnColumnChanging(UserInfoColumn.UserCredit, this.entityData.UserCredit);
				this.entityData.UserCredit = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserInfoColumn.UserCredit, this.entityData.UserCredit);
				OnPropertyChanged("UserCredit");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Department property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="department")]
		[ValidatorComposition(CompositionType.Or, Tag="department")]
		[StringLengthValidator(150, MessageTemplate="Maximum length has been exceeded.", Tag="department")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String Department
		{
			get
			{
				return this.entityData.Department; 
			}
			
			set
			{
				if (this.entityData.Department == value)
					return;
					
				OnColumnChanging(UserInfoColumn.Department, this.entityData.Department);
				this.entityData.Department = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserInfoColumn.Department, this.entityData.Department);
				OnPropertyChanged("Department");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OhrSolidLineMgrId property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="OHR_Solid_Line_Mgr_ID")]
		[ValidatorComposition(CompositionType.Or, Tag="OHR_Solid_Line_Mgr_ID")]
		[StringLengthValidator(250, MessageTemplate="Maximum length has been exceeded.", Tag="OHR_Solid_Line_Mgr_ID")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String OhrSolidLineMgrId
		{
			get
			{
				return this.entityData.OhrSolidLineMgrId; 
			}
			
			set
			{
				if (this.entityData.OhrSolidLineMgrId == value)
					return;
					
				OnColumnChanging(UserInfoColumn.OhrSolidLineMgrId, this.entityData.OhrSolidLineMgrId);
				this.entityData.OhrSolidLineMgrId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserInfoColumn.OhrSolidLineMgrId, this.entityData.OhrSolidLineMgrId);
				OnPropertyChanged("OhrSolidLineMgrId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OhrHrRep property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="OHR_HR_Rep")]
		[ValidatorComposition(CompositionType.Or, Tag="OHR_HR_Rep")]
		[StringLengthValidator(250, MessageTemplate="Maximum length has been exceeded.", Tag="OHR_HR_Rep")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String OhrHrRep
		{
			get
			{
				return this.entityData.OhrHrRep; 
			}
			
			set
			{
				if (this.entityData.OhrHrRep == value)
					return;
					
				OnColumnChanging(UserInfoColumn.OhrHrRep, this.entityData.OhrHrRep);
				this.entityData.OhrHrRep = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserInfoColumn.OhrHrRep, this.entityData.OhrHrRep);
				OnPropertyChanged("OhrHrRep");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "UserInfo"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"UserID", "UserName", "UserCNName", "Password", "Telephone", "Email", "UserStatus", "CreateTime", "FEBadgeID", "Mobile", "UserType", "UserCredit", "department", "OHR_Solid_Line_Mgr_ID", "OHR_HR_Rep"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as UserInfoEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (UserInfo) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<UserInfo>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as UserInfo);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed UserInfo Entity 
		///</summary>
		protected virtual UserInfo Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			UserInfo copy = new UserInfo();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.UserId = this.UserId;
					copy.OriginalUserId = this.OriginalUserId;
				copy.UserName = this.UserName;
				copy.UserCnName = this.UserCnName;
				copy.Password = this.Password;
				copy.Telephone = this.Telephone;
				copy.Email = this.Email;
				copy.UserStatus = this.UserStatus;
				copy.CreateTime = this.CreateTime;
				copy.FeBadgeId = this.FeBadgeId;
				copy.Mobile = this.Mobile;
				copy.UserType = this.UserType;
				copy.UserCredit = this.UserCredit;
				copy.Department = this.Department;
				copy.OhrSolidLineMgrId = this.OhrSolidLineMgrId;
				copy.OhrHrRep = this.OhrHrRep;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed UserInfo Entity 
		///</summary>
		public virtual UserInfo Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed UserInfo Entity which is a deep copy of the current entity.
		///</summary>
		public virtual UserInfo DeepCopy()
		{
			return EntityHelper.Clone<UserInfo>(this as UserInfo);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as UserInfoEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new UserInfoEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as UserInfoEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(UserInfoColumn column)
		{
			switch(column)
			{
					case UserInfoColumn.UserId:
					return entityData.UserId != _originalData.UserId;
					case UserInfoColumn.UserName:
					return entityData.UserName != _originalData.UserName;
					case UserInfoColumn.UserCnName:
					return entityData.UserCnName != _originalData.UserCnName;
					case UserInfoColumn.Password:
					return entityData.Password != _originalData.Password;
					case UserInfoColumn.Telephone:
					return entityData.Telephone != _originalData.Telephone;
					case UserInfoColumn.Email:
					return entityData.Email != _originalData.Email;
					case UserInfoColumn.UserStatus:
					return entityData.UserStatus != _originalData.UserStatus;
					case UserInfoColumn.CreateTime:
					return entityData.CreateTime != _originalData.CreateTime;
					case UserInfoColumn.FeBadgeId:
					return entityData.FeBadgeId != _originalData.FeBadgeId;
					case UserInfoColumn.Mobile:
					return entityData.Mobile != _originalData.Mobile;
					case UserInfoColumn.UserType:
					return entityData.UserType != _originalData.UserType;
					case UserInfoColumn.UserCredit:
					return entityData.UserCredit != _originalData.UserCredit;
					case UserInfoColumn.Department:
					return entityData.Department != _originalData.Department;
					case UserInfoColumn.OhrSolidLineMgrId:
					return entityData.OhrSolidLineMgrId != _originalData.OhrSolidLineMgrId;
					case UserInfoColumn.OhrHrRep:
					return entityData.OhrHrRep != _originalData.OhrHrRep;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< UserInfoColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.UserId != _originalData.UserId;
			result = result || entityData.UserName != _originalData.UserName;
			result = result || entityData.UserCnName != _originalData.UserCnName;
			result = result || entityData.Password != _originalData.Password;
			result = result || entityData.Telephone != _originalData.Telephone;
			result = result || entityData.Email != _originalData.Email;
			result = result || entityData.UserStatus != _originalData.UserStatus;
			result = result || entityData.CreateTime != _originalData.CreateTime;
			result = result || entityData.FeBadgeId != _originalData.FeBadgeId;
			result = result || entityData.Mobile != _originalData.Mobile;
			result = result || entityData.UserType != _originalData.UserType;
			result = result || entityData.UserCredit != _originalData.UserCredit;
			result = result || entityData.Department != _originalData.Department;
			result = result || entityData.OhrSolidLineMgrId != _originalData.OhrSolidLineMgrId;
			result = result || entityData.OhrHrRep != _originalData.OhrHrRep;
			return result;
		}	
		
		///<summary>
		///  Returns a UserInfo Entity with the original data.
		///</summary>
		public UserInfo GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateUserInfo(
				_originalData.UserId,
				_originalData.UserName,
				_originalData.UserCnName,
				_originalData.Password,
				_originalData.Telephone,
				_originalData.Email,
				_originalData.UserStatus,
				_originalData.CreateTime,
				_originalData.FeBadgeId,
				_originalData.Mobile,
				_originalData.UserType,
				_originalData.UserCredit,
				_originalData.Department,
				_originalData.OhrSolidLineMgrId,
				_originalData.OhrHrRep
				);
				
			return (UserInfo)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="UserInfoBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is UserInfoBase)
				return ValueEquals(this, (UserInfoBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="UserInfoBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.UserId.GetHashCode() ^ 
					((this.UserName == null) ? string.Empty : this.UserName.ToString()).GetHashCode() ^ 
					this.UserCnName.GetHashCode() ^ 
					((this.Password == null) ? string.Empty : this.Password.ToString()).GetHashCode() ^ 
					((this.Telephone == null) ? string.Empty : this.Telephone.ToString()).GetHashCode() ^ 
					this.Email.GetHashCode() ^ 
					((this.UserStatus == null) ? string.Empty : this.UserStatus.ToString()).GetHashCode() ^ 
					((this.CreateTime == null) ? string.Empty : this.CreateTime.ToString()).GetHashCode() ^ 
					this.FeBadgeId.GetHashCode() ^ 
					((this.Mobile == null) ? string.Empty : this.Mobile.ToString()).GetHashCode() ^ 
					((this.UserType == null) ? string.Empty : this.UserType.ToString()).GetHashCode() ^ 
					((this.UserCredit == null) ? string.Empty : this.UserCredit.ToString()).GetHashCode() ^ 
					((this.Department == null) ? string.Empty : this.Department.ToString()).GetHashCode() ^ 
					((this.OhrSolidLineMgrId == null) ? string.Empty : this.OhrSolidLineMgrId.ToString()).GetHashCode() ^ 
					((this.OhrHrRep == null) ? string.Empty : this.OhrHrRep.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="UserInfoBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(UserInfoBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="UserInfoBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="UserInfoBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="UserInfoBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(UserInfoBase Object1, UserInfoBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.UserId != Object2.UserId)
				equal = false;
			if ( Object1.UserName != null && Object2.UserName != null )
			{
				if (Object1.UserName != Object2.UserName)
					equal = false;
			}
			else if (Object1.UserName == null ^ Object2.UserName == null )
			{
				equal = false;
			}
			if (Object1.UserCnName != Object2.UserCnName)
				equal = false;
			if ( Object1.Password != null && Object2.Password != null )
			{
				if (Object1.Password != Object2.Password)
					equal = false;
			}
			else if (Object1.Password == null ^ Object2.Password == null )
			{
				equal = false;
			}
			if ( Object1.Telephone != null && Object2.Telephone != null )
			{
				if (Object1.Telephone != Object2.Telephone)
					equal = false;
			}
			else if (Object1.Telephone == null ^ Object2.Telephone == null )
			{
				equal = false;
			}
			if (Object1.Email != Object2.Email)
				equal = false;
			if ( Object1.UserStatus != null && Object2.UserStatus != null )
			{
				if (Object1.UserStatus != Object2.UserStatus)
					equal = false;
			}
			else if (Object1.UserStatus == null ^ Object2.UserStatus == null )
			{
				equal = false;
			}
			if ( Object1.CreateTime != null && Object2.CreateTime != null )
			{
				if (Object1.CreateTime != Object2.CreateTime)
					equal = false;
			}
			else if (Object1.CreateTime == null ^ Object2.CreateTime == null )
			{
				equal = false;
			}
			if (Object1.FeBadgeId != Object2.FeBadgeId)
				equal = false;
			if ( Object1.Mobile != null && Object2.Mobile != null )
			{
				if (Object1.Mobile != Object2.Mobile)
					equal = false;
			}
			else if (Object1.Mobile == null ^ Object2.Mobile == null )
			{
				equal = false;
			}
			if ( Object1.UserType != null && Object2.UserType != null )
			{
				if (Object1.UserType != Object2.UserType)
					equal = false;
			}
			else if (Object1.UserType == null ^ Object2.UserType == null )
			{
				equal = false;
			}
			if ( Object1.UserCredit != null && Object2.UserCredit != null )
			{
				if (Object1.UserCredit != Object2.UserCredit)
					equal = false;
			}
			else if (Object1.UserCredit == null ^ Object2.UserCredit == null )
			{
				equal = false;
			}
			if ( Object1.Department != null && Object2.Department != null )
			{
				if (Object1.Department != Object2.Department)
					equal = false;
			}
			else if (Object1.Department == null ^ Object2.Department == null )
			{
				equal = false;
			}
			if ( Object1.OhrSolidLineMgrId != null && Object2.OhrSolidLineMgrId != null )
			{
				if (Object1.OhrSolidLineMgrId != Object2.OhrSolidLineMgrId)
					equal = false;
			}
			else if (Object1.OhrSolidLineMgrId == null ^ Object2.OhrSolidLineMgrId == null )
			{
				equal = false;
			}
			if ( Object1.OhrHrRep != null && Object2.OhrHrRep != null )
			{
				if (Object1.OhrHrRep != Object2.OhrHrRep)
					equal = false;
			}
			else if (Object1.OhrHrRep == null ^ Object2.OhrHrRep == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((UserInfoBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static UserInfoComparer GetComparer()
        {
            return new UserInfoComparer();
        }
        */

        // Comparer delegates back to UserInfo
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(UserInfo rhs, UserInfoColumn which)
        {
            switch (which)
            {
            	
            	
            	case UserInfoColumn.UserId:
            		return this.UserId.CompareTo(rhs.UserId);
            		
            		                 
            	
            	
            	case UserInfoColumn.UserName:
            		return this.UserName.CompareTo(rhs.UserName);
            		
            		                 
            	
            	
            	case UserInfoColumn.UserCnName:
            		return this.UserCnName.CompareTo(rhs.UserCnName);
            		
            		                 
            	
            	
            	case UserInfoColumn.Password:
            		return this.Password.CompareTo(rhs.Password);
            		
            		                 
            	
            	
            	case UserInfoColumn.Telephone:
            		return this.Telephone.CompareTo(rhs.Telephone);
            		
            		                 
            	
            	
            	case UserInfoColumn.Email:
            		return this.Email.CompareTo(rhs.Email);
            		
            		                 
            	
            	
            	case UserInfoColumn.UserStatus:
            		return this.UserStatus.Value.CompareTo(rhs.UserStatus.Value);
            		
            		                 
            	
            	
            	case UserInfoColumn.CreateTime:
            		return this.CreateTime.Value.CompareTo(rhs.CreateTime.Value);
            		
            		                 
            	
            	
            	case UserInfoColumn.FeBadgeId:
            		return this.FeBadgeId.CompareTo(rhs.FeBadgeId);
            		
            		                 
            	
            	
            	case UserInfoColumn.Mobile:
            		return this.Mobile.CompareTo(rhs.Mobile);
            		
            		                 
            	
            	
            	case UserInfoColumn.UserType:
            		return this.UserType.Value.CompareTo(rhs.UserType.Value);
            		
            		                 
            	
            	
            	case UserInfoColumn.UserCredit:
            		return this.UserCredit.Value.CompareTo(rhs.UserCredit.Value);
            		
            		                 
            	
            	
            	case UserInfoColumn.Department:
            		return this.Department.CompareTo(rhs.Department);
            		
            		                 
            	
            	
            	case UserInfoColumn.OhrSolidLineMgrId:
            		return this.OhrSolidLineMgrId.CompareTo(rhs.OhrSolidLineMgrId);
            		
            		                 
            	
            	
            	case UserInfoColumn.OhrHrRep:
            		return this.OhrHrRep.CompareTo(rhs.OhrHrRep);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<UserInfoKey> Members
		
		// member variable for the EntityId property
		private UserInfoKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual UserInfoKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new UserInfoKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("UserInfo")
					.Append("|").Append( this.UserId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{16}{15}- UserId: {0}{15}- UserName: {1}{15}- UserCnName: {2}{15}- Password: {3}{15}- Telephone: {4}{15}- Email: {5}{15}- UserStatus: {6}{15}- CreateTime: {7}{15}- FeBadgeId: {8}{15}- Mobile: {9}{15}- UserType: {10}{15}- UserCredit: {11}{15}- Department: {12}{15}- OhrSolidLineMgrId: {13}{15}- OhrHrRep: {14}{15}{17}", 
				this.UserId,
				(this.UserName == null) ? string.Empty : this.UserName.ToString(),
				this.UserCnName,
				(this.Password == null) ? string.Empty : this.Password.ToString(),
				(this.Telephone == null) ? string.Empty : this.Telephone.ToString(),
				this.Email,
				(this.UserStatus == null) ? string.Empty : this.UserStatus.ToString(),
				(this.CreateTime == null) ? string.Empty : this.CreateTime.ToString(),
				this.FeBadgeId,
				(this.Mobile == null) ? string.Empty : this.Mobile.ToString(),
				(this.UserType == null) ? string.Empty : this.UserType.ToString(),
				(this.UserCredit == null) ? string.Empty : this.UserCredit.ToString(),
				(this.Department == null) ? string.Empty : this.Department.ToString(),
				(this.OhrSolidLineMgrId == null) ? string.Empty : this.OhrSolidLineMgrId.ToString(),
				(this.OhrHrRep == null) ? string.Empty : this.OhrHrRep.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'UserInfo' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class UserInfoEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// UserID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "UserInfo"</remarks>
		public System.String UserId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.String OriginalUserId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// UserName : 
		/// </summary>
		public System.String		  UserName = null;
		
		/// <summary>
		/// UserCNName : 
		/// </summary>
		public System.String		  UserCnName = string.Empty;
		
		/// <summary>
		/// Password : 
		/// </summary>
		public System.String		  Password = null;
		
		/// <summary>
		/// Telephone : 
		/// </summary>
		public System.String		  Telephone = null;
		
		/// <summary>
		/// Email : 
		/// </summary>
		public System.String		  Email = string.Empty;
		
		/// <summary>
		/// UserStatus : 
		/// </summary>
		public System.Int32?		  UserStatus = null;
		
		/// <summary>
		/// CreateTime : 
		/// </summary>
		public System.DateTime?		  CreateTime = null;
		
		/// <summary>
		/// FEBadgeID : 
		/// </summary>
		public System.String		  FeBadgeId = string.Empty;
		
		/// <summary>
		/// Mobile : 
		/// </summary>
		public System.String		  Mobile = null;
		
		/// <summary>
		/// UserType : 
		/// </summary>
		public System.Int32?		  UserType = null;
		
		/// <summary>
		/// UserCredit : 
		/// </summary>
		public System.Int32?		  UserCredit = null;
		
		/// <summary>
		/// department : 
		/// </summary>
		public System.String		  Department = null;
		
		/// <summary>
		/// OHR_Solid_Line_Mgr_ID : 
		/// </summary>
		public System.String		  OhrSolidLineMgrId = null;
		
		/// <summary>
		/// OHR_HR_Rep : 
		/// </summary>
		public System.String		  OhrHrRep = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			UserInfoEntityData _tmp = new UserInfoEntityData();
						
			_tmp.UserId = this.UserId;
			_tmp.OriginalUserId = this.OriginalUserId;
			
			_tmp.UserName = this.UserName;
			_tmp.UserCnName = this.UserCnName;
			_tmp.Password = this.Password;
			_tmp.Telephone = this.Telephone;
			_tmp.Email = this.Email;
			_tmp.UserStatus = this.UserStatus;
			_tmp.CreateTime = this.CreateTime;
			_tmp.FeBadgeId = this.FeBadgeId;
			_tmp.Mobile = this.Mobile;
			_tmp.UserType = this.UserType;
			_tmp.UserCredit = this.UserCredit;
			_tmp.Department = this.Department;
			_tmp.OhrSolidLineMgrId = this.OhrSolidLineMgrId;
			_tmp.OhrHrRep = this.OhrHrRep;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			UserInfoEntityData _tmp = new UserInfoEntityData();
						
			_tmp.UserId = this.UserId;
			_tmp.OriginalUserId = this.OriginalUserId;
			
			_tmp.UserName = this.UserName;
			_tmp.UserCnName = this.UserCnName;
			_tmp.Password = this.Password;
			_tmp.Telephone = this.Telephone;
			_tmp.Email = this.Email;
			_tmp.UserStatus = this.UserStatus;
			_tmp.CreateTime = this.CreateTime;
			_tmp.FeBadgeId = this.FeBadgeId;
			_tmp.Mobile = this.Mobile;
			_tmp.UserType = this.UserType;
			_tmp.UserCredit = this.UserCredit;
			_tmp.Department = this.Department;
			_tmp.OhrSolidLineMgrId = this.OhrSolidLineMgrId;
			_tmp.OhrHrRep = this.OhrHrRep;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="UserInfoColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(UserInfoColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="UserInfoColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(UserInfoColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="UserInfoColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(UserInfoColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				UserInfoEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new UserInfoEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="UserInfoColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(UserInfoColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				UserInfoEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new UserInfoEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region UserInfoEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="UserInfo"/> object.
	/// </remarks>
	public class UserInfoEventArgs : System.EventArgs
	{
		private UserInfoColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the UserInfoEventArgs class.
		///</summary>
		public UserInfoEventArgs(UserInfoColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the UserInfoEventArgs class.
		///</summary>
		public UserInfoEventArgs(UserInfoColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The UserInfoColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="UserInfoColumn" />
		public UserInfoColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all UserInfo related events.
	///</summary>
	public delegate void UserInfoEventHandler(object sender, UserInfoEventArgs e);
	
	#region UserInfoComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class UserInfoComparer : System.Collections.Generic.IComparer<UserInfo>
	{
		UserInfoColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:UserInfoComparer"/> class.
        /// </summary>
		public UserInfoComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:UserInfoComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public UserInfoComparer(UserInfoColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="UserInfo"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="UserInfo"/> to compare.</param>
        /// <param name="b">The second <c>UserInfo</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(UserInfo a, UserInfo b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(UserInfo entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(UserInfo a, UserInfo b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public UserInfoColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region UserInfoKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="UserInfo"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class UserInfoKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the UserInfoKey class.
		/// </summary>
		public UserInfoKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the UserInfoKey class.
		/// </summary>
		public UserInfoKey(UserInfoBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.UserId = entity.UserId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the UserInfoKey class.
		/// </summary>
		public UserInfoKey(System.String _userId)
		{
			#region Init Properties

			this.UserId = _userId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private UserInfoBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public UserInfoBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the UserId property
		private System.String _userId;
		
		/// <summary>
		/// Gets or sets the UserId property.
		/// </summary>
		public System.String UserId
		{
			get { return _userId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.UserId = value;
				
				_userId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				UserId = ( values["UserId"] != null ) ? (System.String) EntityUtil.ChangeType(values["UserId"], typeof(System.String)) : string.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("UserId", UserId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("UserId: {0}{1}",
								UserId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region UserInfoColumn Enum
	
	/// <summary>
	/// Enumerate the UserInfo columns.
	/// </summary>
	[Serializable]
	public enum UserInfoColumn : int
	{
		/// <summary>
		/// UserId : 
		/// </summary>
		[EnumTextValue("UserID")]
		[ColumnEnum("UserID", typeof(System.String), System.Data.DbType.AnsiString, true, false, false, 20)]
		UserId = 1,
		/// <summary>
		/// UserName : 
		/// </summary>
		[EnumTextValue("UserName")]
		[ColumnEnum("UserName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		UserName = 2,
		/// <summary>
		/// UserCnName : 
		/// </summary>
		[EnumTextValue("UserCNName")]
		[ColumnEnum("UserCNName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		UserCnName = 3,
		/// <summary>
		/// Password : 
		/// </summary>
		[EnumTextValue("Password")]
		[ColumnEnum("Password", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Password = 4,
		/// <summary>
		/// Telephone : 
		/// </summary>
		[EnumTextValue("Telephone")]
		[ColumnEnum("Telephone", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Telephone = 5,
		/// <summary>
		/// Email : 
		/// </summary>
		[EnumTextValue("Email")]
		[ColumnEnum("Email", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 50)]
		Email = 6,
		/// <summary>
		/// UserStatus : 
		/// </summary>
		[EnumTextValue("UserStatus")]
		[ColumnEnum("UserStatus", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		UserStatus = 7,
		/// <summary>
		/// CreateTime : 
		/// </summary>
		[EnumTextValue("CreateTime")]
		[ColumnEnum("CreateTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreateTime = 8,
		/// <summary>
		/// FeBadgeId : 
		/// </summary>
		[EnumTextValue("FEBadgeID")]
		[ColumnEnum("FEBadgeID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		FeBadgeId = 9,
		/// <summary>
		/// Mobile : 
		/// </summary>
		[EnumTextValue("Mobile")]
		[ColumnEnum("Mobile", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Mobile = 10,
		/// <summary>
		/// UserType : 
		/// </summary>
		[EnumTextValue("UserType")]
		[ColumnEnum("UserType", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		UserType = 11,
		/// <summary>
		/// UserCredit : 
		/// </summary>
		[EnumTextValue("UserCredit")]
		[ColumnEnum("UserCredit", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		UserCredit = 12,
		/// <summary>
		/// Department : 
		/// </summary>
		[EnumTextValue("department")]
		[ColumnEnum("department", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 150)]
		Department = 13,
		/// <summary>
		/// OhrSolidLineMgrId : 
		/// </summary>
		[EnumTextValue("OHR_Solid_Line_Mgr_ID")]
		[ColumnEnum("OHR_Solid_Line_Mgr_ID", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		OhrSolidLineMgrId = 14,
		/// <summary>
		/// OhrHrRep : 
		/// </summary>
		[EnumTextValue("OHR_HR_Rep")]
		[ColumnEnum("OHR_HR_Rep", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		OhrHrRep = 15
	}//End enum

	#endregion UserInfoColumn Enum

} // end namespace
