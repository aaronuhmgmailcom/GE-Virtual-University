
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file VuCatogary.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using Microsoft.Practices.EnterpriseLibrary.Validation.Validators;
using Microsoft.Practices.EnterpriseLibrary.Validation;

using GE.MyLearning.BL.Validation;
#endregion

namespace GE.MyLearning.BL
{
	///<summary>
	/// An object representation of the 'VU_catogary' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class VuCatogaryBase : EntityBase, IVuCatogary, IEntityId<VuCatogaryKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private VuCatogaryEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private VuCatogaryEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private VuCatogaryEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<VuCatogary> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event VuCatogaryEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event VuCatogaryEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="VuCatogaryBase"/> instance.
		///</summary>
		public VuCatogaryBase()
		{
			this.entityData = new VuCatogaryEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="VuCatogaryBase"/> instance.
		///</summary>
		///<param name="_classid"></param>
		///<param name="_fuid"></param>
		///<param name="_name"></param>
		///<param name="_pic"></param>
		///<param name="_closed"></param>
		///<param name="_owner"></param>
		///<param name="_score"></param>
		///<param name="_replyRights"></param>
		///<param name="_isask"></param>
		public VuCatogaryBase(System.String _classid, System.Int32? _fuid, System.String _name, 
			System.String _pic, System.Int32? _closed, System.String _owner, System.Decimal? _score, 
			System.Int32? _replyRights, System.Int32? _isask)
		{
			this.entityData = new VuCatogaryEntityData();
			this.backupData = null;

			this.Classid = _classid;
			this.Fuid = _fuid;
			this.Name = _name;
			this.Pic = _pic;
			this.Closed = _closed;
			this.Owner = _owner;
			this.Score = _score;
			this.ReplyRights = _replyRights;
			this.Isask = _isask;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="VuCatogary"/> instance.
		///</summary>
		///<param name="_classid"></param>
		///<param name="_fuid"></param>
		///<param name="_name"></param>
		///<param name="_pic"></param>
		///<param name="_closed"></param>
		///<param name="_owner"></param>
		///<param name="_score"></param>
		///<param name="_replyRights"></param>
		///<param name="_isask"></param>
		public static VuCatogary CreateVuCatogary(System.String _classid, System.Int32? _fuid, System.String _name, 
			System.String _pic, System.Int32? _closed, System.String _owner, System.Decimal? _score, 
			System.Int32? _replyRights, System.Int32? _isask)
		{
			VuCatogary newVuCatogary = new VuCatogary();
			newVuCatogary.Classid = _classid;
			newVuCatogary.Fuid = _fuid;
			newVuCatogary.Name = _name;
			newVuCatogary.Pic = _pic;
			newVuCatogary.Closed = _closed;
			newVuCatogary.Owner = _owner;
			newVuCatogary.Score = _score;
			newVuCatogary.ReplyRights = _replyRights;
			newVuCatogary.Isask = _isask;
			return newVuCatogary;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(VuCatogaryColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuCatogaryColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Classid property. 
		///		
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="classid")]
		[ValidatorComposition(CompositionType.Or, Tag="classid")]
		[StringLengthValidator(10, MessageTemplate="Maximum length has been exceeded.", Tag="classid")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String Classid
		{
			get
			{
				return this.entityData.Classid; 
			}
			
			set
			{
				if (this.entityData.Classid == value)
					return;
					
				OnColumnChanging(VuCatogaryColumn.Classid, this.entityData.Classid);
				this.entityData.Classid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuCatogaryColumn.Classid, this.entityData.Classid);
				OnPropertyChanged("Classid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Fuid property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsFuidNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Fuid
		{
			get
			{
				return this.entityData.Fuid; 
			}
			
			set
			{
				if (this.entityData.Fuid == value)
					return;
					
				OnColumnChanging(VuCatogaryColumn.Fuid, this.entityData.Fuid);
				this.entityData.Fuid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuCatogaryColumn.Fuid, this.entityData.Fuid);
				OnPropertyChanged("Fuid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="name")]
		[ValidatorComposition(CompositionType.Or, Tag="name")]
		[StringLengthValidator(50, MessageTemplate="Maximum length has been exceeded.", Tag="name")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Name
		{
			get
			{
				return this.entityData.Name; 
			}
			
			set
			{
				if (this.entityData.Name == value)
					return;
					
				OnColumnChanging(VuCatogaryColumn.Name, this.entityData.Name);
				this.entityData.Name = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuCatogaryColumn.Name, this.entityData.Name);
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Pic property. 
		///		
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="pic")]
		[ValidatorComposition(CompositionType.Or, Tag="pic")]
		[StringLengthValidator(100, MessageTemplate="Maximum length has been exceeded.", Tag="pic")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Pic
		{
			get
			{
				return this.entityData.Pic; 
			}
			
			set
			{
				if (this.entityData.Pic == value)
					return;
					
				OnColumnChanging(VuCatogaryColumn.Pic, this.entityData.Pic);
				this.entityData.Pic = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuCatogaryColumn.Pic, this.entityData.Pic);
				OnPropertyChanged("Pic");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Closed property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsClosedNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Closed
		{
			get
			{
				return this.entityData.Closed; 
			}
			
			set
			{
				if (this.entityData.Closed == value)
					return;
					
				OnColumnChanging(VuCatogaryColumn.Closed, this.entityData.Closed);
				this.entityData.Closed = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuCatogaryColumn.Closed, this.entityData.Closed);
				OnPropertyChanged("Closed");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Owner property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="owner")]
		[ValidatorComposition(CompositionType.Or, Tag="owner")]
		[StringLengthValidator(50, MessageTemplate="Maximum length has been exceeded.", Tag="owner")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Owner
		{
			get
			{
				return this.entityData.Owner; 
			}
			
			set
			{
				if (this.entityData.Owner == value)
					return;
					
				OnColumnChanging(VuCatogaryColumn.Owner, this.entityData.Owner);
				this.entityData.Owner = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuCatogaryColumn.Owner, this.entityData.Owner);
				OnPropertyChanged("Owner");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Score property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScoreNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Score
		{
			get
			{
				return this.entityData.Score; 
			}
			
			set
			{
				if (this.entityData.Score == value)
					return;
					
				OnColumnChanging(VuCatogaryColumn.Score, this.entityData.Score);
				this.entityData.Score = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuCatogaryColumn.Score, this.entityData.Score);
				OnPropertyChanged("Score");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReplyRights property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsReplyRightsNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ReplyRights
		{
			get
			{
				return this.entityData.ReplyRights; 
			}
			
			set
			{
				if (this.entityData.ReplyRights == value)
					return;
					
				OnColumnChanging(VuCatogaryColumn.ReplyRights, this.entityData.ReplyRights);
				this.entityData.ReplyRights = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuCatogaryColumn.ReplyRights, this.entityData.ReplyRights);
				OnPropertyChanged("ReplyRights");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Isask property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsIsaskNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Isask
		{
			get
			{
				return this.entityData.Isask; 
			}
			
			set
			{
				if (this.entityData.Isask == value)
					return;
					
				OnColumnChanging(VuCatogaryColumn.Isask, this.entityData.Isask);
				this.entityData.Isask = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuCatogaryColumn.Isask, this.entityData.Isask);
				OnPropertyChanged("Isask");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "VU_catogary"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"id", "classid", "fuid", "name", "pic", "closed", "owner", "score", "reply_rights", "isask"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as VuCatogaryEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (VuCatogary) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<VuCatogary>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as VuCatogary);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed VuCatogary Entity 
		///</summary>
		protected virtual VuCatogary Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			VuCatogary copy = new VuCatogary();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.Classid = this.Classid;
				copy.Fuid = this.Fuid;
				copy.Name = this.Name;
				copy.Pic = this.Pic;
				copy.Closed = this.Closed;
				copy.Owner = this.Owner;
				copy.Score = this.Score;
				copy.ReplyRights = this.ReplyRights;
				copy.Isask = this.Isask;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed VuCatogary Entity 
		///</summary>
		public virtual VuCatogary Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed VuCatogary Entity which is a deep copy of the current entity.
		///</summary>
		public virtual VuCatogary DeepCopy()
		{
			return EntityHelper.Clone<VuCatogary>(this as VuCatogary);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as VuCatogaryEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new VuCatogaryEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as VuCatogaryEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(VuCatogaryColumn column)
		{
			switch(column)
			{
					case VuCatogaryColumn.Id:
					return entityData.Id != _originalData.Id;
					case VuCatogaryColumn.Classid:
					return entityData.Classid != _originalData.Classid;
					case VuCatogaryColumn.Fuid:
					return entityData.Fuid != _originalData.Fuid;
					case VuCatogaryColumn.Name:
					return entityData.Name != _originalData.Name;
					case VuCatogaryColumn.Pic:
					return entityData.Pic != _originalData.Pic;
					case VuCatogaryColumn.Closed:
					return entityData.Closed != _originalData.Closed;
					case VuCatogaryColumn.Owner:
					return entityData.Owner != _originalData.Owner;
					case VuCatogaryColumn.Score:
					return entityData.Score != _originalData.Score;
					case VuCatogaryColumn.ReplyRights:
					return entityData.ReplyRights != _originalData.ReplyRights;
					case VuCatogaryColumn.Isask:
					return entityData.Isask != _originalData.Isask;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< VuCatogaryColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.Classid != _originalData.Classid;
			result = result || entityData.Fuid != _originalData.Fuid;
			result = result || entityData.Name != _originalData.Name;
			result = result || entityData.Pic != _originalData.Pic;
			result = result || entityData.Closed != _originalData.Closed;
			result = result || entityData.Owner != _originalData.Owner;
			result = result || entityData.Score != _originalData.Score;
			result = result || entityData.ReplyRights != _originalData.ReplyRights;
			result = result || entityData.Isask != _originalData.Isask;
			return result;
		}	
		
		///<summary>
		///  Returns a VuCatogary Entity with the original data.
		///</summary>
		public VuCatogary GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateVuCatogary(
				_originalData.Classid,
				_originalData.Fuid,
				_originalData.Name,
				_originalData.Pic,
				_originalData.Closed,
				_originalData.Owner,
				_originalData.Score,
				_originalData.ReplyRights,
				_originalData.Isask
				);
				
			return (VuCatogary)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="VuCatogaryBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is VuCatogaryBase)
				return ValueEquals(this, (VuCatogaryBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="VuCatogaryBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.Classid == null) ? string.Empty : this.Classid.ToString()).GetHashCode() ^ 
					((this.Fuid == null) ? string.Empty : this.Fuid.ToString()).GetHashCode() ^ 
					((this.Name == null) ? string.Empty : this.Name.ToString()).GetHashCode() ^ 
					((this.Pic == null) ? string.Empty : this.Pic.ToString()).GetHashCode() ^ 
					((this.Closed == null) ? string.Empty : this.Closed.ToString()).GetHashCode() ^ 
					((this.Owner == null) ? string.Empty : this.Owner.ToString()).GetHashCode() ^ 
					((this.Score == null) ? string.Empty : this.Score.ToString()).GetHashCode() ^ 
					((this.ReplyRights == null) ? string.Empty : this.ReplyRights.ToString()).GetHashCode() ^ 
					((this.Isask == null) ? string.Empty : this.Isask.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="VuCatogaryBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(VuCatogaryBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="VuCatogaryBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="VuCatogaryBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="VuCatogaryBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(VuCatogaryBase Object1, VuCatogaryBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.Classid != null && Object2.Classid != null )
			{
				if (Object1.Classid != Object2.Classid)
					equal = false;
			}
			else if (Object1.Classid == null ^ Object2.Classid == null )
			{
				equal = false;
			}
			if ( Object1.Fuid != null && Object2.Fuid != null )
			{
				if (Object1.Fuid != Object2.Fuid)
					equal = false;
			}
			else if (Object1.Fuid == null ^ Object2.Fuid == null )
			{
				equal = false;
			}
			if ( Object1.Name != null && Object2.Name != null )
			{
				if (Object1.Name != Object2.Name)
					equal = false;
			}
			else if (Object1.Name == null ^ Object2.Name == null )
			{
				equal = false;
			}
			if ( Object1.Pic != null && Object2.Pic != null )
			{
				if (Object1.Pic != Object2.Pic)
					equal = false;
			}
			else if (Object1.Pic == null ^ Object2.Pic == null )
			{
				equal = false;
			}
			if ( Object1.Closed != null && Object2.Closed != null )
			{
				if (Object1.Closed != Object2.Closed)
					equal = false;
			}
			else if (Object1.Closed == null ^ Object2.Closed == null )
			{
				equal = false;
			}
			if ( Object1.Owner != null && Object2.Owner != null )
			{
				if (Object1.Owner != Object2.Owner)
					equal = false;
			}
			else if (Object1.Owner == null ^ Object2.Owner == null )
			{
				equal = false;
			}
			if ( Object1.Score != null && Object2.Score != null )
			{
				if (Object1.Score != Object2.Score)
					equal = false;
			}
			else if (Object1.Score == null ^ Object2.Score == null )
			{
				equal = false;
			}
			if ( Object1.ReplyRights != null && Object2.ReplyRights != null )
			{
				if (Object1.ReplyRights != Object2.ReplyRights)
					equal = false;
			}
			else if (Object1.ReplyRights == null ^ Object2.ReplyRights == null )
			{
				equal = false;
			}
			if ( Object1.Isask != null && Object2.Isask != null )
			{
				if (Object1.Isask != Object2.Isask)
					equal = false;
			}
			else if (Object1.Isask == null ^ Object2.Isask == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((VuCatogaryBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static VuCatogaryComparer GetComparer()
        {
            return new VuCatogaryComparer();
        }
        */

        // Comparer delegates back to VuCatogary
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(VuCatogary rhs, VuCatogaryColumn which)
        {
            switch (which)
            {
            	
            	
            	case VuCatogaryColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case VuCatogaryColumn.Classid:
            		return this.Classid.CompareTo(rhs.Classid);
            		
            		                 
            	
            	
            	case VuCatogaryColumn.Fuid:
            		return this.Fuid.Value.CompareTo(rhs.Fuid.Value);
            		
            		                 
            	
            	
            	case VuCatogaryColumn.Name:
            		return this.Name.CompareTo(rhs.Name);
            		
            		                 
            	
            	
            	case VuCatogaryColumn.Pic:
            		return this.Pic.CompareTo(rhs.Pic);
            		
            		                 
            	
            	
            	case VuCatogaryColumn.Closed:
            		return this.Closed.Value.CompareTo(rhs.Closed.Value);
            		
            		                 
            	
            	
            	case VuCatogaryColumn.Owner:
            		return this.Owner.CompareTo(rhs.Owner);
            		
            		                 
            	
            	
            	case VuCatogaryColumn.Score:
            		return this.Score.Value.CompareTo(rhs.Score.Value);
            		
            		                 
            	
            	
            	case VuCatogaryColumn.ReplyRights:
            		return this.ReplyRights.Value.CompareTo(rhs.ReplyRights.Value);
            		
            		                 
            	
            	
            	case VuCatogaryColumn.Isask:
            		return this.Isask.Value.CompareTo(rhs.Isask.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<VuCatogaryKey> Members
		
		// member variable for the EntityId property
		private VuCatogaryKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual VuCatogaryKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new VuCatogaryKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("VuCatogary")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{11}{10}- Id: {0}{10}- Classid: {1}{10}- Fuid: {2}{10}- Name: {3}{10}- Pic: {4}{10}- Closed: {5}{10}- Owner: {6}{10}- Score: {7}{10}- ReplyRights: {8}{10}- Isask: {9}{10}{12}", 
				this.Id,
				(this.Classid == null) ? string.Empty : this.Classid.ToString(),
				(this.Fuid == null) ? string.Empty : this.Fuid.ToString(),
				(this.Name == null) ? string.Empty : this.Name.ToString(),
				(this.Pic == null) ? string.Empty : this.Pic.ToString(),
				(this.Closed == null) ? string.Empty : this.Closed.ToString(),
				(this.Owner == null) ? string.Empty : this.Owner.ToString(),
				(this.Score == null) ? string.Empty : this.Score.ToString(),
				(this.ReplyRights == null) ? string.Empty : this.ReplyRights.ToString(),
				(this.Isask == null) ? string.Empty : this.Isask.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'VU_catogary' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class VuCatogaryEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// id : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "VU_catogary"</remarks>
		public System.Int32 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// classid : 
		/// </summary>
		public System.String		  Classid = null;
		
		/// <summary>
		/// fuid : 
		/// </summary>
		public System.Int32?		  Fuid = null;
		
		/// <summary>
		/// name : 
		/// </summary>
		public System.String		  Name = null;
		
		/// <summary>
		/// pic : 
		/// </summary>
		public System.String		  Pic = null;
		
		/// <summary>
		/// closed : 
		/// </summary>
		public System.Int32?		  Closed = null;
		
		/// <summary>
		/// owner : 
		/// </summary>
		public System.String		  Owner = null;
		
		/// <summary>
		/// score : 
		/// </summary>
		public System.Decimal?		  Score = null;
		
		/// <summary>
		/// reply_rights : 
		/// </summary>
		public System.Int32?		  ReplyRights = null;
		
		/// <summary>
		/// isask : 
		/// </summary>
		public System.Int32?		  Isask = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			VuCatogaryEntityData _tmp = new VuCatogaryEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.Classid = this.Classid;
			_tmp.Fuid = this.Fuid;
			_tmp.Name = this.Name;
			_tmp.Pic = this.Pic;
			_tmp.Closed = this.Closed;
			_tmp.Owner = this.Owner;
			_tmp.Score = this.Score;
			_tmp.ReplyRights = this.ReplyRights;
			_tmp.Isask = this.Isask;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			VuCatogaryEntityData _tmp = new VuCatogaryEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.Classid = this.Classid;
			_tmp.Fuid = this.Fuid;
			_tmp.Name = this.Name;
			_tmp.Pic = this.Pic;
			_tmp.Closed = this.Closed;
			_tmp.Owner = this.Owner;
			_tmp.Score = this.Score;
			_tmp.ReplyRights = this.ReplyRights;
			_tmp.Isask = this.Isask;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="VuCatogaryColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(VuCatogaryColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="VuCatogaryColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(VuCatogaryColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="VuCatogaryColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(VuCatogaryColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				VuCatogaryEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new VuCatogaryEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="VuCatogaryColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(VuCatogaryColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				VuCatogaryEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new VuCatogaryEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region VuCatogaryEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="VuCatogary"/> object.
	/// </remarks>
	public class VuCatogaryEventArgs : System.EventArgs
	{
		private VuCatogaryColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the VuCatogaryEventArgs class.
		///</summary>
		public VuCatogaryEventArgs(VuCatogaryColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the VuCatogaryEventArgs class.
		///</summary>
		public VuCatogaryEventArgs(VuCatogaryColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The VuCatogaryColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="VuCatogaryColumn" />
		public VuCatogaryColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all VuCatogary related events.
	///</summary>
	public delegate void VuCatogaryEventHandler(object sender, VuCatogaryEventArgs e);
	
	#region VuCatogaryComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class VuCatogaryComparer : System.Collections.Generic.IComparer<VuCatogary>
	{
		VuCatogaryColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:VuCatogaryComparer"/> class.
        /// </summary>
		public VuCatogaryComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:VuCatogaryComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public VuCatogaryComparer(VuCatogaryColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="VuCatogary"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="VuCatogary"/> to compare.</param>
        /// <param name="b">The second <c>VuCatogary</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(VuCatogary a, VuCatogary b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(VuCatogary entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(VuCatogary a, VuCatogary b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public VuCatogaryColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region VuCatogaryKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="VuCatogary"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class VuCatogaryKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the VuCatogaryKey class.
		/// </summary>
		public VuCatogaryKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the VuCatogaryKey class.
		/// </summary>
		public VuCatogaryKey(VuCatogaryBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the VuCatogaryKey class.
		/// </summary>
		public VuCatogaryKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private VuCatogaryBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public VuCatogaryBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region VuCatogaryColumn Enum
	
	/// <summary>
	/// Enumerate the VuCatogary columns.
	/// </summary>
	[Serializable]
	public enum VuCatogaryColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("id")]
		[ColumnEnum("id", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// Classid : 
		/// </summary>
		[EnumTextValue("classid")]
		[ColumnEnum("classid", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, true, 10)]
		Classid = 2,
		/// <summary>
		/// Fuid : 
		/// </summary>
		[EnumTextValue("fuid")]
		[ColumnEnum("fuid", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Fuid = 3,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("name")]
		[ColumnEnum("name", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Name = 4,
		/// <summary>
		/// Pic : 
		/// </summary>
		[EnumTextValue("pic")]
		[ColumnEnum("pic", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, true, 100)]
		Pic = 5,
		/// <summary>
		/// Closed : 
		/// </summary>
		[EnumTextValue("closed")]
		[ColumnEnum("closed", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Closed = 6,
		/// <summary>
		/// Owner : 
		/// </summary>
		[EnumTextValue("owner")]
		[ColumnEnum("owner", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Owner = 7,
		/// <summary>
		/// Score : 
		/// </summary>
		[EnumTextValue("score")]
		[ColumnEnum("score", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Score = 8,
		/// <summary>
		/// ReplyRights : 
		/// </summary>
		[EnumTextValue("reply_rights")]
		[ColumnEnum("reply_rights", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ReplyRights = 9,
		/// <summary>
		/// Isask : 
		/// </summary>
		[EnumTextValue("isask")]
		[ColumnEnum("isask", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Isask = 10
	}//End enum

	#endregion VuCatogaryColumn Enum

} // end namespace
