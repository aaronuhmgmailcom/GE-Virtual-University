
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file VuNewpost.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using Microsoft.Practices.EnterpriseLibrary.Validation.Validators;
using Microsoft.Practices.EnterpriseLibrary.Validation;

using GE.MyLearning.BL.Validation;
#endregion

namespace GE.MyLearning.BL
{
	///<summary>
	/// An object representation of the 'VU_NEWPOST' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class VuNewpostBase : EntityBase, IVuNewpost, IEntityId<VuNewpostKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private VuNewpostEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private VuNewpostEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private VuNewpostEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<VuNewpost> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event VuNewpostEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event VuNewpostEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="VuNewpostBase"/> instance.
		///</summary>
		public VuNewpostBase()
		{
			this.entityData = new VuNewpostEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="VuNewpostBase"/> instance.
		///</summary>
		///<param name="_safeNameObject"></param>
		///<param name="_conent"></param>
		///<param name="_spokerman"></param>
		///<param name="_sso"></param>
		///<param name="_popularity"></param>
		///<param name="_replynum"></param>
		///<param name="_replyman"></param>
		///<param name="_time"></param>
		///<param name="_lasttime"></param>
		///<param name="_tupian"></param>
		///<param name="_fujian"></param>
		///<param name="_icon"></param>
		///<param name="_isgreat"></param>
		///<param name="_updatetime"></param>
		///<param name="_catogary"></param>
		///<param name="_istop"></param>
		///<param name="_isxingming"></param>
		///<param name="_iskm"></param>
		///<param name="_score"></param>
		///<param name="_closed"></param>
		///<param name="_isdescore"></param>
		///<param name="_opentime"></param>
		///<param name="_closedtime"></param>
		///<param name="_replytimes"></param>
		///<param name="_owner"></param>
		///<param name="_modality"></param>
		///<param name="_groupid"></param>
		///<param name="_isopen"></param>
		///<param name="_issue"></param>
		///<param name="_askkm"></param>
		///<param name="_expert"></param>
		///<param name="_classid"></param>
		public VuNewpostBase(System.String _safeNameObject, System.String _conent, System.String _spokerman, 
			System.String _sso, System.Int32? _popularity, System.Int32? _replynum, System.String _replyman, 
			System.DateTime? _time, System.DateTime? _lasttime, System.String _tupian, System.String _fujian, 
			System.String _icon, System.Int32? _isgreat, System.DateTime? _updatetime, System.String _catogary, 
			System.Int32? _istop, System.Int32? _isxingming, System.Int32? _iskm, System.Decimal? _score, 
			System.Int32? _closed, System.Int32? _isdescore, System.DateTime? _opentime, System.DateTime? _closedtime, 
			System.Int32? _replytimes, System.String _owner, System.String _modality, System.Int32? _groupid, 
			System.Int32? _isopen, System.Int32? _issue, System.Int32? _askkm, System.String _expert, 
			System.String _classid)
		{
			this.entityData = new VuNewpostEntityData();
			this.backupData = null;

			this.SafeNameObject = _safeNameObject;
			this.Conent = _conent;
			this.Spokerman = _spokerman;
			this.Sso = _sso;
			this.Popularity = _popularity;
			this.Replynum = _replynum;
			this.Replyman = _replyman;
			this.Time = _time;
			this.Lasttime = _lasttime;
			this.Tupian = _tupian;
			this.Fujian = _fujian;
			this.Icon = _icon;
			this.Isgreat = _isgreat;
			this.Updatetime = _updatetime;
			this.Catogary = _catogary;
			this.Istop = _istop;
			this.Isxingming = _isxingming;
			this.Iskm = _iskm;
			this.Score = _score;
			this.Closed = _closed;
			this.Isdescore = _isdescore;
			this.Opentime = _opentime;
			this.Closedtime = _closedtime;
			this.Replytimes = _replytimes;
			this.Owner = _owner;
			this.Modality = _modality;
			this.Groupid = _groupid;
			this.Isopen = _isopen;
			this.Issue = _issue;
			this.Askkm = _askkm;
			this.Expert = _expert;
			this.Classid = _classid;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="VuNewpost"/> instance.
		///</summary>
		///<param name="_safeNameObject"></param>
		///<param name="_conent"></param>
		///<param name="_spokerman"></param>
		///<param name="_sso"></param>
		///<param name="_popularity"></param>
		///<param name="_replynum"></param>
		///<param name="_replyman"></param>
		///<param name="_time"></param>
		///<param name="_lasttime"></param>
		///<param name="_tupian"></param>
		///<param name="_fujian"></param>
		///<param name="_icon"></param>
		///<param name="_isgreat"></param>
		///<param name="_updatetime"></param>
		///<param name="_catogary"></param>
		///<param name="_istop"></param>
		///<param name="_isxingming"></param>
		///<param name="_iskm"></param>
		///<param name="_score"></param>
		///<param name="_closed"></param>
		///<param name="_isdescore"></param>
		///<param name="_opentime"></param>
		///<param name="_closedtime"></param>
		///<param name="_replytimes"></param>
		///<param name="_owner"></param>
		///<param name="_modality"></param>
		///<param name="_groupid"></param>
		///<param name="_isopen"></param>
		///<param name="_issue"></param>
		///<param name="_askkm"></param>
		///<param name="_expert"></param>
		///<param name="_classid"></param>
		public static VuNewpost CreateVuNewpost(System.String _safeNameObject, System.String _conent, System.String _spokerman, 
			System.String _sso, System.Int32? _popularity, System.Int32? _replynum, System.String _replyman, 
			System.DateTime? _time, System.DateTime? _lasttime, System.String _tupian, System.String _fujian, 
			System.String _icon, System.Int32? _isgreat, System.DateTime? _updatetime, System.String _catogary, 
			System.Int32? _istop, System.Int32? _isxingming, System.Int32? _iskm, System.Decimal? _score, 
			System.Int32? _closed, System.Int32? _isdescore, System.DateTime? _opentime, System.DateTime? _closedtime, 
			System.Int32? _replytimes, System.String _owner, System.String _modality, System.Int32? _groupid, 
			System.Int32? _isopen, System.Int32? _issue, System.Int32? _askkm, System.String _expert, 
			System.String _classid)
		{
			VuNewpost newVuNewpost = new VuNewpost();
			newVuNewpost.SafeNameObject = _safeNameObject;
			newVuNewpost.Conent = _conent;
			newVuNewpost.Spokerman = _spokerman;
			newVuNewpost.Sso = _sso;
			newVuNewpost.Popularity = _popularity;
			newVuNewpost.Replynum = _replynum;
			newVuNewpost.Replyman = _replyman;
			newVuNewpost.Time = _time;
			newVuNewpost.Lasttime = _lasttime;
			newVuNewpost.Tupian = _tupian;
			newVuNewpost.Fujian = _fujian;
			newVuNewpost.Icon = _icon;
			newVuNewpost.Isgreat = _isgreat;
			newVuNewpost.Updatetime = _updatetime;
			newVuNewpost.Catogary = _catogary;
			newVuNewpost.Istop = _istop;
			newVuNewpost.Isxingming = _isxingming;
			newVuNewpost.Iskm = _iskm;
			newVuNewpost.Score = _score;
			newVuNewpost.Closed = _closed;
			newVuNewpost.Isdescore = _isdescore;
			newVuNewpost.Opentime = _opentime;
			newVuNewpost.Closedtime = _closedtime;
			newVuNewpost.Replytimes = _replytimes;
			newVuNewpost.Owner = _owner;
			newVuNewpost.Modality = _modality;
			newVuNewpost.Groupid = _groupid;
			newVuNewpost.Isopen = _isopen;
			newVuNewpost.Issue = _issue;
			newVuNewpost.Askkm = _askkm;
			newVuNewpost.Expert = _expert;
			newVuNewpost.Classid = _classid;
			return newVuNewpost;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(VuNewpostColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuNewpostColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SafeNameObject property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="OBJECT")]
		[ValidatorComposition(CompositionType.Or, Tag="OBJECT")]
		[StringLengthValidator(50, MessageTemplate="Maximum length has been exceeded.", Tag="OBJECT")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String SafeNameObject
		{
			get
			{
				return this.entityData.SafeNameObject; 
			}
			
			set
			{
				if (this.entityData.SafeNameObject == value)
					return;
					
				OnColumnChanging(VuNewpostColumn.SafeNameObject, this.entityData.SafeNameObject);
				this.entityData.SafeNameObject = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuNewpostColumn.SafeNameObject, this.entityData.SafeNameObject);
				OnPropertyChanged("SafeNameObject");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Conent property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Conent
		{
			get
			{
				return this.entityData.Conent; 
			}
			
			set
			{
				if (this.entityData.Conent == value)
					return;
					
				OnColumnChanging(VuNewpostColumn.Conent, this.entityData.Conent);
				this.entityData.Conent = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuNewpostColumn.Conent, this.entityData.Conent);
				OnPropertyChanged("Conent");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Spokerman property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="SPOKERMAN")]
		[ValidatorComposition(CompositionType.Or, Tag="SPOKERMAN")]
		[StringLengthValidator(50, MessageTemplate="Maximum length has been exceeded.", Tag="SPOKERMAN")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Spokerman
		{
			get
			{
				return this.entityData.Spokerman; 
			}
			
			set
			{
				if (this.entityData.Spokerman == value)
					return;
					
				OnColumnChanging(VuNewpostColumn.Spokerman, this.entityData.Spokerman);
				this.entityData.Spokerman = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuNewpostColumn.Spokerman, this.entityData.Spokerman);
				OnPropertyChanged("Spokerman");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Sso property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="SSO")]
		[ValidatorComposition(CompositionType.Or, Tag="SSO")]
		[StringLengthValidator(50, MessageTemplate="Maximum length has been exceeded.", Tag="SSO")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Sso
		{
			get
			{
				return this.entityData.Sso; 
			}
			
			set
			{
				if (this.entityData.Sso == value)
					return;
					
				OnColumnChanging(VuNewpostColumn.Sso, this.entityData.Sso);
				this.entityData.Sso = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuNewpostColumn.Sso, this.entityData.Sso);
				OnPropertyChanged("Sso");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Popularity property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsPopularityNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Popularity
		{
			get
			{
				return this.entityData.Popularity; 
			}
			
			set
			{
				if (this.entityData.Popularity == value)
					return;
					
				OnColumnChanging(VuNewpostColumn.Popularity, this.entityData.Popularity);
				this.entityData.Popularity = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuNewpostColumn.Popularity, this.entityData.Popularity);
				OnPropertyChanged("Popularity");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Replynum property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsReplynumNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Replynum
		{
			get
			{
				return this.entityData.Replynum; 
			}
			
			set
			{
				if (this.entityData.Replynum == value)
					return;
					
				OnColumnChanging(VuNewpostColumn.Replynum, this.entityData.Replynum);
				this.entityData.Replynum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuNewpostColumn.Replynum, this.entityData.Replynum);
				OnPropertyChanged("Replynum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Replyman property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="REPLYMAN")]
		[ValidatorComposition(CompositionType.Or, Tag="REPLYMAN")]
		[StringLengthValidator(50, MessageTemplate="Maximum length has been exceeded.", Tag="REPLYMAN")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Replyman
		{
			get
			{
				return this.entityData.Replyman; 
			}
			
			set
			{
				if (this.entityData.Replyman == value)
					return;
					
				OnColumnChanging(VuNewpostColumn.Replyman, this.entityData.Replyman);
				this.entityData.Replyman = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuNewpostColumn.Replyman, this.entityData.Replyman);
				OnPropertyChanged("Replyman");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Time property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsTimeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? Time
		{
			get
			{
				return this.entityData.Time; 
			}
			
			set
			{
				if (this.entityData.Time == value)
					return;
					
				OnColumnChanging(VuNewpostColumn.Time, this.entityData.Time);
				this.entityData.Time = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuNewpostColumn.Time, this.entityData.Time);
				OnPropertyChanged("Time");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Lasttime property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLasttimeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? Lasttime
		{
			get
			{
				return this.entityData.Lasttime; 
			}
			
			set
			{
				if (this.entityData.Lasttime == value)
					return;
					
				OnColumnChanging(VuNewpostColumn.Lasttime, this.entityData.Lasttime);
				this.entityData.Lasttime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuNewpostColumn.Lasttime, this.entityData.Lasttime);
				OnPropertyChanged("Lasttime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Tupian property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="tupian")]
		[ValidatorComposition(CompositionType.Or, Tag="tupian")]
		[StringLengthValidator(50, MessageTemplate="Maximum length has been exceeded.", Tag="tupian")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Tupian
		{
			get
			{
				return this.entityData.Tupian; 
			}
			
			set
			{
				if (this.entityData.Tupian == value)
					return;
					
				OnColumnChanging(VuNewpostColumn.Tupian, this.entityData.Tupian);
				this.entityData.Tupian = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuNewpostColumn.Tupian, this.entityData.Tupian);
				OnPropertyChanged("Tupian");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Fujian property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="fujian")]
		[ValidatorComposition(CompositionType.Or, Tag="fujian")]
		[StringLengthValidator(50, MessageTemplate="Maximum length has been exceeded.", Tag="fujian")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Fujian
		{
			get
			{
				return this.entityData.Fujian; 
			}
			
			set
			{
				if (this.entityData.Fujian == value)
					return;
					
				OnColumnChanging(VuNewpostColumn.Fujian, this.entityData.Fujian);
				this.entityData.Fujian = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuNewpostColumn.Fujian, this.entityData.Fujian);
				OnPropertyChanged("Fujian");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Icon property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="icon")]
		[ValidatorComposition(CompositionType.Or, Tag="icon")]
		[StringLengthValidator(50, MessageTemplate="Maximum length has been exceeded.", Tag="icon")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Icon
		{
			get
			{
				return this.entityData.Icon; 
			}
			
			set
			{
				if (this.entityData.Icon == value)
					return;
					
				OnColumnChanging(VuNewpostColumn.Icon, this.entityData.Icon);
				this.entityData.Icon = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuNewpostColumn.Icon, this.entityData.Icon);
				OnPropertyChanged("Icon");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Isgreat property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsIsgreatNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Isgreat
		{
			get
			{
				return this.entityData.Isgreat; 
			}
			
			set
			{
				if (this.entityData.Isgreat == value)
					return;
					
				OnColumnChanging(VuNewpostColumn.Isgreat, this.entityData.Isgreat);
				this.entityData.Isgreat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuNewpostColumn.Isgreat, this.entityData.Isgreat);
				OnPropertyChanged("Isgreat");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Updatetime property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsUpdatetimeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? Updatetime
		{
			get
			{
				return this.entityData.Updatetime; 
			}
			
			set
			{
				if (this.entityData.Updatetime == value)
					return;
					
				OnColumnChanging(VuNewpostColumn.Updatetime, this.entityData.Updatetime);
				this.entityData.Updatetime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuNewpostColumn.Updatetime, this.entityData.Updatetime);
				OnPropertyChanged("Updatetime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Catogary property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="catogary")]
		[ValidatorComposition(CompositionType.Or, Tag="catogary")]
		[StringLengthValidator(50, MessageTemplate="Maximum length has been exceeded.", Tag="catogary")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Catogary
		{
			get
			{
				return this.entityData.Catogary; 
			}
			
			set
			{
				if (this.entityData.Catogary == value)
					return;
					
				OnColumnChanging(VuNewpostColumn.Catogary, this.entityData.Catogary);
				this.entityData.Catogary = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuNewpostColumn.Catogary, this.entityData.Catogary);
				OnPropertyChanged("Catogary");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Istop property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsIstopNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Istop
		{
			get
			{
				return this.entityData.Istop; 
			}
			
			set
			{
				if (this.entityData.Istop == value)
					return;
					
				OnColumnChanging(VuNewpostColumn.Istop, this.entityData.Istop);
				this.entityData.Istop = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuNewpostColumn.Istop, this.entityData.Istop);
				OnPropertyChanged("Istop");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Isxingming property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsIsxingmingNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Isxingming
		{
			get
			{
				return this.entityData.Isxingming; 
			}
			
			set
			{
				if (this.entityData.Isxingming == value)
					return;
					
				OnColumnChanging(VuNewpostColumn.Isxingming, this.entityData.Isxingming);
				this.entityData.Isxingming = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuNewpostColumn.Isxingming, this.entityData.Isxingming);
				OnPropertyChanged("Isxingming");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Iskm property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsIskmNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Iskm
		{
			get
			{
				return this.entityData.Iskm; 
			}
			
			set
			{
				if (this.entityData.Iskm == value)
					return;
					
				OnColumnChanging(VuNewpostColumn.Iskm, this.entityData.Iskm);
				this.entityData.Iskm = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuNewpostColumn.Iskm, this.entityData.Iskm);
				OnPropertyChanged("Iskm");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Score property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScoreNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Score
		{
			get
			{
				return this.entityData.Score; 
			}
			
			set
			{
				if (this.entityData.Score == value)
					return;
					
				OnColumnChanging(VuNewpostColumn.Score, this.entityData.Score);
				this.entityData.Score = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuNewpostColumn.Score, this.entityData.Score);
				OnPropertyChanged("Score");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Closed property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsClosedNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Closed
		{
			get
			{
				return this.entityData.Closed; 
			}
			
			set
			{
				if (this.entityData.Closed == value)
					return;
					
				OnColumnChanging(VuNewpostColumn.Closed, this.entityData.Closed);
				this.entityData.Closed = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuNewpostColumn.Closed, this.entityData.Closed);
				OnPropertyChanged("Closed");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Isdescore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsIsdescoreNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Isdescore
		{
			get
			{
				return this.entityData.Isdescore; 
			}
			
			set
			{
				if (this.entityData.Isdescore == value)
					return;
					
				OnColumnChanging(VuNewpostColumn.Isdescore, this.entityData.Isdescore);
				this.entityData.Isdescore = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuNewpostColumn.Isdescore, this.entityData.Isdescore);
				OnPropertyChanged("Isdescore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Opentime property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsOpentimeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? Opentime
		{
			get
			{
				return this.entityData.Opentime; 
			}
			
			set
			{
				if (this.entityData.Opentime == value)
					return;
					
				OnColumnChanging(VuNewpostColumn.Opentime, this.entityData.Opentime);
				this.entityData.Opentime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuNewpostColumn.Opentime, this.entityData.Opentime);
				OnPropertyChanged("Opentime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Closedtime property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsClosedtimeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? Closedtime
		{
			get
			{
				return this.entityData.Closedtime; 
			}
			
			set
			{
				if (this.entityData.Closedtime == value)
					return;
					
				OnColumnChanging(VuNewpostColumn.Closedtime, this.entityData.Closedtime);
				this.entityData.Closedtime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuNewpostColumn.Closedtime, this.entityData.Closedtime);
				OnPropertyChanged("Closedtime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Replytimes property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsReplytimesNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Replytimes
		{
			get
			{
				return this.entityData.Replytimes; 
			}
			
			set
			{
				if (this.entityData.Replytimes == value)
					return;
					
				OnColumnChanging(VuNewpostColumn.Replytimes, this.entityData.Replytimes);
				this.entityData.Replytimes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuNewpostColumn.Replytimes, this.entityData.Replytimes);
				OnPropertyChanged("Replytimes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Owner property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="owner")]
		[ValidatorComposition(CompositionType.Or, Tag="owner")]
		[StringLengthValidator(50, MessageTemplate="Maximum length has been exceeded.", Tag="owner")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Owner
		{
			get
			{
				return this.entityData.Owner; 
			}
			
			set
			{
				if (this.entityData.Owner == value)
					return;
					
				OnColumnChanging(VuNewpostColumn.Owner, this.entityData.Owner);
				this.entityData.Owner = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuNewpostColumn.Owner, this.entityData.Owner);
				OnPropertyChanged("Owner");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Modality property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="modality")]
		[ValidatorComposition(CompositionType.Or, Tag="modality")]
		[StringLengthValidator(50, MessageTemplate="Maximum length has been exceeded.", Tag="modality")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Modality
		{
			get
			{
				return this.entityData.Modality; 
			}
			
			set
			{
				if (this.entityData.Modality == value)
					return;
					
				OnColumnChanging(VuNewpostColumn.Modality, this.entityData.Modality);
				this.entityData.Modality = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuNewpostColumn.Modality, this.entityData.Modality);
				OnPropertyChanged("Modality");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Groupid property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsGroupidNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Groupid
		{
			get
			{
				return this.entityData.Groupid; 
			}
			
			set
			{
				if (this.entityData.Groupid == value)
					return;
					
				OnColumnChanging(VuNewpostColumn.Groupid, this.entityData.Groupid);
				this.entityData.Groupid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuNewpostColumn.Groupid, this.entityData.Groupid);
				OnPropertyChanged("Groupid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Isopen property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsIsopenNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Isopen
		{
			get
			{
				return this.entityData.Isopen; 
			}
			
			set
			{
				if (this.entityData.Isopen == value)
					return;
					
				OnColumnChanging(VuNewpostColumn.Isopen, this.entityData.Isopen);
				this.entityData.Isopen = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuNewpostColumn.Isopen, this.entityData.Isopen);
				OnPropertyChanged("Isopen");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Issue property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsIssueNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Issue
		{
			get
			{
				return this.entityData.Issue; 
			}
			
			set
			{
				if (this.entityData.Issue == value)
					return;
					
				OnColumnChanging(VuNewpostColumn.Issue, this.entityData.Issue);
				this.entityData.Issue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuNewpostColumn.Issue, this.entityData.Issue);
				OnPropertyChanged("Issue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Askkm property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsAskkmNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Askkm
		{
			get
			{
				return this.entityData.Askkm; 
			}
			
			set
			{
				if (this.entityData.Askkm == value)
					return;
					
				OnColumnChanging(VuNewpostColumn.Askkm, this.entityData.Askkm);
				this.entityData.Askkm = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuNewpostColumn.Askkm, this.entityData.Askkm);
				OnPropertyChanged("Askkm");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Expert property. 
		///		
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="expert")]
		[ValidatorComposition(CompositionType.Or, Tag="expert")]
		[StringLengthValidator(10, MessageTemplate="Maximum length has been exceeded.", Tag="expert")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String Expert
		{
			get
			{
				return this.entityData.Expert; 
			}
			
			set
			{
				if (this.entityData.Expert == value)
					return;
					
				OnColumnChanging(VuNewpostColumn.Expert, this.entityData.Expert);
				this.entityData.Expert = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuNewpostColumn.Expert, this.entityData.Expert);
				OnPropertyChanged("Expert");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Classid property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="classid")]
		[ValidatorComposition(CompositionType.Or, Tag="classid")]
		[StringLengthValidator(10, MessageTemplate="Maximum length has been exceeded.", Tag="classid")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String Classid
		{
			get
			{
				return this.entityData.Classid; 
			}
			
			set
			{
				if (this.entityData.Classid == value)
					return;
					
				OnColumnChanging(VuNewpostColumn.Classid, this.entityData.Classid);
				this.entityData.Classid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuNewpostColumn.Classid, this.entityData.Classid);
				OnPropertyChanged("Classid");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "VU_NEWPOST"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "OBJECT", "CONENT", "SPOKERMAN", "SSO", "POPULARITY", "REPLYNUM", "REPLYMAN", "time", "lasttime", "tupian", "fujian", "icon", "isgreat", "updatetime", "catogary", "istop", "isxingming", "iskm", "score", "closed", "isdescore", "opentime", "closedtime", "replytimes", "owner", "modality", "groupid", "isopen", "issue", "askkm", "expert", "classid"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as VuNewpostEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (VuNewpost) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<VuNewpost>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as VuNewpost);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed VuNewpost Entity 
		///</summary>
		protected virtual VuNewpost Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			VuNewpost copy = new VuNewpost();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.SafeNameObject = this.SafeNameObject;
				copy.Conent = this.Conent;
				copy.Spokerman = this.Spokerman;
				copy.Sso = this.Sso;
				copy.Popularity = this.Popularity;
				copy.Replynum = this.Replynum;
				copy.Replyman = this.Replyman;
				copy.Time = this.Time;
				copy.Lasttime = this.Lasttime;
				copy.Tupian = this.Tupian;
				copy.Fujian = this.Fujian;
				copy.Icon = this.Icon;
				copy.Isgreat = this.Isgreat;
				copy.Updatetime = this.Updatetime;
				copy.Catogary = this.Catogary;
				copy.Istop = this.Istop;
				copy.Isxingming = this.Isxingming;
				copy.Iskm = this.Iskm;
				copy.Score = this.Score;
				copy.Closed = this.Closed;
				copy.Isdescore = this.Isdescore;
				copy.Opentime = this.Opentime;
				copy.Closedtime = this.Closedtime;
				copy.Replytimes = this.Replytimes;
				copy.Owner = this.Owner;
				copy.Modality = this.Modality;
				copy.Groupid = this.Groupid;
				copy.Isopen = this.Isopen;
				copy.Issue = this.Issue;
				copy.Askkm = this.Askkm;
				copy.Expert = this.Expert;
				copy.Classid = this.Classid;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed VuNewpost Entity 
		///</summary>
		public virtual VuNewpost Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed VuNewpost Entity which is a deep copy of the current entity.
		///</summary>
		public virtual VuNewpost DeepCopy()
		{
			return EntityHelper.Clone<VuNewpost>(this as VuNewpost);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as VuNewpostEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new VuNewpostEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as VuNewpostEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(VuNewpostColumn column)
		{
			switch(column)
			{
					case VuNewpostColumn.Id:
					return entityData.Id != _originalData.Id;
					case VuNewpostColumn.SafeNameObject:
					return entityData.SafeNameObject != _originalData.SafeNameObject;
					case VuNewpostColumn.Conent:
					return entityData.Conent != _originalData.Conent;
					case VuNewpostColumn.Spokerman:
					return entityData.Spokerman != _originalData.Spokerman;
					case VuNewpostColumn.Sso:
					return entityData.Sso != _originalData.Sso;
					case VuNewpostColumn.Popularity:
					return entityData.Popularity != _originalData.Popularity;
					case VuNewpostColumn.Replynum:
					return entityData.Replynum != _originalData.Replynum;
					case VuNewpostColumn.Replyman:
					return entityData.Replyman != _originalData.Replyman;
					case VuNewpostColumn.Time:
					return entityData.Time != _originalData.Time;
					case VuNewpostColumn.Lasttime:
					return entityData.Lasttime != _originalData.Lasttime;
					case VuNewpostColumn.Tupian:
					return entityData.Tupian != _originalData.Tupian;
					case VuNewpostColumn.Fujian:
					return entityData.Fujian != _originalData.Fujian;
					case VuNewpostColumn.Icon:
					return entityData.Icon != _originalData.Icon;
					case VuNewpostColumn.Isgreat:
					return entityData.Isgreat != _originalData.Isgreat;
					case VuNewpostColumn.Updatetime:
					return entityData.Updatetime != _originalData.Updatetime;
					case VuNewpostColumn.Catogary:
					return entityData.Catogary != _originalData.Catogary;
					case VuNewpostColumn.Istop:
					return entityData.Istop != _originalData.Istop;
					case VuNewpostColumn.Isxingming:
					return entityData.Isxingming != _originalData.Isxingming;
					case VuNewpostColumn.Iskm:
					return entityData.Iskm != _originalData.Iskm;
					case VuNewpostColumn.Score:
					return entityData.Score != _originalData.Score;
					case VuNewpostColumn.Closed:
					return entityData.Closed != _originalData.Closed;
					case VuNewpostColumn.Isdescore:
					return entityData.Isdescore != _originalData.Isdescore;
					case VuNewpostColumn.Opentime:
					return entityData.Opentime != _originalData.Opentime;
					case VuNewpostColumn.Closedtime:
					return entityData.Closedtime != _originalData.Closedtime;
					case VuNewpostColumn.Replytimes:
					return entityData.Replytimes != _originalData.Replytimes;
					case VuNewpostColumn.Owner:
					return entityData.Owner != _originalData.Owner;
					case VuNewpostColumn.Modality:
					return entityData.Modality != _originalData.Modality;
					case VuNewpostColumn.Groupid:
					return entityData.Groupid != _originalData.Groupid;
					case VuNewpostColumn.Isopen:
					return entityData.Isopen != _originalData.Isopen;
					case VuNewpostColumn.Issue:
					return entityData.Issue != _originalData.Issue;
					case VuNewpostColumn.Askkm:
					return entityData.Askkm != _originalData.Askkm;
					case VuNewpostColumn.Expert:
					return entityData.Expert != _originalData.Expert;
					case VuNewpostColumn.Classid:
					return entityData.Classid != _originalData.Classid;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< VuNewpostColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.SafeNameObject != _originalData.SafeNameObject;
			result = result || entityData.Conent != _originalData.Conent;
			result = result || entityData.Spokerman != _originalData.Spokerman;
			result = result || entityData.Sso != _originalData.Sso;
			result = result || entityData.Popularity != _originalData.Popularity;
			result = result || entityData.Replynum != _originalData.Replynum;
			result = result || entityData.Replyman != _originalData.Replyman;
			result = result || entityData.Time != _originalData.Time;
			result = result || entityData.Lasttime != _originalData.Lasttime;
			result = result || entityData.Tupian != _originalData.Tupian;
			result = result || entityData.Fujian != _originalData.Fujian;
			result = result || entityData.Icon != _originalData.Icon;
			result = result || entityData.Isgreat != _originalData.Isgreat;
			result = result || entityData.Updatetime != _originalData.Updatetime;
			result = result || entityData.Catogary != _originalData.Catogary;
			result = result || entityData.Istop != _originalData.Istop;
			result = result || entityData.Isxingming != _originalData.Isxingming;
			result = result || entityData.Iskm != _originalData.Iskm;
			result = result || entityData.Score != _originalData.Score;
			result = result || entityData.Closed != _originalData.Closed;
			result = result || entityData.Isdescore != _originalData.Isdescore;
			result = result || entityData.Opentime != _originalData.Opentime;
			result = result || entityData.Closedtime != _originalData.Closedtime;
			result = result || entityData.Replytimes != _originalData.Replytimes;
			result = result || entityData.Owner != _originalData.Owner;
			result = result || entityData.Modality != _originalData.Modality;
			result = result || entityData.Groupid != _originalData.Groupid;
			result = result || entityData.Isopen != _originalData.Isopen;
			result = result || entityData.Issue != _originalData.Issue;
			result = result || entityData.Askkm != _originalData.Askkm;
			result = result || entityData.Expert != _originalData.Expert;
			result = result || entityData.Classid != _originalData.Classid;
			return result;
		}	
		
		///<summary>
		///  Returns a VuNewpost Entity with the original data.
		///</summary>
		public VuNewpost GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateVuNewpost(
				_originalData.SafeNameObject,
				_originalData.Conent,
				_originalData.Spokerman,
				_originalData.Sso,
				_originalData.Popularity,
				_originalData.Replynum,
				_originalData.Replyman,
				_originalData.Time,
				_originalData.Lasttime,
				_originalData.Tupian,
				_originalData.Fujian,
				_originalData.Icon,
				_originalData.Isgreat,
				_originalData.Updatetime,
				_originalData.Catogary,
				_originalData.Istop,
				_originalData.Isxingming,
				_originalData.Iskm,
				_originalData.Score,
				_originalData.Closed,
				_originalData.Isdescore,
				_originalData.Opentime,
				_originalData.Closedtime,
				_originalData.Replytimes,
				_originalData.Owner,
				_originalData.Modality,
				_originalData.Groupid,
				_originalData.Isopen,
				_originalData.Issue,
				_originalData.Askkm,
				_originalData.Expert,
				_originalData.Classid
				);
				
			return (VuNewpost)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="VuNewpostBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is VuNewpostBase)
				return ValueEquals(this, (VuNewpostBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="VuNewpostBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.SafeNameObject == null) ? string.Empty : this.SafeNameObject.ToString()).GetHashCode() ^ 
					((this.Conent == null) ? string.Empty : this.Conent.ToString()).GetHashCode() ^ 
					((this.Spokerman == null) ? string.Empty : this.Spokerman.ToString()).GetHashCode() ^ 
					((this.Sso == null) ? string.Empty : this.Sso.ToString()).GetHashCode() ^ 
					((this.Popularity == null) ? string.Empty : this.Popularity.ToString()).GetHashCode() ^ 
					((this.Replynum == null) ? string.Empty : this.Replynum.ToString()).GetHashCode() ^ 
					((this.Replyman == null) ? string.Empty : this.Replyman.ToString()).GetHashCode() ^ 
					((this.Time == null) ? string.Empty : this.Time.ToString()).GetHashCode() ^ 
					((this.Lasttime == null) ? string.Empty : this.Lasttime.ToString()).GetHashCode() ^ 
					((this.Tupian == null) ? string.Empty : this.Tupian.ToString()).GetHashCode() ^ 
					((this.Fujian == null) ? string.Empty : this.Fujian.ToString()).GetHashCode() ^ 
					((this.Icon == null) ? string.Empty : this.Icon.ToString()).GetHashCode() ^ 
					((this.Isgreat == null) ? string.Empty : this.Isgreat.ToString()).GetHashCode() ^ 
					((this.Updatetime == null) ? string.Empty : this.Updatetime.ToString()).GetHashCode() ^ 
					((this.Catogary == null) ? string.Empty : this.Catogary.ToString()).GetHashCode() ^ 
					((this.Istop == null) ? string.Empty : this.Istop.ToString()).GetHashCode() ^ 
					((this.Isxingming == null) ? string.Empty : this.Isxingming.ToString()).GetHashCode() ^ 
					((this.Iskm == null) ? string.Empty : this.Iskm.ToString()).GetHashCode() ^ 
					((this.Score == null) ? string.Empty : this.Score.ToString()).GetHashCode() ^ 
					((this.Closed == null) ? string.Empty : this.Closed.ToString()).GetHashCode() ^ 
					((this.Isdescore == null) ? string.Empty : this.Isdescore.ToString()).GetHashCode() ^ 
					((this.Opentime == null) ? string.Empty : this.Opentime.ToString()).GetHashCode() ^ 
					((this.Closedtime == null) ? string.Empty : this.Closedtime.ToString()).GetHashCode() ^ 
					((this.Replytimes == null) ? string.Empty : this.Replytimes.ToString()).GetHashCode() ^ 
					((this.Owner == null) ? string.Empty : this.Owner.ToString()).GetHashCode() ^ 
					((this.Modality == null) ? string.Empty : this.Modality.ToString()).GetHashCode() ^ 
					((this.Groupid == null) ? string.Empty : this.Groupid.ToString()).GetHashCode() ^ 
					((this.Isopen == null) ? string.Empty : this.Isopen.ToString()).GetHashCode() ^ 
					((this.Issue == null) ? string.Empty : this.Issue.ToString()).GetHashCode() ^ 
					((this.Askkm == null) ? string.Empty : this.Askkm.ToString()).GetHashCode() ^ 
					((this.Expert == null) ? string.Empty : this.Expert.ToString()).GetHashCode() ^ 
					((this.Classid == null) ? string.Empty : this.Classid.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="VuNewpostBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(VuNewpostBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="VuNewpostBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="VuNewpostBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="VuNewpostBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(VuNewpostBase Object1, VuNewpostBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.SafeNameObject != null && Object2.SafeNameObject != null )
			{
				if (Object1.SafeNameObject != Object2.SafeNameObject)
					equal = false;
			}
			else if (Object1.SafeNameObject == null ^ Object2.SafeNameObject == null )
			{
				equal = false;
			}
			if ( Object1.Conent != null && Object2.Conent != null )
			{
				if (Object1.Conent != Object2.Conent)
					equal = false;
			}
			else if (Object1.Conent == null ^ Object2.Conent == null )
			{
				equal = false;
			}
			if ( Object1.Spokerman != null && Object2.Spokerman != null )
			{
				if (Object1.Spokerman != Object2.Spokerman)
					equal = false;
			}
			else if (Object1.Spokerman == null ^ Object2.Spokerman == null )
			{
				equal = false;
			}
			if ( Object1.Sso != null && Object2.Sso != null )
			{
				if (Object1.Sso != Object2.Sso)
					equal = false;
			}
			else if (Object1.Sso == null ^ Object2.Sso == null )
			{
				equal = false;
			}
			if ( Object1.Popularity != null && Object2.Popularity != null )
			{
				if (Object1.Popularity != Object2.Popularity)
					equal = false;
			}
			else if (Object1.Popularity == null ^ Object2.Popularity == null )
			{
				equal = false;
			}
			if ( Object1.Replynum != null && Object2.Replynum != null )
			{
				if (Object1.Replynum != Object2.Replynum)
					equal = false;
			}
			else if (Object1.Replynum == null ^ Object2.Replynum == null )
			{
				equal = false;
			}
			if ( Object1.Replyman != null && Object2.Replyman != null )
			{
				if (Object1.Replyman != Object2.Replyman)
					equal = false;
			}
			else if (Object1.Replyman == null ^ Object2.Replyman == null )
			{
				equal = false;
			}
			if ( Object1.Time != null && Object2.Time != null )
			{
				if (Object1.Time != Object2.Time)
					equal = false;
			}
			else if (Object1.Time == null ^ Object2.Time == null )
			{
				equal = false;
			}
			if ( Object1.Lasttime != null && Object2.Lasttime != null )
			{
				if (Object1.Lasttime != Object2.Lasttime)
					equal = false;
			}
			else if (Object1.Lasttime == null ^ Object2.Lasttime == null )
			{
				equal = false;
			}
			if ( Object1.Tupian != null && Object2.Tupian != null )
			{
				if (Object1.Tupian != Object2.Tupian)
					equal = false;
			}
			else if (Object1.Tupian == null ^ Object2.Tupian == null )
			{
				equal = false;
			}
			if ( Object1.Fujian != null && Object2.Fujian != null )
			{
				if (Object1.Fujian != Object2.Fujian)
					equal = false;
			}
			else if (Object1.Fujian == null ^ Object2.Fujian == null )
			{
				equal = false;
			}
			if ( Object1.Icon != null && Object2.Icon != null )
			{
				if (Object1.Icon != Object2.Icon)
					equal = false;
			}
			else if (Object1.Icon == null ^ Object2.Icon == null )
			{
				equal = false;
			}
			if ( Object1.Isgreat != null && Object2.Isgreat != null )
			{
				if (Object1.Isgreat != Object2.Isgreat)
					equal = false;
			}
			else if (Object1.Isgreat == null ^ Object2.Isgreat == null )
			{
				equal = false;
			}
			if ( Object1.Updatetime != null && Object2.Updatetime != null )
			{
				if (Object1.Updatetime != Object2.Updatetime)
					equal = false;
			}
			else if (Object1.Updatetime == null ^ Object2.Updatetime == null )
			{
				equal = false;
			}
			if ( Object1.Catogary != null && Object2.Catogary != null )
			{
				if (Object1.Catogary != Object2.Catogary)
					equal = false;
			}
			else if (Object1.Catogary == null ^ Object2.Catogary == null )
			{
				equal = false;
			}
			if ( Object1.Istop != null && Object2.Istop != null )
			{
				if (Object1.Istop != Object2.Istop)
					equal = false;
			}
			else if (Object1.Istop == null ^ Object2.Istop == null )
			{
				equal = false;
			}
			if ( Object1.Isxingming != null && Object2.Isxingming != null )
			{
				if (Object1.Isxingming != Object2.Isxingming)
					equal = false;
			}
			else if (Object1.Isxingming == null ^ Object2.Isxingming == null )
			{
				equal = false;
			}
			if ( Object1.Iskm != null && Object2.Iskm != null )
			{
				if (Object1.Iskm != Object2.Iskm)
					equal = false;
			}
			else if (Object1.Iskm == null ^ Object2.Iskm == null )
			{
				equal = false;
			}
			if ( Object1.Score != null && Object2.Score != null )
			{
				if (Object1.Score != Object2.Score)
					equal = false;
			}
			else if (Object1.Score == null ^ Object2.Score == null )
			{
				equal = false;
			}
			if ( Object1.Closed != null && Object2.Closed != null )
			{
				if (Object1.Closed != Object2.Closed)
					equal = false;
			}
			else if (Object1.Closed == null ^ Object2.Closed == null )
			{
				equal = false;
			}
			if ( Object1.Isdescore != null && Object2.Isdescore != null )
			{
				if (Object1.Isdescore != Object2.Isdescore)
					equal = false;
			}
			else if (Object1.Isdescore == null ^ Object2.Isdescore == null )
			{
				equal = false;
			}
			if ( Object1.Opentime != null && Object2.Opentime != null )
			{
				if (Object1.Opentime != Object2.Opentime)
					equal = false;
			}
			else if (Object1.Opentime == null ^ Object2.Opentime == null )
			{
				equal = false;
			}
			if ( Object1.Closedtime != null && Object2.Closedtime != null )
			{
				if (Object1.Closedtime != Object2.Closedtime)
					equal = false;
			}
			else if (Object1.Closedtime == null ^ Object2.Closedtime == null )
			{
				equal = false;
			}
			if ( Object1.Replytimes != null && Object2.Replytimes != null )
			{
				if (Object1.Replytimes != Object2.Replytimes)
					equal = false;
			}
			else if (Object1.Replytimes == null ^ Object2.Replytimes == null )
			{
				equal = false;
			}
			if ( Object1.Owner != null && Object2.Owner != null )
			{
				if (Object1.Owner != Object2.Owner)
					equal = false;
			}
			else if (Object1.Owner == null ^ Object2.Owner == null )
			{
				equal = false;
			}
			if ( Object1.Modality != null && Object2.Modality != null )
			{
				if (Object1.Modality != Object2.Modality)
					equal = false;
			}
			else if (Object1.Modality == null ^ Object2.Modality == null )
			{
				equal = false;
			}
			if ( Object1.Groupid != null && Object2.Groupid != null )
			{
				if (Object1.Groupid != Object2.Groupid)
					equal = false;
			}
			else if (Object1.Groupid == null ^ Object2.Groupid == null )
			{
				equal = false;
			}
			if ( Object1.Isopen != null && Object2.Isopen != null )
			{
				if (Object1.Isopen != Object2.Isopen)
					equal = false;
			}
			else if (Object1.Isopen == null ^ Object2.Isopen == null )
			{
				equal = false;
			}
			if ( Object1.Issue != null && Object2.Issue != null )
			{
				if (Object1.Issue != Object2.Issue)
					equal = false;
			}
			else if (Object1.Issue == null ^ Object2.Issue == null )
			{
				equal = false;
			}
			if ( Object1.Askkm != null && Object2.Askkm != null )
			{
				if (Object1.Askkm != Object2.Askkm)
					equal = false;
			}
			else if (Object1.Askkm == null ^ Object2.Askkm == null )
			{
				equal = false;
			}
			if ( Object1.Expert != null && Object2.Expert != null )
			{
				if (Object1.Expert != Object2.Expert)
					equal = false;
			}
			else if (Object1.Expert == null ^ Object2.Expert == null )
			{
				equal = false;
			}
			if ( Object1.Classid != null && Object2.Classid != null )
			{
				if (Object1.Classid != Object2.Classid)
					equal = false;
			}
			else if (Object1.Classid == null ^ Object2.Classid == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((VuNewpostBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static VuNewpostComparer GetComparer()
        {
            return new VuNewpostComparer();
        }
        */

        // Comparer delegates back to VuNewpost
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(VuNewpost rhs, VuNewpostColumn which)
        {
            switch (which)
            {
            	
            	
            	case VuNewpostColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case VuNewpostColumn.SafeNameObject:
            		return this.SafeNameObject.CompareTo(rhs.SafeNameObject);
            		
            		                 
            	
            	
            	case VuNewpostColumn.Conent:
            		return this.Conent.CompareTo(rhs.Conent);
            		
            		                 
            	
            	
            	case VuNewpostColumn.Spokerman:
            		return this.Spokerman.CompareTo(rhs.Spokerman);
            		
            		                 
            	
            	
            	case VuNewpostColumn.Sso:
            		return this.Sso.CompareTo(rhs.Sso);
            		
            		                 
            	
            	
            	case VuNewpostColumn.Popularity:
            		return this.Popularity.Value.CompareTo(rhs.Popularity.Value);
            		
            		                 
            	
            	
            	case VuNewpostColumn.Replynum:
            		return this.Replynum.Value.CompareTo(rhs.Replynum.Value);
            		
            		                 
            	
            	
            	case VuNewpostColumn.Replyman:
            		return this.Replyman.CompareTo(rhs.Replyman);
            		
            		                 
            	
            	
            	case VuNewpostColumn.Time:
            		return this.Time.Value.CompareTo(rhs.Time.Value);
            		
            		                 
            	
            	
            	case VuNewpostColumn.Lasttime:
            		return this.Lasttime.Value.CompareTo(rhs.Lasttime.Value);
            		
            		                 
            	
            	
            	case VuNewpostColumn.Tupian:
            		return this.Tupian.CompareTo(rhs.Tupian);
            		
            		                 
            	
            	
            	case VuNewpostColumn.Fujian:
            		return this.Fujian.CompareTo(rhs.Fujian);
            		
            		                 
            	
            	
            	case VuNewpostColumn.Icon:
            		return this.Icon.CompareTo(rhs.Icon);
            		
            		                 
            	
            	
            	case VuNewpostColumn.Isgreat:
            		return this.Isgreat.Value.CompareTo(rhs.Isgreat.Value);
            		
            		                 
            	
            	
            	case VuNewpostColumn.Updatetime:
            		return this.Updatetime.Value.CompareTo(rhs.Updatetime.Value);
            		
            		                 
            	
            	
            	case VuNewpostColumn.Catogary:
            		return this.Catogary.CompareTo(rhs.Catogary);
            		
            		                 
            	
            	
            	case VuNewpostColumn.Istop:
            		return this.Istop.Value.CompareTo(rhs.Istop.Value);
            		
            		                 
            	
            	
            	case VuNewpostColumn.Isxingming:
            		return this.Isxingming.Value.CompareTo(rhs.Isxingming.Value);
            		
            		                 
            	
            	
            	case VuNewpostColumn.Iskm:
            		return this.Iskm.Value.CompareTo(rhs.Iskm.Value);
            		
            		                 
            	
            	
            	case VuNewpostColumn.Score:
            		return this.Score.Value.CompareTo(rhs.Score.Value);
            		
            		                 
            	
            	
            	case VuNewpostColumn.Closed:
            		return this.Closed.Value.CompareTo(rhs.Closed.Value);
            		
            		                 
            	
            	
            	case VuNewpostColumn.Isdescore:
            		return this.Isdescore.Value.CompareTo(rhs.Isdescore.Value);
            		
            		                 
            	
            	
            	case VuNewpostColumn.Opentime:
            		return this.Opentime.Value.CompareTo(rhs.Opentime.Value);
            		
            		                 
            	
            	
            	case VuNewpostColumn.Closedtime:
            		return this.Closedtime.Value.CompareTo(rhs.Closedtime.Value);
            		
            		                 
            	
            	
            	case VuNewpostColumn.Replytimes:
            		return this.Replytimes.Value.CompareTo(rhs.Replytimes.Value);
            		
            		                 
            	
            	
            	case VuNewpostColumn.Owner:
            		return this.Owner.CompareTo(rhs.Owner);
            		
            		                 
            	
            	
            	case VuNewpostColumn.Modality:
            		return this.Modality.CompareTo(rhs.Modality);
            		
            		                 
            	
            	
            	case VuNewpostColumn.Groupid:
            		return this.Groupid.Value.CompareTo(rhs.Groupid.Value);
            		
            		                 
            	
            	
            	case VuNewpostColumn.Isopen:
            		return this.Isopen.Value.CompareTo(rhs.Isopen.Value);
            		
            		                 
            	
            	
            	case VuNewpostColumn.Issue:
            		return this.Issue.Value.CompareTo(rhs.Issue.Value);
            		
            		                 
            	
            	
            	case VuNewpostColumn.Askkm:
            		return this.Askkm.Value.CompareTo(rhs.Askkm.Value);
            		
            		                 
            	
            	
            	case VuNewpostColumn.Expert:
            		return this.Expert.CompareTo(rhs.Expert);
            		
            		                 
            	
            	
            	case VuNewpostColumn.Classid:
            		return this.Classid.CompareTo(rhs.Classid);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<VuNewpostKey> Members
		
		// member variable for the EntityId property
		private VuNewpostKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual VuNewpostKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new VuNewpostKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("VuNewpost")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{34}{33}- Id: {0}{33}- SafeNameObject: {1}{33}- Conent: {2}{33}- Spokerman: {3}{33}- Sso: {4}{33}- Popularity: {5}{33}- Replynum: {6}{33}- Replyman: {7}{33}- Time: {8}{33}- Lasttime: {9}{33}- Tupian: {10}{33}- Fujian: {11}{33}- Icon: {12}{33}- Isgreat: {13}{33}- Updatetime: {14}{33}- Catogary: {15}{33}- Istop: {16}{33}- Isxingming: {17}{33}- Iskm: {18}{33}- Score: {19}{33}- Closed: {20}{33}- Isdescore: {21}{33}- Opentime: {22}{33}- Closedtime: {23}{33}- Replytimes: {24}{33}- Owner: {25}{33}- Modality: {26}{33}- Groupid: {27}{33}- Isopen: {28}{33}- Issue: {29}{33}- Askkm: {30}{33}- Expert: {31}{33}- Classid: {32}{33}{35}", 
				this.Id,
				(this.SafeNameObject == null) ? string.Empty : this.SafeNameObject.ToString(),
				(this.Conent == null) ? string.Empty : this.Conent.ToString(),
				(this.Spokerman == null) ? string.Empty : this.Spokerman.ToString(),
				(this.Sso == null) ? string.Empty : this.Sso.ToString(),
				(this.Popularity == null) ? string.Empty : this.Popularity.ToString(),
				(this.Replynum == null) ? string.Empty : this.Replynum.ToString(),
				(this.Replyman == null) ? string.Empty : this.Replyman.ToString(),
				(this.Time == null) ? string.Empty : this.Time.ToString(),
				(this.Lasttime == null) ? string.Empty : this.Lasttime.ToString(),
				(this.Tupian == null) ? string.Empty : this.Tupian.ToString(),
				(this.Fujian == null) ? string.Empty : this.Fujian.ToString(),
				(this.Icon == null) ? string.Empty : this.Icon.ToString(),
				(this.Isgreat == null) ? string.Empty : this.Isgreat.ToString(),
				(this.Updatetime == null) ? string.Empty : this.Updatetime.ToString(),
				(this.Catogary == null) ? string.Empty : this.Catogary.ToString(),
				(this.Istop == null) ? string.Empty : this.Istop.ToString(),
				(this.Isxingming == null) ? string.Empty : this.Isxingming.ToString(),
				(this.Iskm == null) ? string.Empty : this.Iskm.ToString(),
				(this.Score == null) ? string.Empty : this.Score.ToString(),
				(this.Closed == null) ? string.Empty : this.Closed.ToString(),
				(this.Isdescore == null) ? string.Empty : this.Isdescore.ToString(),
				(this.Opentime == null) ? string.Empty : this.Opentime.ToString(),
				(this.Closedtime == null) ? string.Empty : this.Closedtime.ToString(),
				(this.Replytimes == null) ? string.Empty : this.Replytimes.ToString(),
				(this.Owner == null) ? string.Empty : this.Owner.ToString(),
				(this.Modality == null) ? string.Empty : this.Modality.ToString(),
				(this.Groupid == null) ? string.Empty : this.Groupid.ToString(),
				(this.Isopen == null) ? string.Empty : this.Isopen.ToString(),
				(this.Issue == null) ? string.Empty : this.Issue.ToString(),
				(this.Askkm == null) ? string.Empty : this.Askkm.ToString(),
				(this.Expert == null) ? string.Empty : this.Expert.ToString(),
				(this.Classid == null) ? string.Empty : this.Classid.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'VU_NEWPOST' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class VuNewpostEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "VU_NEWPOST"</remarks>
		public System.Int32 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// OBJECT : 
		/// </summary>
		public System.String		  SafeNameObject = null;
		
		/// <summary>
		/// CONENT : 
		/// </summary>
		public System.String		  Conent = null;
		
		/// <summary>
		/// SPOKERMAN : 
		/// </summary>
		public System.String		  Spokerman = null;
		
		/// <summary>
		/// SSO : 
		/// </summary>
		public System.String		  Sso = null;
		
		/// <summary>
		/// POPULARITY : 
		/// </summary>
		public System.Int32?		  Popularity = null;
		
		/// <summary>
		/// REPLYNUM : 
		/// </summary>
		public System.Int32?		  Replynum = null;
		
		/// <summary>
		/// REPLYMAN : 
		/// </summary>
		public System.String		  Replyman = null;
		
		/// <summary>
		/// time : 
		/// </summary>
		public System.DateTime?		  Time = null;
		
		/// <summary>
		/// lasttime : 
		/// </summary>
		public System.DateTime?		  Lasttime = null;
		
		/// <summary>
		/// tupian : 
		/// </summary>
		public System.String		  Tupian = null;
		
		/// <summary>
		/// fujian : 
		/// </summary>
		public System.String		  Fujian = null;
		
		/// <summary>
		/// icon : 
		/// </summary>
		public System.String		  Icon = null;
		
		/// <summary>
		/// isgreat : 
		/// </summary>
		public System.Int32?		  Isgreat = null;
		
		/// <summary>
		/// updatetime : 
		/// </summary>
		public System.DateTime?		  Updatetime = null;
		
		/// <summary>
		/// catogary : 
		/// </summary>
		public System.String		  Catogary = null;
		
		/// <summary>
		/// istop : 
		/// </summary>
		public System.Int32?		  Istop = null;
		
		/// <summary>
		/// isxingming : 
		/// </summary>
		public System.Int32?		  Isxingming = null;
		
		/// <summary>
		/// iskm : 
		/// </summary>
		public System.Int32?		  Iskm = null;
		
		/// <summary>
		/// score : 
		/// </summary>
		public System.Decimal?		  Score = null;
		
		/// <summary>
		/// closed : 
		/// </summary>
		public System.Int32?		  Closed = null;
		
		/// <summary>
		/// isdescore : 
		/// </summary>
		public System.Int32?		  Isdescore = null;
		
		/// <summary>
		/// opentime : 
		/// </summary>
		public System.DateTime?		  Opentime = null;
		
		/// <summary>
		/// closedtime : 
		/// </summary>
		public System.DateTime?		  Closedtime = null;
		
		/// <summary>
		/// replytimes : 
		/// </summary>
		public System.Int32?		  Replytimes = null;
		
		/// <summary>
		/// owner : 
		/// </summary>
		public System.String		  Owner = null;
		
		/// <summary>
		/// modality : 
		/// </summary>
		public System.String		  Modality = null;
		
		/// <summary>
		/// groupid : 
		/// </summary>
		public System.Int32?		  Groupid = null;
		
		/// <summary>
		/// isopen : 
		/// </summary>
		public System.Int32?		  Isopen = null;
		
		/// <summary>
		/// issue : 
		/// </summary>
		public System.Int32?		  Issue = null;
		
		/// <summary>
		/// askkm : 
		/// </summary>
		public System.Int32?		  Askkm = null;
		
		/// <summary>
		/// expert : 
		/// </summary>
		public System.String		  Expert = null;
		
		/// <summary>
		/// classid : 
		/// </summary>
		public System.String		  Classid = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			VuNewpostEntityData _tmp = new VuNewpostEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.SafeNameObject = this.SafeNameObject;
			_tmp.Conent = this.Conent;
			_tmp.Spokerman = this.Spokerman;
			_tmp.Sso = this.Sso;
			_tmp.Popularity = this.Popularity;
			_tmp.Replynum = this.Replynum;
			_tmp.Replyman = this.Replyman;
			_tmp.Time = this.Time;
			_tmp.Lasttime = this.Lasttime;
			_tmp.Tupian = this.Tupian;
			_tmp.Fujian = this.Fujian;
			_tmp.Icon = this.Icon;
			_tmp.Isgreat = this.Isgreat;
			_tmp.Updatetime = this.Updatetime;
			_tmp.Catogary = this.Catogary;
			_tmp.Istop = this.Istop;
			_tmp.Isxingming = this.Isxingming;
			_tmp.Iskm = this.Iskm;
			_tmp.Score = this.Score;
			_tmp.Closed = this.Closed;
			_tmp.Isdescore = this.Isdescore;
			_tmp.Opentime = this.Opentime;
			_tmp.Closedtime = this.Closedtime;
			_tmp.Replytimes = this.Replytimes;
			_tmp.Owner = this.Owner;
			_tmp.Modality = this.Modality;
			_tmp.Groupid = this.Groupid;
			_tmp.Isopen = this.Isopen;
			_tmp.Issue = this.Issue;
			_tmp.Askkm = this.Askkm;
			_tmp.Expert = this.Expert;
			_tmp.Classid = this.Classid;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			VuNewpostEntityData _tmp = new VuNewpostEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.SafeNameObject = this.SafeNameObject;
			_tmp.Conent = this.Conent;
			_tmp.Spokerman = this.Spokerman;
			_tmp.Sso = this.Sso;
			_tmp.Popularity = this.Popularity;
			_tmp.Replynum = this.Replynum;
			_tmp.Replyman = this.Replyman;
			_tmp.Time = this.Time;
			_tmp.Lasttime = this.Lasttime;
			_tmp.Tupian = this.Tupian;
			_tmp.Fujian = this.Fujian;
			_tmp.Icon = this.Icon;
			_tmp.Isgreat = this.Isgreat;
			_tmp.Updatetime = this.Updatetime;
			_tmp.Catogary = this.Catogary;
			_tmp.Istop = this.Istop;
			_tmp.Isxingming = this.Isxingming;
			_tmp.Iskm = this.Iskm;
			_tmp.Score = this.Score;
			_tmp.Closed = this.Closed;
			_tmp.Isdescore = this.Isdescore;
			_tmp.Opentime = this.Opentime;
			_tmp.Closedtime = this.Closedtime;
			_tmp.Replytimes = this.Replytimes;
			_tmp.Owner = this.Owner;
			_tmp.Modality = this.Modality;
			_tmp.Groupid = this.Groupid;
			_tmp.Isopen = this.Isopen;
			_tmp.Issue = this.Issue;
			_tmp.Askkm = this.Askkm;
			_tmp.Expert = this.Expert;
			_tmp.Classid = this.Classid;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="VuNewpostColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(VuNewpostColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="VuNewpostColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(VuNewpostColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="VuNewpostColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(VuNewpostColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				VuNewpostEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new VuNewpostEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="VuNewpostColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(VuNewpostColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				VuNewpostEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new VuNewpostEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region VuNewpostEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="VuNewpost"/> object.
	/// </remarks>
	public class VuNewpostEventArgs : System.EventArgs
	{
		private VuNewpostColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the VuNewpostEventArgs class.
		///</summary>
		public VuNewpostEventArgs(VuNewpostColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the VuNewpostEventArgs class.
		///</summary>
		public VuNewpostEventArgs(VuNewpostColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The VuNewpostColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="VuNewpostColumn" />
		public VuNewpostColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all VuNewpost related events.
	///</summary>
	public delegate void VuNewpostEventHandler(object sender, VuNewpostEventArgs e);
	
	#region VuNewpostComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class VuNewpostComparer : System.Collections.Generic.IComparer<VuNewpost>
	{
		VuNewpostColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:VuNewpostComparer"/> class.
        /// </summary>
		public VuNewpostComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:VuNewpostComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public VuNewpostComparer(VuNewpostColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="VuNewpost"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="VuNewpost"/> to compare.</param>
        /// <param name="b">The second <c>VuNewpost</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(VuNewpost a, VuNewpost b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(VuNewpost entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(VuNewpost a, VuNewpost b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public VuNewpostColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region VuNewpostKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="VuNewpost"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class VuNewpostKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the VuNewpostKey class.
		/// </summary>
		public VuNewpostKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the VuNewpostKey class.
		/// </summary>
		public VuNewpostKey(VuNewpostBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the VuNewpostKey class.
		/// </summary>
		public VuNewpostKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private VuNewpostBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public VuNewpostBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region VuNewpostColumn Enum
	
	/// <summary>
	/// Enumerate the VuNewpost columns.
	/// </summary>
	[Serializable]
	public enum VuNewpostColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// SafeNameObject : 
		/// </summary>
		[EnumTextValue("OBJECT")]
		[ColumnEnum("OBJECT", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		SafeNameObject = 2,
		/// <summary>
		/// Conent : 
		/// </summary>
		[EnumTextValue("CONENT")]
		[ColumnEnum("CONENT", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Conent = 3,
		/// <summary>
		/// Spokerman : 
		/// </summary>
		[EnumTextValue("SPOKERMAN")]
		[ColumnEnum("SPOKERMAN", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Spokerman = 4,
		/// <summary>
		/// Sso : 
		/// </summary>
		[EnumTextValue("SSO")]
		[ColumnEnum("SSO", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Sso = 5,
		/// <summary>
		/// Popularity : 
		/// </summary>
		[EnumTextValue("POPULARITY")]
		[ColumnEnum("POPULARITY", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Popularity = 6,
		/// <summary>
		/// Replynum : 
		/// </summary>
		[EnumTextValue("REPLYNUM")]
		[ColumnEnum("REPLYNUM", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Replynum = 7,
		/// <summary>
		/// Replyman : 
		/// </summary>
		[EnumTextValue("REPLYMAN")]
		[ColumnEnum("REPLYMAN", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Replyman = 8,
		/// <summary>
		/// Time : 
		/// </summary>
		[EnumTextValue("time")]
		[ColumnEnum("time", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		Time = 9,
		/// <summary>
		/// Lasttime : 
		/// </summary>
		[EnumTextValue("lasttime")]
		[ColumnEnum("lasttime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		Lasttime = 10,
		/// <summary>
		/// Tupian : 
		/// </summary>
		[EnumTextValue("tupian")]
		[ColumnEnum("tupian", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Tupian = 11,
		/// <summary>
		/// Fujian : 
		/// </summary>
		[EnumTextValue("fujian")]
		[ColumnEnum("fujian", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Fujian = 12,
		/// <summary>
		/// Icon : 
		/// </summary>
		[EnumTextValue("icon")]
		[ColumnEnum("icon", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Icon = 13,
		/// <summary>
		/// Isgreat : 
		/// </summary>
		[EnumTextValue("isgreat")]
		[ColumnEnum("isgreat", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Isgreat = 14,
		/// <summary>
		/// Updatetime : 
		/// </summary>
		[EnumTextValue("updatetime")]
		[ColumnEnum("updatetime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		Updatetime = 15,
		/// <summary>
		/// Catogary : 
		/// </summary>
		[EnumTextValue("catogary")]
		[ColumnEnum("catogary", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Catogary = 16,
		/// <summary>
		/// Istop : 
		/// </summary>
		[EnumTextValue("istop")]
		[ColumnEnum("istop", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Istop = 17,
		/// <summary>
		/// Isxingming : 
		/// </summary>
		[EnumTextValue("isxingming")]
		[ColumnEnum("isxingming", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Isxingming = 18,
		/// <summary>
		/// Iskm : 
		/// </summary>
		[EnumTextValue("iskm")]
		[ColumnEnum("iskm", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Iskm = 19,
		/// <summary>
		/// Score : 
		/// </summary>
		[EnumTextValue("score")]
		[ColumnEnum("score", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Score = 20,
		/// <summary>
		/// Closed : 
		/// </summary>
		[EnumTextValue("closed")]
		[ColumnEnum("closed", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Closed = 21,
		/// <summary>
		/// Isdescore : 
		/// </summary>
		[EnumTextValue("isdescore")]
		[ColumnEnum("isdescore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Isdescore = 22,
		/// <summary>
		/// Opentime : 
		/// </summary>
		[EnumTextValue("opentime")]
		[ColumnEnum("opentime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		Opentime = 23,
		/// <summary>
		/// Closedtime : 
		/// </summary>
		[EnumTextValue("closedtime")]
		[ColumnEnum("closedtime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		Closedtime = 24,
		/// <summary>
		/// Replytimes : 
		/// </summary>
		[EnumTextValue("replytimes")]
		[ColumnEnum("replytimes", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Replytimes = 25,
		/// <summary>
		/// Owner : 
		/// </summary>
		[EnumTextValue("owner")]
		[ColumnEnum("owner", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Owner = 26,
		/// <summary>
		/// Modality : 
		/// </summary>
		[EnumTextValue("modality")]
		[ColumnEnum("modality", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Modality = 27,
		/// <summary>
		/// Groupid : 
		/// </summary>
		[EnumTextValue("groupid")]
		[ColumnEnum("groupid", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Groupid = 28,
		/// <summary>
		/// Isopen : 
		/// </summary>
		[EnumTextValue("isopen")]
		[ColumnEnum("isopen", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Isopen = 29,
		/// <summary>
		/// Issue : 
		/// </summary>
		[EnumTextValue("issue")]
		[ColumnEnum("issue", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Issue = 30,
		/// <summary>
		/// Askkm : 
		/// </summary>
		[EnumTextValue("askkm")]
		[ColumnEnum("askkm", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Askkm = 31,
		/// <summary>
		/// Expert : 
		/// </summary>
		[EnumTextValue("expert")]
		[ColumnEnum("expert", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, true, 10)]
		Expert = 32,
		/// <summary>
		/// Classid : 
		/// </summary>
		[EnumTextValue("classid")]
		[ColumnEnum("classid", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 10)]
		Classid = 33
	}//End enum

	#endregion VuNewpostColumn Enum

} // end namespace
