/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file VwStudentCourseRelation.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace GE.MyLearning.BL
{
	///<summary>
	/// An object representation of the 'VW_StudentCourseRelation' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("VwStudentCourseRelationBase")]
	public abstract partial class VwStudentCourseRelationBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// StudentID : 
		/// </summary>
		private System.Int32		  _studentId = (int)0;
		
		/// <summary>
		/// StudentNote : 
		/// </summary>
		private System.String		  _studentNote = null;
		
		/// <summary>
		/// studies : 
		/// </summary>
		private System.Int32		  _studies = (int)0;
		
		/// <summary>
		/// UserID : 
		/// </summary>
		private System.String		  _userId = string.Empty;
		
		/// <summary>
		/// UserName : 
		/// </summary>
		private System.String		  _userName = null;
		
		/// <summary>
		/// UserCNName : 
		/// </summary>
		private System.String		  _userCnName = string.Empty;
		
		/// <summary>
		/// AutoID : 
		/// </summary>
		private System.Int32		  _autoId = (int)0;
		
		/// <summary>
		/// Updatetime : 
		/// </summary>
		private System.DateTime?		  _updatetime = null;
		
		/// <summary>
		/// CredentialsStyle : 
		/// </summary>
		private System.Int32?		  _credentialsStyle = null;
		
		/// <summary>
		/// DegreeID : 
		/// </summary>
		private System.Int32		  _degreeId = (int)0;
		
		/// <summary>
		/// degreeCourseID : 
		/// </summary>
		private System.Int32		  _degreeCourseId = (int)0;
		
		/// <summary>
		/// StudentStatus : 
		/// </summary>
		private System.Int32		  _studentStatus = (int)0;
		
		/// <summary>
		/// FEBadgeID : 
		/// </summary>
		private System.String		  _feBadgeId = string.Empty;
		
		/// <summary>
		/// AttachmentFileStyle : 
		/// </summary>
		private System.String		  _attachmentFileStyle = null;
		
		/// <summary>
		/// AttachmentFilePath : 
		/// </summary>
		private System.String		  _attachmentFilePath = null;
		
		/// <summary>
		/// courseID : 
		/// </summary>
		private System.String		  _courseId = null;
		
		/// <summary>
		/// UpdateUserID : 
		/// </summary>
		private System.String		  _updateUserId = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="VwStudentCourseRelationBase"/> instance.
		///</summary>
		public VwStudentCourseRelationBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="VwStudentCourseRelationBase"/> instance.
		///</summary>
		///<param name="_studentId"></param>
		///<param name="_studentNote"></param>
		///<param name="_studies"></param>
		///<param name="_userId"></param>
		///<param name="_userName"></param>
		///<param name="_userCnName"></param>
		///<param name="_autoId"></param>
		///<param name="_updatetime"></param>
		///<param name="_credentialsStyle"></param>
		///<param name="_degreeId"></param>
		///<param name="_degreeCourseId"></param>
		///<param name="_studentStatus"></param>
		///<param name="_feBadgeId"></param>
		///<param name="_attachmentFileStyle"></param>
		///<param name="_attachmentFilePath"></param>
		///<param name="_courseId"></param>
		///<param name="_updateUserId"></param>
		public VwStudentCourseRelationBase(System.Int32 _studentId, System.String _studentNote, System.Int32 _studies, System.String _userId, System.String _userName, System.String _userCnName, System.Int32 _autoId, System.DateTime? _updatetime, System.Int32? _credentialsStyle, System.Int32 _degreeId, System.Int32 _degreeCourseId, System.Int32 _studentStatus, System.String _feBadgeId, System.String _attachmentFileStyle, System.String _attachmentFilePath, System.String _courseId, System.String _updateUserId)
		{
			this._studentId = _studentId;
			this._studentNote = _studentNote;
			this._studies = _studies;
			this._userId = _userId;
			this._userName = _userName;
			this._userCnName = _userCnName;
			this._autoId = _autoId;
			this._updatetime = _updatetime;
			this._credentialsStyle = _credentialsStyle;
			this._degreeId = _degreeId;
			this._degreeCourseId = _degreeCourseId;
			this._studentStatus = _studentStatus;
			this._feBadgeId = _feBadgeId;
			this._attachmentFileStyle = _attachmentFileStyle;
			this._attachmentFilePath = _attachmentFilePath;
			this._courseId = _courseId;
			this._updateUserId = _updateUserId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="VwStudentCourseRelation"/> instance.
		///</summary>
		///<param name="_studentId"></param>
		///<param name="_studentNote"></param>
		///<param name="_studies"></param>
		///<param name="_userId"></param>
		///<param name="_userName"></param>
		///<param name="_userCnName"></param>
		///<param name="_autoId"></param>
		///<param name="_updatetime"></param>
		///<param name="_credentialsStyle"></param>
		///<param name="_degreeId"></param>
		///<param name="_degreeCourseId"></param>
		///<param name="_studentStatus"></param>
		///<param name="_feBadgeId"></param>
		///<param name="_attachmentFileStyle"></param>
		///<param name="_attachmentFilePath"></param>
		///<param name="_courseId"></param>
		///<param name="_updateUserId"></param>
		public static VwStudentCourseRelation CreateVwStudentCourseRelation(System.Int32 _studentId, System.String _studentNote, System.Int32 _studies, System.String _userId, System.String _userName, System.String _userCnName, System.Int32 _autoId, System.DateTime? _updatetime, System.Int32? _credentialsStyle, System.Int32 _degreeId, System.Int32 _degreeCourseId, System.Int32 _studentStatus, System.String _feBadgeId, System.String _attachmentFileStyle, System.String _attachmentFilePath, System.String _courseId, System.String _updateUserId)
		{
			VwStudentCourseRelation newVwStudentCourseRelation = new VwStudentCourseRelation();
			newVwStudentCourseRelation.StudentId = _studentId;
			newVwStudentCourseRelation.StudentNote = _studentNote;
			newVwStudentCourseRelation.Studies = _studies;
			newVwStudentCourseRelation.UserId = _userId;
			newVwStudentCourseRelation.UserName = _userName;
			newVwStudentCourseRelation.UserCnName = _userCnName;
			newVwStudentCourseRelation.AutoId = _autoId;
			newVwStudentCourseRelation.Updatetime = _updatetime;
			newVwStudentCourseRelation.CredentialsStyle = _credentialsStyle;
			newVwStudentCourseRelation.DegreeId = _degreeId;
			newVwStudentCourseRelation.DegreeCourseId = _degreeCourseId;
			newVwStudentCourseRelation.StudentStatus = _studentStatus;
			newVwStudentCourseRelation.FeBadgeId = _feBadgeId;
			newVwStudentCourseRelation.AttachmentFileStyle = _attachmentFileStyle;
			newVwStudentCourseRelation.AttachmentFilePath = _attachmentFilePath;
			newVwStudentCourseRelation.CourseId = _courseId;
			newVwStudentCourseRelation.UpdateUserId = _updateUserId;
			return newVwStudentCourseRelation;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the StudentID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 StudentId
		{
			get
			{
				return this._studentId; 
			}
			set
			{
				if (_studentId == value)
					return;
					
				this._studentId = value;
				this._isDirty = true;
				
				OnPropertyChanged("StudentId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the StudentNote property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String StudentNote
		{
			get
			{
				return this._studentNote; 
			}
			set
			{
				if (_studentNote == value)
					return;
					
				this._studentNote = value;
				this._isDirty = true;
				
				OnPropertyChanged("StudentNote");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the studies property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 Studies
		{
			get
			{
				return this._studies; 
			}
			set
			{
				if (_studies == value)
					return;
					
				this._studies = value;
				this._isDirty = true;
				
				OnPropertyChanged("Studies");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the UserID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String UserId
		{
			get
			{
				return this._userId; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "UserId does not allow null values.");
				if (_userId == value)
					return;
					
				this._userId = value;
				this._isDirty = true;
				
				OnPropertyChanged("UserId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the UserName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String UserName
		{
			get
			{
				return this._userName; 
			}
			set
			{
				if (_userName == value)
					return;
					
				this._userName = value;
				this._isDirty = true;
				
				OnPropertyChanged("UserName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the UserCNName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String UserCnName
		{
			get
			{
				return this._userCnName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "UserCnName does not allow null values.");
				if (_userCnName == value)
					return;
					
				this._userCnName = value;
				this._isDirty = true;
				
				OnPropertyChanged("UserCnName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the AutoID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 AutoId
		{
			get
			{
				return this._autoId; 
			}
			set
			{
				if (_autoId == value)
					return;
					
				this._autoId = value;
				this._isDirty = true;
				
				OnPropertyChanged("AutoId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Updatetime property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsUpdatetimeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? Updatetime
		{
			get
			{
				return this._updatetime; 
			}
			set
			{
				if (_updatetime == value && Updatetime != null )
					return;
					
				this._updatetime = value;
				this._isDirty = true;
				
				OnPropertyChanged("Updatetime");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CredentialsStyle property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCredentialsStyleNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? CredentialsStyle
		{
			get
			{
				return this._credentialsStyle; 
			}
			set
			{
				if (_credentialsStyle == value && CredentialsStyle != null )
					return;
					
				this._credentialsStyle = value;
				this._isDirty = true;
				
				OnPropertyChanged("CredentialsStyle");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DegreeID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 DegreeId
		{
			get
			{
				return this._degreeId; 
			}
			set
			{
				if (_degreeId == value)
					return;
					
				this._degreeId = value;
				this._isDirty = true;
				
				OnPropertyChanged("DegreeId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the degreeCourseID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 DegreeCourseId
		{
			get
			{
				return this._degreeCourseId; 
			}
			set
			{
				if (_degreeCourseId == value)
					return;
					
				this._degreeCourseId = value;
				this._isDirty = true;
				
				OnPropertyChanged("DegreeCourseId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the StudentStatus property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 StudentStatus
		{
			get
			{
				return this._studentStatus; 
			}
			set
			{
				if (_studentStatus == value)
					return;
					
				this._studentStatus = value;
				this._isDirty = true;
				
				OnPropertyChanged("StudentStatus");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the FEBadgeID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String FeBadgeId
		{
			get
			{
				return this._feBadgeId; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "FeBadgeId does not allow null values.");
				if (_feBadgeId == value)
					return;
					
				this._feBadgeId = value;
				this._isDirty = true;
				
				OnPropertyChanged("FeBadgeId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the AttachmentFileStyle property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String AttachmentFileStyle
		{
			get
			{
				return this._attachmentFileStyle; 
			}
			set
			{
				if (_attachmentFileStyle == value)
					return;
					
				this._attachmentFileStyle = value;
				this._isDirty = true;
				
				OnPropertyChanged("AttachmentFileStyle");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the AttachmentFilePath property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String AttachmentFilePath
		{
			get
			{
				return this._attachmentFilePath; 
			}
			set
			{
				if (_attachmentFilePath == value)
					return;
					
				this._attachmentFilePath = value;
				this._isDirty = true;
				
				OnPropertyChanged("AttachmentFilePath");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the courseID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CourseId
		{
			get
			{
				return this._courseId; 
			}
			set
			{
				if (_courseId == value)
					return;
					
				this._courseId = value;
				this._isDirty = true;
				
				OnPropertyChanged("CourseId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the UpdateUserID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String UpdateUserId
		{
			get
			{
				return this._updateUserId; 
			}
			set
			{
				if (_updateUserId == value)
					return;
					
				this._updateUserId = value;
				this._isDirty = true;
				
				OnPropertyChanged("UpdateUserId");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "VW_StudentCourseRelation"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed VwStudentCourseRelationBase Entity 
		///</summary>
		public virtual VwStudentCourseRelationBase Copy()
		{
			//shallow copy entity
			VwStudentCourseRelation copy = new VwStudentCourseRelation();
				copy.StudentId = this.StudentId;
				copy.StudentNote = this.StudentNote;
				copy.Studies = this.Studies;
				copy.UserId = this.UserId;
				copy.UserName = this.UserName;
				copy.UserCnName = this.UserCnName;
				copy.AutoId = this.AutoId;
				copy.Updatetime = this.Updatetime;
				copy.CredentialsStyle = this.CredentialsStyle;
				copy.DegreeId = this.DegreeId;
				copy.DegreeCourseId = this.DegreeCourseId;
				copy.StudentStatus = this.StudentStatus;
				copy.FeBadgeId = this.FeBadgeId;
				copy.AttachmentFileStyle = this.AttachmentFileStyle;
				copy.AttachmentFilePath = this.AttachmentFilePath;
				copy.CourseId = this.CourseId;
				copy.UpdateUserId = this.UpdateUserId;
			copy.AcceptChanges();
			return (VwStudentCourseRelation)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="VwStudentCourseRelationBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(VwStudentCourseRelationBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="VwStudentCourseRelationBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="VwStudentCourseRelationBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="VwStudentCourseRelationBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(VwStudentCourseRelationBase Object1, VwStudentCourseRelationBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.StudentId != Object2.StudentId)
				equal = false;
			if (Object1.StudentNote != null && Object2.StudentNote != null )
			{
				if (Object1.StudentNote != Object2.StudentNote)
					equal = false;
			}
			else if (Object1.StudentNote == null ^ Object1.StudentNote == null )
			{
				equal = false;
			}
			if (Object1.Studies != Object2.Studies)
				equal = false;
			if (Object1.UserId != Object2.UserId)
				equal = false;
			if (Object1.UserName != null && Object2.UserName != null )
			{
				if (Object1.UserName != Object2.UserName)
					equal = false;
			}
			else if (Object1.UserName == null ^ Object1.UserName == null )
			{
				equal = false;
			}
			if (Object1.UserCnName != Object2.UserCnName)
				equal = false;
			if (Object1.AutoId != Object2.AutoId)
				equal = false;
			if (Object1.Updatetime != null && Object2.Updatetime != null )
			{
				if (Object1.Updatetime != Object2.Updatetime)
					equal = false;
			}
			else if (Object1.Updatetime == null ^ Object1.Updatetime == null )
			{
				equal = false;
			}
			if (Object1.CredentialsStyle != null && Object2.CredentialsStyle != null )
			{
				if (Object1.CredentialsStyle != Object2.CredentialsStyle)
					equal = false;
			}
			else if (Object1.CredentialsStyle == null ^ Object1.CredentialsStyle == null )
			{
				equal = false;
			}
			if (Object1.DegreeId != Object2.DegreeId)
				equal = false;
			if (Object1.DegreeCourseId != Object2.DegreeCourseId)
				equal = false;
			if (Object1.StudentStatus != Object2.StudentStatus)
				equal = false;
			if (Object1.FeBadgeId != Object2.FeBadgeId)
				equal = false;
			if (Object1.AttachmentFileStyle != null && Object2.AttachmentFileStyle != null )
			{
				if (Object1.AttachmentFileStyle != Object2.AttachmentFileStyle)
					equal = false;
			}
			else if (Object1.AttachmentFileStyle == null ^ Object1.AttachmentFileStyle == null )
			{
				equal = false;
			}
			if (Object1.AttachmentFilePath != null && Object2.AttachmentFilePath != null )
			{
				if (Object1.AttachmentFilePath != Object2.AttachmentFilePath)
					equal = false;
			}
			else if (Object1.AttachmentFilePath == null ^ Object1.AttachmentFilePath == null )
			{
				equal = false;
			}
			if (Object1.CourseId != null && Object2.CourseId != null )
			{
				if (Object1.CourseId != Object2.CourseId)
					equal = false;
			}
			else if (Object1.CourseId == null ^ Object1.CourseId == null )
			{
				equal = false;
			}
			if (Object1.UpdateUserId != null && Object2.UpdateUserId != null )
			{
				if (Object1.UpdateUserId != Object2.UpdateUserId)
					equal = false;
			}
			else if (Object1.UpdateUserId == null ^ Object1.UpdateUserId == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(VwStudentCourseRelation entity, string propertyName)
		{
			switch (propertyName)
			{
				case "StudentId":
					return entity.StudentId;
				case "StudentNote":
					return entity.StudentNote;
				case "Studies":
					return entity.Studies;
				case "UserId":
					return entity.UserId;
				case "UserName":
					return entity.UserName;
				case "UserCnName":
					return entity.UserCnName;
				case "AutoId":
					return entity.AutoId;
				case "Updatetime":
					return entity.Updatetime;
				case "CredentialsStyle":
					return entity.CredentialsStyle;
				case "DegreeId":
					return entity.DegreeId;
				case "DegreeCourseId":
					return entity.DegreeCourseId;
				case "StudentStatus":
					return entity.StudentStatus;
				case "FeBadgeId":
					return entity.FeBadgeId;
				case "AttachmentFileStyle":
					return entity.AttachmentFileStyle;
				case "AttachmentFilePath":
					return entity.AttachmentFilePath;
				case "CourseId":
					return entity.CourseId;
				case "UpdateUserId":
					return entity.UpdateUserId;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as VwStudentCourseRelation, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{18}{17}- StudentId: {0}{17}- StudentNote: {1}{17}- Studies: {2}{17}- UserId: {3}{17}- UserName: {4}{17}- UserCnName: {5}{17}- AutoId: {6}{17}- Updatetime: {7}{17}- CredentialsStyle: {8}{17}- DegreeId: {9}{17}- DegreeCourseId: {10}{17}- StudentStatus: {11}{17}- FeBadgeId: {12}{17}- AttachmentFileStyle: {13}{17}- AttachmentFilePath: {14}{17}- CourseId: {15}{17}- UpdateUserId: {16}{17}", 
				this.StudentId,
				(this.StudentNote == null) ? string.Empty : this.StudentNote.ToString(),
			     
				this.Studies,
				this.UserId,
				(this.UserName == null) ? string.Empty : this.UserName.ToString(),
			     
				this.UserCnName,
				this.AutoId,
				(this.Updatetime == null) ? string.Empty : this.Updatetime.ToString(),
			     
				(this.CredentialsStyle == null) ? string.Empty : this.CredentialsStyle.ToString(),
			     
				this.DegreeId,
				this.DegreeCourseId,
				this.StudentStatus,
				this.FeBadgeId,
				(this.AttachmentFileStyle == null) ? string.Empty : this.AttachmentFileStyle.ToString(),
			     
				(this.AttachmentFilePath == null) ? string.Empty : this.AttachmentFilePath.ToString(),
			     
				(this.CourseId == null) ? string.Empty : this.CourseId.ToString(),
			     
				(this.UpdateUserId == null) ? string.Empty : this.UpdateUserId.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the VwStudentCourseRelation columns.
	/// </summary>
	[Serializable]
	public enum VwStudentCourseRelationColumn
	{
		/// <summary>
		/// StudentID : 
		/// </summary>
		[EnumTextValue("StudentID")]
		[ColumnEnum("StudentID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		StudentId,
		/// <summary>
		/// StudentNote : 
		/// </summary>
		[EnumTextValue("StudentNote")]
		[ColumnEnum("StudentNote", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 500)]
		StudentNote,
		/// <summary>
		/// studies : 
		/// </summary>
		[EnumTextValue("studies")]
		[ColumnEnum("studies", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		Studies,
		/// <summary>
		/// UserID : 
		/// </summary>
		[EnumTextValue("UserID")]
		[ColumnEnum("UserID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		UserId,
		/// <summary>
		/// UserName : 
		/// </summary>
		[EnumTextValue("UserName")]
		[ColumnEnum("UserName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		UserName,
		/// <summary>
		/// UserCNName : 
		/// </summary>
		[EnumTextValue("UserCNName")]
		[ColumnEnum("UserCNName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		UserCnName,
		/// <summary>
		/// AutoID : 
		/// </summary>
		[EnumTextValue("AutoID")]
		[ColumnEnum("AutoID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		AutoId,
		/// <summary>
		/// Updatetime : 
		/// </summary>
		[EnumTextValue("Updatetime")]
		[ColumnEnum("Updatetime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		Updatetime,
		/// <summary>
		/// CredentialsStyle : 
		/// </summary>
		[EnumTextValue("CredentialsStyle")]
		[ColumnEnum("CredentialsStyle", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CredentialsStyle,
		/// <summary>
		/// DegreeID : 
		/// </summary>
		[EnumTextValue("DegreeID")]
		[ColumnEnum("DegreeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		DegreeId,
		/// <summary>
		/// degreeCourseID : 
		/// </summary>
		[EnumTextValue("degreeCourseID")]
		[ColumnEnum("degreeCourseID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		DegreeCourseId,
		/// <summary>
		/// StudentStatus : 
		/// </summary>
		[EnumTextValue("StudentStatus")]
		[ColumnEnum("StudentStatus", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		StudentStatus,
		/// <summary>
		/// FEBadgeID : 
		/// </summary>
		[EnumTextValue("FEBadgeID")]
		[ColumnEnum("FEBadgeID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		FeBadgeId,
		/// <summary>
		/// AttachmentFileStyle : 
		/// </summary>
		[EnumTextValue("AttachmentFileStyle")]
		[ColumnEnum("AttachmentFileStyle", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		AttachmentFileStyle,
		/// <summary>
		/// AttachmentFilePath : 
		/// </summary>
		[EnumTextValue("AttachmentFilePath")]
		[ColumnEnum("AttachmentFilePath", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 200)]
		AttachmentFilePath,
		/// <summary>
		/// courseID : 
		/// </summary>
		[EnumTextValue("courseID")]
		[ColumnEnum("courseID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		CourseId,
		/// <summary>
		/// UpdateUserID : 
		/// </summary>
		[EnumTextValue("UpdateUserID")]
		[ColumnEnum("UpdateUserID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		UpdateUserId
	}//End enum

} // end namespace
