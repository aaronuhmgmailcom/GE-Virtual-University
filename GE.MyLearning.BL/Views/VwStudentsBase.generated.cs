/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file VwStudents.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace GE.MyLearning.BL
{
	///<summary>
	/// An object representation of the 'VW_Students' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("VwStudentsBase")]
	public abstract partial class VwStudentsBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// StudentID : 
		/// </summary>
		private System.Int32		  _studentId = (int)0;
		
		/// <summary>
		/// CreateTime : 
		/// </summary>
		private System.DateTime?		  _createTime = null;
		
		/// <summary>
		/// Status : 
		/// </summary>
		private System.Int32		  _status = (int)0;
		
		/// <summary>
		/// Notes : 
		/// </summary>
		private System.String		  _notes = null;
		
		/// <summary>
		/// studies : 
		/// </summary>
		private System.Int32		  _studies = (int)0;
		
		/// <summary>
		/// UserID : 
		/// </summary>
		private System.String		  _userId = string.Empty;
		
		/// <summary>
		/// UserName : 
		/// </summary>
		private System.String		  _userName = null;
		
		/// <summary>
		/// UserCNName : 
		/// </summary>
		private System.String		  _userCnName = string.Empty;
		
		/// <summary>
		/// DegreeID : 
		/// </summary>
		private System.Int32		  _degreeId = (int)0;
		
		/// <summary>
		/// FEBadgeID : 
		/// </summary>
		private System.String		  _feBadgeId = string.Empty;
		
		/// <summary>
		/// department : 
		/// </summary>
		private System.String		  _department = null;
		
		/// <summary>
		/// Email : 
		/// </summary>
		private System.String		  _email = string.Empty;
		
		/// <summary>
		/// ApplyDate : 
		/// </summary>
		private System.DateTime?		  _applyDate = null;
		
		/// <summary>
		/// ApprovalofHuman : 
		/// </summary>
		private System.String		  _approvalofHuman = null;
		
		/// <summary>
		/// ApproveofDate : 
		/// </summary>
		private System.DateTime?		  _approveofDate = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="VwStudentsBase"/> instance.
		///</summary>
		public VwStudentsBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="VwStudentsBase"/> instance.
		///</summary>
		///<param name="_studentId"></param>
		///<param name="_createTime"></param>
		///<param name="_status"></param>
		///<param name="_notes"></param>
		///<param name="_studies"></param>
		///<param name="_userId"></param>
		///<param name="_userName"></param>
		///<param name="_userCnName"></param>
		///<param name="_degreeId"></param>
		///<param name="_feBadgeId"></param>
		///<param name="_department"></param>
		///<param name="_email"></param>
		///<param name="_applyDate"></param>
		///<param name="_approvalofHuman"></param>
		///<param name="_approveofDate"></param>
		public VwStudentsBase(System.Int32 _studentId, System.DateTime? _createTime, System.Int32 _status, System.String _notes, System.Int32 _studies, System.String _userId, System.String _userName, System.String _userCnName, System.Int32 _degreeId, System.String _feBadgeId, System.String _department, System.String _email, System.DateTime? _applyDate, System.String _approvalofHuman, System.DateTime? _approveofDate)
		{
			this._studentId = _studentId;
			this._createTime = _createTime;
			this._status = _status;
			this._notes = _notes;
			this._studies = _studies;
			this._userId = _userId;
			this._userName = _userName;
			this._userCnName = _userCnName;
			this._degreeId = _degreeId;
			this._feBadgeId = _feBadgeId;
			this._department = _department;
			this._email = _email;
			this._applyDate = _applyDate;
			this._approvalofHuman = _approvalofHuman;
			this._approveofDate = _approveofDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="VwStudents"/> instance.
		///</summary>
		///<param name="_studentId"></param>
		///<param name="_createTime"></param>
		///<param name="_status"></param>
		///<param name="_notes"></param>
		///<param name="_studies"></param>
		///<param name="_userId"></param>
		///<param name="_userName"></param>
		///<param name="_userCnName"></param>
		///<param name="_degreeId"></param>
		///<param name="_feBadgeId"></param>
		///<param name="_department"></param>
		///<param name="_email"></param>
		///<param name="_applyDate"></param>
		///<param name="_approvalofHuman"></param>
		///<param name="_approveofDate"></param>
		public static VwStudents CreateVwStudents(System.Int32 _studentId, System.DateTime? _createTime, System.Int32 _status, System.String _notes, System.Int32 _studies, System.String _userId, System.String _userName, System.String _userCnName, System.Int32 _degreeId, System.String _feBadgeId, System.String _department, System.String _email, System.DateTime? _applyDate, System.String _approvalofHuman, System.DateTime? _approveofDate)
		{
			VwStudents newVwStudents = new VwStudents();
			newVwStudents.StudentId = _studentId;
			newVwStudents.CreateTime = _createTime;
			newVwStudents.Status = _status;
			newVwStudents.Notes = _notes;
			newVwStudents.Studies = _studies;
			newVwStudents.UserId = _userId;
			newVwStudents.UserName = _userName;
			newVwStudents.UserCnName = _userCnName;
			newVwStudents.DegreeId = _degreeId;
			newVwStudents.FeBadgeId = _feBadgeId;
			newVwStudents.Department = _department;
			newVwStudents.Email = _email;
			newVwStudents.ApplyDate = _applyDate;
			newVwStudents.ApprovalofHuman = _approvalofHuman;
			newVwStudents.ApproveofDate = _approveofDate;
			return newVwStudents;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the StudentID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 StudentId
		{
			get
			{
				return this._studentId; 
			}
			set
			{
				if (_studentId == value)
					return;
					
				this._studentId = value;
				this._isDirty = true;
				
				OnPropertyChanged("StudentId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CreateTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCreateTimeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? CreateTime
		{
			get
			{
				return this._createTime; 
			}
			set
			{
				if (_createTime == value && CreateTime != null )
					return;
					
				this._createTime = value;
				this._isDirty = true;
				
				OnPropertyChanged("CreateTime");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Status property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 Status
		{
			get
			{
				return this._status; 
			}
			set
			{
				if (_status == value)
					return;
					
				this._status = value;
				this._isDirty = true;
				
				OnPropertyChanged("Status");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Notes
		{
			get
			{
				return this._notes; 
			}
			set
			{
				if (_notes == value)
					return;
					
				this._notes = value;
				this._isDirty = true;
				
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the studies property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 Studies
		{
			get
			{
				return this._studies; 
			}
			set
			{
				if (_studies == value)
					return;
					
				this._studies = value;
				this._isDirty = true;
				
				OnPropertyChanged("Studies");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the UserID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String UserId
		{
			get
			{
				return this._userId; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "UserId does not allow null values.");
				if (_userId == value)
					return;
					
				this._userId = value;
				this._isDirty = true;
				
				OnPropertyChanged("UserId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the UserName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String UserName
		{
			get
			{
				return this._userName; 
			}
			set
			{
				if (_userName == value)
					return;
					
				this._userName = value;
				this._isDirty = true;
				
				OnPropertyChanged("UserName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the UserCNName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String UserCnName
		{
			get
			{
				return this._userCnName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "UserCnName does not allow null values.");
				if (_userCnName == value)
					return;
					
				this._userCnName = value;
				this._isDirty = true;
				
				OnPropertyChanged("UserCnName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DegreeID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 DegreeId
		{
			get
			{
				return this._degreeId; 
			}
			set
			{
				if (_degreeId == value)
					return;
					
				this._degreeId = value;
				this._isDirty = true;
				
				OnPropertyChanged("DegreeId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the FEBadgeID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String FeBadgeId
		{
			get
			{
				return this._feBadgeId; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "FeBadgeId does not allow null values.");
				if (_feBadgeId == value)
					return;
					
				this._feBadgeId = value;
				this._isDirty = true;
				
				OnPropertyChanged("FeBadgeId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the department property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Department
		{
			get
			{
				return this._department; 
			}
			set
			{
				if (_department == value)
					return;
					
				this._department = value;
				this._isDirty = true;
				
				OnPropertyChanged("Department");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Email property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Email
		{
			get
			{
				return this._email; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "Email does not allow null values.");
				if (_email == value)
					return;
					
				this._email = value;
				this._isDirty = true;
				
				OnPropertyChanged("Email");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ApplyDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsApplyDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? ApplyDate
		{
			get
			{
				return this._applyDate; 
			}
			set
			{
				if (_applyDate == value && ApplyDate != null )
					return;
					
				this._applyDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("ApplyDate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ApprovalofHuman property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ApprovalofHuman
		{
			get
			{
				return this._approvalofHuman; 
			}
			set
			{
				if (_approvalofHuman == value)
					return;
					
				this._approvalofHuman = value;
				this._isDirty = true;
				
				OnPropertyChanged("ApprovalofHuman");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ApproveofDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsApproveofDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? ApproveofDate
		{
			get
			{
				return this._approveofDate; 
			}
			set
			{
				if (_approveofDate == value && ApproveofDate != null )
					return;
					
				this._approveofDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("ApproveofDate");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "VW_Students"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed VwStudentsBase Entity 
		///</summary>
		public virtual VwStudentsBase Copy()
		{
			//shallow copy entity
			VwStudents copy = new VwStudents();
				copy.StudentId = this.StudentId;
				copy.CreateTime = this.CreateTime;
				copy.Status = this.Status;
				copy.Notes = this.Notes;
				copy.Studies = this.Studies;
				copy.UserId = this.UserId;
				copy.UserName = this.UserName;
				copy.UserCnName = this.UserCnName;
				copy.DegreeId = this.DegreeId;
				copy.FeBadgeId = this.FeBadgeId;
				copy.Department = this.Department;
				copy.Email = this.Email;
				copy.ApplyDate = this.ApplyDate;
				copy.ApprovalofHuman = this.ApprovalofHuman;
				copy.ApproveofDate = this.ApproveofDate;
			copy.AcceptChanges();
			return (VwStudents)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="VwStudentsBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(VwStudentsBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="VwStudentsBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="VwStudentsBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="VwStudentsBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(VwStudentsBase Object1, VwStudentsBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.StudentId != Object2.StudentId)
				equal = false;
			if (Object1.CreateTime != null && Object2.CreateTime != null )
			{
				if (Object1.CreateTime != Object2.CreateTime)
					equal = false;
			}
			else if (Object1.CreateTime == null ^ Object1.CreateTime == null )
			{
				equal = false;
			}
			if (Object1.Status != Object2.Status)
				equal = false;
			if (Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object1.Notes == null )
			{
				equal = false;
			}
			if (Object1.Studies != Object2.Studies)
				equal = false;
			if (Object1.UserId != Object2.UserId)
				equal = false;
			if (Object1.UserName != null && Object2.UserName != null )
			{
				if (Object1.UserName != Object2.UserName)
					equal = false;
			}
			else if (Object1.UserName == null ^ Object1.UserName == null )
			{
				equal = false;
			}
			if (Object1.UserCnName != Object2.UserCnName)
				equal = false;
			if (Object1.DegreeId != Object2.DegreeId)
				equal = false;
			if (Object1.FeBadgeId != Object2.FeBadgeId)
				equal = false;
			if (Object1.Department != null && Object2.Department != null )
			{
				if (Object1.Department != Object2.Department)
					equal = false;
			}
			else if (Object1.Department == null ^ Object1.Department == null )
			{
				equal = false;
			}
			if (Object1.Email != Object2.Email)
				equal = false;
			if (Object1.ApplyDate != null && Object2.ApplyDate != null )
			{
				if (Object1.ApplyDate != Object2.ApplyDate)
					equal = false;
			}
			else if (Object1.ApplyDate == null ^ Object1.ApplyDate == null )
			{
				equal = false;
			}
			if (Object1.ApprovalofHuman != null && Object2.ApprovalofHuman != null )
			{
				if (Object1.ApprovalofHuman != Object2.ApprovalofHuman)
					equal = false;
			}
			else if (Object1.ApprovalofHuman == null ^ Object1.ApprovalofHuman == null )
			{
				equal = false;
			}
			if (Object1.ApproveofDate != null && Object2.ApproveofDate != null )
			{
				if (Object1.ApproveofDate != Object2.ApproveofDate)
					equal = false;
			}
			else if (Object1.ApproveofDate == null ^ Object1.ApproveofDate == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(VwStudents entity, string propertyName)
		{
			switch (propertyName)
			{
				case "StudentId":
					return entity.StudentId;
				case "CreateTime":
					return entity.CreateTime;
				case "Status":
					return entity.Status;
				case "Notes":
					return entity.Notes;
				case "Studies":
					return entity.Studies;
				case "UserId":
					return entity.UserId;
				case "UserName":
					return entity.UserName;
				case "UserCnName":
					return entity.UserCnName;
				case "DegreeId":
					return entity.DegreeId;
				case "FeBadgeId":
					return entity.FeBadgeId;
				case "Department":
					return entity.Department;
				case "Email":
					return entity.Email;
				case "ApplyDate":
					return entity.ApplyDate;
				case "ApprovalofHuman":
					return entity.ApprovalofHuman;
				case "ApproveofDate":
					return entity.ApproveofDate;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as VwStudents, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{16}{15}- StudentId: {0}{15}- CreateTime: {1}{15}- Status: {2}{15}- Notes: {3}{15}- Studies: {4}{15}- UserId: {5}{15}- UserName: {6}{15}- UserCnName: {7}{15}- DegreeId: {8}{15}- FeBadgeId: {9}{15}- Department: {10}{15}- Email: {11}{15}- ApplyDate: {12}{15}- ApprovalofHuman: {13}{15}- ApproveofDate: {14}{15}", 
				this.StudentId,
				(this.CreateTime == null) ? string.Empty : this.CreateTime.ToString(),
			     
				this.Status,
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
			     
				this.Studies,
				this.UserId,
				(this.UserName == null) ? string.Empty : this.UserName.ToString(),
			     
				this.UserCnName,
				this.DegreeId,
				this.FeBadgeId,
				(this.Department == null) ? string.Empty : this.Department.ToString(),
			     
				this.Email,
				(this.ApplyDate == null) ? string.Empty : this.ApplyDate.ToString(),
			     
				(this.ApprovalofHuman == null) ? string.Empty : this.ApprovalofHuman.ToString(),
			     
				(this.ApproveofDate == null) ? string.Empty : this.ApproveofDate.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the VwStudents columns.
	/// </summary>
	[Serializable]
	public enum VwStudentsColumn
	{
		/// <summary>
		/// StudentID : 
		/// </summary>
		[EnumTextValue("StudentID")]
		[ColumnEnum("StudentID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		StudentId,
		/// <summary>
		/// CreateTime : 
		/// </summary>
		[EnumTextValue("CreateTime")]
		[ColumnEnum("CreateTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreateTime,
		/// <summary>
		/// Status : 
		/// </summary>
		[EnumTextValue("Status")]
		[ColumnEnum("Status", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		Status,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("Notes")]
		[ColumnEnum("Notes", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 500)]
		Notes,
		/// <summary>
		/// studies : 
		/// </summary>
		[EnumTextValue("studies")]
		[ColumnEnum("studies", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		Studies,
		/// <summary>
		/// UserID : 
		/// </summary>
		[EnumTextValue("UserID")]
		[ColumnEnum("UserID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		UserId,
		/// <summary>
		/// UserName : 
		/// </summary>
		[EnumTextValue("UserName")]
		[ColumnEnum("UserName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		UserName,
		/// <summary>
		/// UserCNName : 
		/// </summary>
		[EnumTextValue("UserCNName")]
		[ColumnEnum("UserCNName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		UserCnName,
		/// <summary>
		/// DegreeID : 
		/// </summary>
		[EnumTextValue("DegreeID")]
		[ColumnEnum("DegreeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		DegreeId,
		/// <summary>
		/// FEBadgeID : 
		/// </summary>
		[EnumTextValue("FEBadgeID")]
		[ColumnEnum("FEBadgeID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		FeBadgeId,
		/// <summary>
		/// department : 
		/// </summary>
		[EnumTextValue("department")]
		[ColumnEnum("department", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 150)]
		Department,
		/// <summary>
		/// Email : 
		/// </summary>
		[EnumTextValue("Email")]
		[ColumnEnum("Email", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 50)]
		Email,
		/// <summary>
		/// ApplyDate : 
		/// </summary>
		[EnumTextValue("ApplyDate")]
		[ColumnEnum("ApplyDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ApplyDate,
		/// <summary>
		/// ApprovalofHuman : 
		/// </summary>
		[EnumTextValue("ApprovalofHuman")]
		[ColumnEnum("ApprovalofHuman", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		ApprovalofHuman,
		/// <summary>
		/// ApproveofDate : 
		/// </summary>
		[EnumTextValue("ApproveofDate")]
		[ColumnEnum("ApproveofDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ApproveofDate
	}//End enum

} // end namespace
