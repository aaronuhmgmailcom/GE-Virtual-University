/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file VwUserGroupPermission.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace GE.MyLearning.BL
{
	///<summary>
	/// An object representation of the 'VW_UserGroupPermission' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("VwUserGroupPermissionBase")]
	public abstract partial class VwUserGroupPermissionBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// UserCNName : 
		/// </summary>
		private System.String		  _userCnName = string.Empty;
		
		/// <summary>
		/// UserID : 
		/// </summary>
		private System.String		  _userId = string.Empty;
		
		/// <summary>
		/// RoleID : 
		/// </summary>
		private System.String		  _roleId = string.Empty;
		
		/// <summary>
		/// RoleName : 
		/// </summary>
		private System.String		  _roleName = null;
		
		/// <summary>
		/// PermissionID : 
		/// </summary>
		private System.String		  _permissionId = string.Empty;
		
		/// <summary>
		/// PermissionName : 
		/// </summary>
		private System.String		  _permissionName = null;
		
		/// <summary>
		/// GroupID : 
		/// </summary>
		private System.String		  _groupId = string.Empty;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="VwUserGroupPermissionBase"/> instance.
		///</summary>
		public VwUserGroupPermissionBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="VwUserGroupPermissionBase"/> instance.
		///</summary>
		///<param name="_userCnName"></param>
		///<param name="_userId"></param>
		///<param name="_roleId"></param>
		///<param name="_roleName"></param>
		///<param name="_permissionId"></param>
		///<param name="_permissionName"></param>
		///<param name="_groupId"></param>
		public VwUserGroupPermissionBase(System.String _userCnName, System.String _userId, System.String _roleId, System.String _roleName, System.String _permissionId, System.String _permissionName, System.String _groupId)
		{
			this._userCnName = _userCnName;
			this._userId = _userId;
			this._roleId = _roleId;
			this._roleName = _roleName;
			this._permissionId = _permissionId;
			this._permissionName = _permissionName;
			this._groupId = _groupId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="VwUserGroupPermission"/> instance.
		///</summary>
		///<param name="_userCnName"></param>
		///<param name="_userId"></param>
		///<param name="_roleId"></param>
		///<param name="_roleName"></param>
		///<param name="_permissionId"></param>
		///<param name="_permissionName"></param>
		///<param name="_groupId"></param>
		public static VwUserGroupPermission CreateVwUserGroupPermission(System.String _userCnName, System.String _userId, System.String _roleId, System.String _roleName, System.String _permissionId, System.String _permissionName, System.String _groupId)
		{
			VwUserGroupPermission newVwUserGroupPermission = new VwUserGroupPermission();
			newVwUserGroupPermission.UserCnName = _userCnName;
			newVwUserGroupPermission.UserId = _userId;
			newVwUserGroupPermission.RoleId = _roleId;
			newVwUserGroupPermission.RoleName = _roleName;
			newVwUserGroupPermission.PermissionId = _permissionId;
			newVwUserGroupPermission.PermissionName = _permissionName;
			newVwUserGroupPermission.GroupId = _groupId;
			return newVwUserGroupPermission;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the UserCNName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String UserCnName
		{
			get
			{
				return this._userCnName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "UserCnName does not allow null values.");
				if (_userCnName == value)
					return;
					
				this._userCnName = value;
				this._isDirty = true;
				
				OnPropertyChanged("UserCnName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the UserID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String UserId
		{
			get
			{
				return this._userId; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "UserId does not allow null values.");
				if (_userId == value)
					return;
					
				this._userId = value;
				this._isDirty = true;
				
				OnPropertyChanged("UserId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the RoleID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String RoleId
		{
			get
			{
				return this._roleId; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "RoleId does not allow null values.");
				if (_roleId == value)
					return;
					
				this._roleId = value;
				this._isDirty = true;
				
				OnPropertyChanged("RoleId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the RoleName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String RoleName
		{
			get
			{
				return this._roleName; 
			}
			set
			{
				if (_roleName == value)
					return;
					
				this._roleName = value;
				this._isDirty = true;
				
				OnPropertyChanged("RoleName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the PermissionID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String PermissionId
		{
			get
			{
				return this._permissionId; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "PermissionId does not allow null values.");
				if (_permissionId == value)
					return;
					
				this._permissionId = value;
				this._isDirty = true;
				
				OnPropertyChanged("PermissionId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the PermissionName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String PermissionName
		{
			get
			{
				return this._permissionName; 
			}
			set
			{
				if (_permissionName == value)
					return;
					
				this._permissionName = value;
				this._isDirty = true;
				
				OnPropertyChanged("PermissionName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the GroupID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String GroupId
		{
			get
			{
				return this._groupId; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "GroupId does not allow null values.");
				if (_groupId == value)
					return;
					
				this._groupId = value;
				this._isDirty = true;
				
				OnPropertyChanged("GroupId");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "VW_UserGroupPermission"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed VwUserGroupPermissionBase Entity 
		///</summary>
		public virtual VwUserGroupPermissionBase Copy()
		{
			//shallow copy entity
			VwUserGroupPermission copy = new VwUserGroupPermission();
				copy.UserCnName = this.UserCnName;
				copy.UserId = this.UserId;
				copy.RoleId = this.RoleId;
				copy.RoleName = this.RoleName;
				copy.PermissionId = this.PermissionId;
				copy.PermissionName = this.PermissionName;
				copy.GroupId = this.GroupId;
			copy.AcceptChanges();
			return (VwUserGroupPermission)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="VwUserGroupPermissionBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(VwUserGroupPermissionBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="VwUserGroupPermissionBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="VwUserGroupPermissionBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="VwUserGroupPermissionBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(VwUserGroupPermissionBase Object1, VwUserGroupPermissionBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.UserCnName != Object2.UserCnName)
				equal = false;
			if (Object1.UserId != Object2.UserId)
				equal = false;
			if (Object1.RoleId != Object2.RoleId)
				equal = false;
			if (Object1.RoleName != null && Object2.RoleName != null )
			{
				if (Object1.RoleName != Object2.RoleName)
					equal = false;
			}
			else if (Object1.RoleName == null ^ Object1.RoleName == null )
			{
				equal = false;
			}
			if (Object1.PermissionId != Object2.PermissionId)
				equal = false;
			if (Object1.PermissionName != null && Object2.PermissionName != null )
			{
				if (Object1.PermissionName != Object2.PermissionName)
					equal = false;
			}
			else if (Object1.PermissionName == null ^ Object1.PermissionName == null )
			{
				equal = false;
			}
			if (Object1.GroupId != Object2.GroupId)
				equal = false;
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(VwUserGroupPermission entity, string propertyName)
		{
			switch (propertyName)
			{
				case "UserCnName":
					return entity.UserCnName;
				case "UserId":
					return entity.UserId;
				case "RoleId":
					return entity.RoleId;
				case "RoleName":
					return entity.RoleName;
				case "PermissionId":
					return entity.PermissionId;
				case "PermissionName":
					return entity.PermissionName;
				case "GroupId":
					return entity.GroupId;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as VwUserGroupPermission, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{8}{7}- UserCnName: {0}{7}- UserId: {1}{7}- RoleId: {2}{7}- RoleName: {3}{7}- PermissionId: {4}{7}- PermissionName: {5}{7}- GroupId: {6}{7}", 
				this.UserCnName,
				this.UserId,
				this.RoleId,
				(this.RoleName == null) ? string.Empty : this.RoleName.ToString(),
			     
				this.PermissionId,
				(this.PermissionName == null) ? string.Empty : this.PermissionName.ToString(),
			     
				this.GroupId,
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the VwUserGroupPermission columns.
	/// </summary>
	[Serializable]
	public enum VwUserGroupPermissionColumn
	{
		/// <summary>
		/// UserCNName : 
		/// </summary>
		[EnumTextValue("UserCNName")]
		[ColumnEnum("UserCNName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		UserCnName,
		/// <summary>
		/// UserID : 
		/// </summary>
		[EnumTextValue("UserID")]
		[ColumnEnum("UserID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		UserId,
		/// <summary>
		/// RoleID : 
		/// </summary>
		[EnumTextValue("RoleID")]
		[ColumnEnum("RoleID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		RoleId,
		/// <summary>
		/// RoleName : 
		/// </summary>
		[EnumTextValue("RoleName")]
		[ColumnEnum("RoleName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 150)]
		RoleName,
		/// <summary>
		/// PermissionID : 
		/// </summary>
		[EnumTextValue("PermissionID")]
		[ColumnEnum("PermissionID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 40)]
		PermissionId,
		/// <summary>
		/// PermissionName : 
		/// </summary>
		[EnumTextValue("PermissionName")]
		[ColumnEnum("PermissionName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 150)]
		PermissionName,
		/// <summary>
		/// GroupID : 
		/// </summary>
		[EnumTextValue("GroupID")]
		[ColumnEnum("GroupID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		GroupId
	}//End enum

} // end namespace
