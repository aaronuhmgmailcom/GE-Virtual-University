/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file VwUserRole.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace GE.MyLearning.BL
{
	///<summary>
	/// An object representation of the 'VW_UserRole' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("VwUserRoleBase")]
	public abstract partial class VwUserRoleBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// RoleID : 
		/// </summary>
		private System.String		  _roleId = string.Empty;
		
		/// <summary>
		/// RoleName : 
		/// </summary>
		private System.String		  _roleName = null;
		
		/// <summary>
		/// UserID : 
		/// </summary>
		private System.String		  _userId = string.Empty;
		
		/// <summary>
		/// UserName : 
		/// </summary>
		private System.String		  _userName = null;
		
		/// <summary>
		/// UserCNName : 
		/// </summary>
		private System.String		  _userCnName = string.Empty;
		
		/// <summary>
		/// Telephone : 
		/// </summary>
		private System.String		  _telephone = null;
		
		/// <summary>
		/// Email : 
		/// </summary>
		private System.String		  _email = string.Empty;
		
		/// <summary>
		/// UserStatus : 
		/// </summary>
		private System.Int32?		  _userStatus = null;
		
		/// <summary>
		/// FEBadgeID : 
		/// </summary>
		private System.String		  _feBadgeId = string.Empty;
		
		/// <summary>
		/// Mobile : 
		/// </summary>
		private System.String		  _mobile = null;
		
		/// <summary>
		/// UserType : 
		/// </summary>
		private System.Int32?		  _userType = null;
		
		/// <summary>
		/// UserCredit : 
		/// </summary>
		private System.Int32?		  _userCredit = null;
		
		/// <summary>
		/// Password : 
		/// </summary>
		private System.String		  _password = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="VwUserRoleBase"/> instance.
		///</summary>
		public VwUserRoleBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="VwUserRoleBase"/> instance.
		///</summary>
		///<param name="_roleId"></param>
		///<param name="_roleName"></param>
		///<param name="_userId"></param>
		///<param name="_userName"></param>
		///<param name="_userCnName"></param>
		///<param name="_telephone"></param>
		///<param name="_email"></param>
		///<param name="_userStatus"></param>
		///<param name="_feBadgeId"></param>
		///<param name="_mobile"></param>
		///<param name="_userType"></param>
		///<param name="_userCredit"></param>
		///<param name="_password"></param>
		public VwUserRoleBase(System.String _roleId, System.String _roleName, System.String _userId, System.String _userName, System.String _userCnName, System.String _telephone, System.String _email, System.Int32? _userStatus, System.String _feBadgeId, System.String _mobile, System.Int32? _userType, System.Int32? _userCredit, System.String _password)
		{
			this._roleId = _roleId;
			this._roleName = _roleName;
			this._userId = _userId;
			this._userName = _userName;
			this._userCnName = _userCnName;
			this._telephone = _telephone;
			this._email = _email;
			this._userStatus = _userStatus;
			this._feBadgeId = _feBadgeId;
			this._mobile = _mobile;
			this._userType = _userType;
			this._userCredit = _userCredit;
			this._password = _password;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="VwUserRole"/> instance.
		///</summary>
		///<param name="_roleId"></param>
		///<param name="_roleName"></param>
		///<param name="_userId"></param>
		///<param name="_userName"></param>
		///<param name="_userCnName"></param>
		///<param name="_telephone"></param>
		///<param name="_email"></param>
		///<param name="_userStatus"></param>
		///<param name="_feBadgeId"></param>
		///<param name="_mobile"></param>
		///<param name="_userType"></param>
		///<param name="_userCredit"></param>
		///<param name="_password"></param>
		public static VwUserRole CreateVwUserRole(System.String _roleId, System.String _roleName, System.String _userId, System.String _userName, System.String _userCnName, System.String _telephone, System.String _email, System.Int32? _userStatus, System.String _feBadgeId, System.String _mobile, System.Int32? _userType, System.Int32? _userCredit, System.String _password)
		{
			VwUserRole newVwUserRole = new VwUserRole();
			newVwUserRole.RoleId = _roleId;
			newVwUserRole.RoleName = _roleName;
			newVwUserRole.UserId = _userId;
			newVwUserRole.UserName = _userName;
			newVwUserRole.UserCnName = _userCnName;
			newVwUserRole.Telephone = _telephone;
			newVwUserRole.Email = _email;
			newVwUserRole.UserStatus = _userStatus;
			newVwUserRole.FeBadgeId = _feBadgeId;
			newVwUserRole.Mobile = _mobile;
			newVwUserRole.UserType = _userType;
			newVwUserRole.UserCredit = _userCredit;
			newVwUserRole.Password = _password;
			return newVwUserRole;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the RoleID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String RoleId
		{
			get
			{
				return this._roleId; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "RoleId does not allow null values.");
				if (_roleId == value)
					return;
					
				this._roleId = value;
				this._isDirty = true;
				
				OnPropertyChanged("RoleId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the RoleName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String RoleName
		{
			get
			{
				return this._roleName; 
			}
			set
			{
				if (_roleName == value)
					return;
					
				this._roleName = value;
				this._isDirty = true;
				
				OnPropertyChanged("RoleName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the UserID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String UserId
		{
			get
			{
				return this._userId; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "UserId does not allow null values.");
				if (_userId == value)
					return;
					
				this._userId = value;
				this._isDirty = true;
				
				OnPropertyChanged("UserId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the UserName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String UserName
		{
			get
			{
				return this._userName; 
			}
			set
			{
				if (_userName == value)
					return;
					
				this._userName = value;
				this._isDirty = true;
				
				OnPropertyChanged("UserName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the UserCNName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String UserCnName
		{
			get
			{
				return this._userCnName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "UserCnName does not allow null values.");
				if (_userCnName == value)
					return;
					
				this._userCnName = value;
				this._isDirty = true;
				
				OnPropertyChanged("UserCnName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Telephone property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Telephone
		{
			get
			{
				return this._telephone; 
			}
			set
			{
				if (_telephone == value)
					return;
					
				this._telephone = value;
				this._isDirty = true;
				
				OnPropertyChanged("Telephone");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Email property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Email
		{
			get
			{
				return this._email; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "Email does not allow null values.");
				if (_email == value)
					return;
					
				this._email = value;
				this._isDirty = true;
				
				OnPropertyChanged("Email");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the UserStatus property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsUserStatusNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? UserStatus
		{
			get
			{
				return this._userStatus; 
			}
			set
			{
				if (_userStatus == value && UserStatus != null )
					return;
					
				this._userStatus = value;
				this._isDirty = true;
				
				OnPropertyChanged("UserStatus");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the FEBadgeID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String FeBadgeId
		{
			get
			{
				return this._feBadgeId; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "FeBadgeId does not allow null values.");
				if (_feBadgeId == value)
					return;
					
				this._feBadgeId = value;
				this._isDirty = true;
				
				OnPropertyChanged("FeBadgeId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Mobile property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Mobile
		{
			get
			{
				return this._mobile; 
			}
			set
			{
				if (_mobile == value)
					return;
					
				this._mobile = value;
				this._isDirty = true;
				
				OnPropertyChanged("Mobile");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the UserType property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsUserTypeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? UserType
		{
			get
			{
				return this._userType; 
			}
			set
			{
				if (_userType == value && UserType != null )
					return;
					
				this._userType = value;
				this._isDirty = true;
				
				OnPropertyChanged("UserType");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the UserCredit property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsUserCreditNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? UserCredit
		{
			get
			{
				return this._userCredit; 
			}
			set
			{
				if (_userCredit == value && UserCredit != null )
					return;
					
				this._userCredit = value;
				this._isDirty = true;
				
				OnPropertyChanged("UserCredit");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Password property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Password
		{
			get
			{
				return this._password; 
			}
			set
			{
				if (_password == value)
					return;
					
				this._password = value;
				this._isDirty = true;
				
				OnPropertyChanged("Password");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "VW_UserRole"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed VwUserRoleBase Entity 
		///</summary>
		public virtual VwUserRoleBase Copy()
		{
			//shallow copy entity
			VwUserRole copy = new VwUserRole();
				copy.RoleId = this.RoleId;
				copy.RoleName = this.RoleName;
				copy.UserId = this.UserId;
				copy.UserName = this.UserName;
				copy.UserCnName = this.UserCnName;
				copy.Telephone = this.Telephone;
				copy.Email = this.Email;
				copy.UserStatus = this.UserStatus;
				copy.FeBadgeId = this.FeBadgeId;
				copy.Mobile = this.Mobile;
				copy.UserType = this.UserType;
				copy.UserCredit = this.UserCredit;
				copy.Password = this.Password;
			copy.AcceptChanges();
			return (VwUserRole)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="VwUserRoleBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(VwUserRoleBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="VwUserRoleBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="VwUserRoleBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="VwUserRoleBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(VwUserRoleBase Object1, VwUserRoleBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.RoleId != Object2.RoleId)
				equal = false;
			if (Object1.RoleName != null && Object2.RoleName != null )
			{
				if (Object1.RoleName != Object2.RoleName)
					equal = false;
			}
			else if (Object1.RoleName == null ^ Object1.RoleName == null )
			{
				equal = false;
			}
			if (Object1.UserId != Object2.UserId)
				equal = false;
			if (Object1.UserName != null && Object2.UserName != null )
			{
				if (Object1.UserName != Object2.UserName)
					equal = false;
			}
			else if (Object1.UserName == null ^ Object1.UserName == null )
			{
				equal = false;
			}
			if (Object1.UserCnName != Object2.UserCnName)
				equal = false;
			if (Object1.Telephone != null && Object2.Telephone != null )
			{
				if (Object1.Telephone != Object2.Telephone)
					equal = false;
			}
			else if (Object1.Telephone == null ^ Object1.Telephone == null )
			{
				equal = false;
			}
			if (Object1.Email != Object2.Email)
				equal = false;
			if (Object1.UserStatus != null && Object2.UserStatus != null )
			{
				if (Object1.UserStatus != Object2.UserStatus)
					equal = false;
			}
			else if (Object1.UserStatus == null ^ Object1.UserStatus == null )
			{
				equal = false;
			}
			if (Object1.FeBadgeId != Object2.FeBadgeId)
				equal = false;
			if (Object1.Mobile != null && Object2.Mobile != null )
			{
				if (Object1.Mobile != Object2.Mobile)
					equal = false;
			}
			else if (Object1.Mobile == null ^ Object1.Mobile == null )
			{
				equal = false;
			}
			if (Object1.UserType != null && Object2.UserType != null )
			{
				if (Object1.UserType != Object2.UserType)
					equal = false;
			}
			else if (Object1.UserType == null ^ Object1.UserType == null )
			{
				equal = false;
			}
			if (Object1.UserCredit != null && Object2.UserCredit != null )
			{
				if (Object1.UserCredit != Object2.UserCredit)
					equal = false;
			}
			else if (Object1.UserCredit == null ^ Object1.UserCredit == null )
			{
				equal = false;
			}
			if (Object1.Password != null && Object2.Password != null )
			{
				if (Object1.Password != Object2.Password)
					equal = false;
			}
			else if (Object1.Password == null ^ Object1.Password == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(VwUserRole entity, string propertyName)
		{
			switch (propertyName)
			{
				case "RoleId":
					return entity.RoleId;
				case "RoleName":
					return entity.RoleName;
				case "UserId":
					return entity.UserId;
				case "UserName":
					return entity.UserName;
				case "UserCnName":
					return entity.UserCnName;
				case "Telephone":
					return entity.Telephone;
				case "Email":
					return entity.Email;
				case "UserStatus":
					return entity.UserStatus;
				case "FeBadgeId":
					return entity.FeBadgeId;
				case "Mobile":
					return entity.Mobile;
				case "UserType":
					return entity.UserType;
				case "UserCredit":
					return entity.UserCredit;
				case "Password":
					return entity.Password;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as VwUserRole, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{14}{13}- RoleId: {0}{13}- RoleName: {1}{13}- UserId: {2}{13}- UserName: {3}{13}- UserCnName: {4}{13}- Telephone: {5}{13}- Email: {6}{13}- UserStatus: {7}{13}- FeBadgeId: {8}{13}- Mobile: {9}{13}- UserType: {10}{13}- UserCredit: {11}{13}- Password: {12}{13}", 
				this.RoleId,
				(this.RoleName == null) ? string.Empty : this.RoleName.ToString(),
			     
				this.UserId,
				(this.UserName == null) ? string.Empty : this.UserName.ToString(),
			     
				this.UserCnName,
				(this.Telephone == null) ? string.Empty : this.Telephone.ToString(),
			     
				this.Email,
				(this.UserStatus == null) ? string.Empty : this.UserStatus.ToString(),
			     
				this.FeBadgeId,
				(this.Mobile == null) ? string.Empty : this.Mobile.ToString(),
			     
				(this.UserType == null) ? string.Empty : this.UserType.ToString(),
			     
				(this.UserCredit == null) ? string.Empty : this.UserCredit.ToString(),
			     
				(this.Password == null) ? string.Empty : this.Password.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the VwUserRole columns.
	/// </summary>
	[Serializable]
	public enum VwUserRoleColumn
	{
		/// <summary>
		/// RoleID : 
		/// </summary>
		[EnumTextValue("RoleID")]
		[ColumnEnum("RoleID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		RoleId,
		/// <summary>
		/// RoleName : 
		/// </summary>
		[EnumTextValue("RoleName")]
		[ColumnEnum("RoleName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 150)]
		RoleName,
		/// <summary>
		/// UserID : 
		/// </summary>
		[EnumTextValue("UserID")]
		[ColumnEnum("UserID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		UserId,
		/// <summary>
		/// UserName : 
		/// </summary>
		[EnumTextValue("UserName")]
		[ColumnEnum("UserName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		UserName,
		/// <summary>
		/// UserCNName : 
		/// </summary>
		[EnumTextValue("UserCNName")]
		[ColumnEnum("UserCNName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		UserCnName,
		/// <summary>
		/// Telephone : 
		/// </summary>
		[EnumTextValue("Telephone")]
		[ColumnEnum("Telephone", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Telephone,
		/// <summary>
		/// Email : 
		/// </summary>
		[EnumTextValue("Email")]
		[ColumnEnum("Email", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 50)]
		Email,
		/// <summary>
		/// UserStatus : 
		/// </summary>
		[EnumTextValue("UserStatus")]
		[ColumnEnum("UserStatus", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		UserStatus,
		/// <summary>
		/// FEBadgeID : 
		/// </summary>
		[EnumTextValue("FEBadgeID")]
		[ColumnEnum("FEBadgeID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		FeBadgeId,
		/// <summary>
		/// Mobile : 
		/// </summary>
		[EnumTextValue("Mobile")]
		[ColumnEnum("Mobile", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Mobile,
		/// <summary>
		/// UserType : 
		/// </summary>
		[EnumTextValue("UserType")]
		[ColumnEnum("UserType", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		UserType,
		/// <summary>
		/// UserCredit : 
		/// </summary>
		[EnumTextValue("UserCredit")]
		[ColumnEnum("UserCredit", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		UserCredit,
		/// <summary>
		/// Password : 
		/// </summary>
		[EnumTextValue("Password")]
		[ColumnEnum("Password", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Password
	}//End enum

} // end namespace
