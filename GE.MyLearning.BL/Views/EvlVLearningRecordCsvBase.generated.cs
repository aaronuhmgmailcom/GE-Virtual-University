/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EvlVLearningRecordCsv.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace GE.MyLearning.BL
{
	///<summary>
	/// An object representation of the 'evl_v_LearningRecordCsv' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("EvlVLearningRecordCsvBase")]
	public abstract partial class EvlVLearningRecordCsvBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// CourseName : 
		/// </summary>
		private System.String		  _courseName = null;
		
		/// <summary>
		/// Description : 
		/// </summary>
		private System.String		  _description = null;
		
		/// <summary>
		/// SSO : 
		/// </summary>
		private System.String		  _sso = null;
		
		/// <summary>
		/// UserName : 
		/// </summary>
		private System.String		  _userName = null;
		
		/// <summary>
		/// CompletedDate : 
		/// </summary>
		private System.String		  _completedDate = null;
		
		/// <summary>
		/// Status : 
		/// </summary>
		private System.String		  _status = null;
		
		/// <summary>
		/// courseid : 
		/// </summary>
		private System.String		  _courseid = null;
		
		/// <summary>
		/// ID : 
		/// </summary>
		private System.Int32		  _id = (int)0;
		
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		private System.DateTime?		  _createdDate = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EvlVLearningRecordCsvBase"/> instance.
		///</summary>
		public EvlVLearningRecordCsvBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="EvlVLearningRecordCsvBase"/> instance.
		///</summary>
		///<param name="_courseName"></param>
		///<param name="_description"></param>
		///<param name="_sso"></param>
		///<param name="_userName"></param>
		///<param name="_completedDate"></param>
		///<param name="_status"></param>
		///<param name="_courseid"></param>
		///<param name="_id"></param>
		///<param name="_createdDate"></param>
		public EvlVLearningRecordCsvBase(System.String _courseName, System.String _description, System.String _sso, System.String _userName, System.String _completedDate, System.String _status, System.String _courseid, System.Int32 _id, System.DateTime? _createdDate)
		{
			this._courseName = _courseName;
			this._description = _description;
			this._sso = _sso;
			this._userName = _userName;
			this._completedDate = _completedDate;
			this._status = _status;
			this._courseid = _courseid;
			this._id = _id;
			this._createdDate = _createdDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EvlVLearningRecordCsv"/> instance.
		///</summary>
		///<param name="_courseName"></param>
		///<param name="_description"></param>
		///<param name="_sso"></param>
		///<param name="_userName"></param>
		///<param name="_completedDate"></param>
		///<param name="_status"></param>
		///<param name="_courseid"></param>
		///<param name="_id"></param>
		///<param name="_createdDate"></param>
		public static EvlVLearningRecordCsv CreateEvlVLearningRecordCsv(System.String _courseName, System.String _description, System.String _sso, System.String _userName, System.String _completedDate, System.String _status, System.String _courseid, System.Int32 _id, System.DateTime? _createdDate)
		{
			EvlVLearningRecordCsv newEvlVLearningRecordCsv = new EvlVLearningRecordCsv();
			newEvlVLearningRecordCsv.CourseName = _courseName;
			newEvlVLearningRecordCsv.Description = _description;
			newEvlVLearningRecordCsv.Sso = _sso;
			newEvlVLearningRecordCsv.UserName = _userName;
			newEvlVLearningRecordCsv.CompletedDate = _completedDate;
			newEvlVLearningRecordCsv.Status = _status;
			newEvlVLearningRecordCsv.Courseid = _courseid;
			newEvlVLearningRecordCsv.Id = _id;
			newEvlVLearningRecordCsv.CreatedDate = _createdDate;
			return newEvlVLearningRecordCsv;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the CourseName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CourseName
		{
			get
			{
				return this._courseName; 
			}
			set
			{
				if (_courseName == value)
					return;
					
				this._courseName = value;
				this._isDirty = true;
				
				OnPropertyChanged("CourseName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Description property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Description
		{
			get
			{
				return this._description; 
			}
			set
			{
				if (_description == value)
					return;
					
				this._description = value;
				this._isDirty = true;
				
				OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SSO property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Sso
		{
			get
			{
				return this._sso; 
			}
			set
			{
				if (_sso == value)
					return;
					
				this._sso = value;
				this._isDirty = true;
				
				OnPropertyChanged("Sso");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the UserName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String UserName
		{
			get
			{
				return this._userName; 
			}
			set
			{
				if (_userName == value)
					return;
					
				this._userName = value;
				this._isDirty = true;
				
				OnPropertyChanged("UserName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CompletedDate property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CompletedDate
		{
			get
			{
				return this._completedDate; 
			}
			set
			{
				if (_completedDate == value)
					return;
					
				this._completedDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("CompletedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Status property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Status
		{
			get
			{
				return this._status; 
			}
			set
			{
				if (_status == value)
					return;
					
				this._status = value;
				this._isDirty = true;
				
				OnPropertyChanged("Status");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the courseid property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Courseid
		{
			get
			{
				return this._courseid; 
			}
			set
			{
				if (_courseid == value)
					return;
					
				this._courseid = value;
				this._isDirty = true;
				
				OnPropertyChanged("Courseid");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 Id
		{
			get
			{
				return this._id; 
			}
			set
			{
				if (_id == value)
					return;
					
				this._id = value;
				this._isDirty = true;
				
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CreatedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCreatedDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? CreatedDate
		{
			get
			{
				return this._createdDate; 
			}
			set
			{
				if (_createdDate == value && CreatedDate != null )
					return;
					
				this._createdDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("CreatedDate");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "evl_v_LearningRecordCsv"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EvlVLearningRecordCsvBase Entity 
		///</summary>
		public virtual EvlVLearningRecordCsvBase Copy()
		{
			//shallow copy entity
			EvlVLearningRecordCsv copy = new EvlVLearningRecordCsv();
				copy.CourseName = this.CourseName;
				copy.Description = this.Description;
				copy.Sso = this.Sso;
				copy.UserName = this.UserName;
				copy.CompletedDate = this.CompletedDate;
				copy.Status = this.Status;
				copy.Courseid = this.Courseid;
				copy.Id = this.Id;
				copy.CreatedDate = this.CreatedDate;
			copy.AcceptChanges();
			return (EvlVLearningRecordCsv)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EvlVLearningRecordCsvBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EvlVLearningRecordCsvBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="EvlVLearningRecordCsvBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="EvlVLearningRecordCsvBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EvlVLearningRecordCsvBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(EvlVLearningRecordCsvBase Object1, EvlVLearningRecordCsvBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.CourseName != null && Object2.CourseName != null )
			{
				if (Object1.CourseName != Object2.CourseName)
					equal = false;
			}
			else if (Object1.CourseName == null ^ Object1.CourseName == null )
			{
				equal = false;
			}
			if (Object1.Description != null && Object2.Description != null )
			{
				if (Object1.Description != Object2.Description)
					equal = false;
			}
			else if (Object1.Description == null ^ Object1.Description == null )
			{
				equal = false;
			}
			if (Object1.Sso != null && Object2.Sso != null )
			{
				if (Object1.Sso != Object2.Sso)
					equal = false;
			}
			else if (Object1.Sso == null ^ Object1.Sso == null )
			{
				equal = false;
			}
			if (Object1.UserName != null && Object2.UserName != null )
			{
				if (Object1.UserName != Object2.UserName)
					equal = false;
			}
			else if (Object1.UserName == null ^ Object1.UserName == null )
			{
				equal = false;
			}
			if (Object1.CompletedDate != null && Object2.CompletedDate != null )
			{
				if (Object1.CompletedDate != Object2.CompletedDate)
					equal = false;
			}
			else if (Object1.CompletedDate == null ^ Object1.CompletedDate == null )
			{
				equal = false;
			}
			if (Object1.Status != null && Object2.Status != null )
			{
				if (Object1.Status != Object2.Status)
					equal = false;
			}
			else if (Object1.Status == null ^ Object1.Status == null )
			{
				equal = false;
			}
			if (Object1.Courseid != null && Object2.Courseid != null )
			{
				if (Object1.Courseid != Object2.Courseid)
					equal = false;
			}
			else if (Object1.Courseid == null ^ Object1.Courseid == null )
			{
				equal = false;
			}
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.CreatedDate != null && Object2.CreatedDate != null )
			{
				if (Object1.CreatedDate != Object2.CreatedDate)
					equal = false;
			}
			else if (Object1.CreatedDate == null ^ Object1.CreatedDate == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(EvlVLearningRecordCsv entity, string propertyName)
		{
			switch (propertyName)
			{
				case "CourseName":
					return entity.CourseName;
				case "Description":
					return entity.Description;
				case "Sso":
					return entity.Sso;
				case "UserName":
					return entity.UserName;
				case "CompletedDate":
					return entity.CompletedDate;
				case "Status":
					return entity.Status;
				case "Courseid":
					return entity.Courseid;
				case "Id":
					return entity.Id;
				case "CreatedDate":
					return entity.CreatedDate;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as EvlVLearningRecordCsv, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{10}{9}- CourseName: {0}{9}- Description: {1}{9}- Sso: {2}{9}- UserName: {3}{9}- CompletedDate: {4}{9}- Status: {5}{9}- Courseid: {6}{9}- Id: {7}{9}- CreatedDate: {8}{9}", 
				(this.CourseName == null) ? string.Empty : this.CourseName.ToString(),
			     
				(this.Description == null) ? string.Empty : this.Description.ToString(),
			     
				(this.Sso == null) ? string.Empty : this.Sso.ToString(),
			     
				(this.UserName == null) ? string.Empty : this.UserName.ToString(),
			     
				(this.CompletedDate == null) ? string.Empty : this.CompletedDate.ToString(),
			     
				(this.Status == null) ? string.Empty : this.Status.ToString(),
			     
				(this.Courseid == null) ? string.Empty : this.Courseid.ToString(),
			     
				this.Id,
				(this.CreatedDate == null) ? string.Empty : this.CreatedDate.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the EvlVLearningRecordCsv columns.
	/// </summary>
	[Serializable]
	public enum EvlVLearningRecordCsvColumn
	{
		/// <summary>
		/// CourseName : 
		/// </summary>
		[EnumTextValue("CourseName")]
		[ColumnEnum("CourseName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		CourseName,
		/// <summary>
		/// Description : 
		/// </summary>
		[EnumTextValue("Description")]
		[ColumnEnum("Description", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Description,
		/// <summary>
		/// SSO : 
		/// </summary>
		[EnumTextValue("SSO")]
		[ColumnEnum("SSO", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		Sso,
		/// <summary>
		/// UserName : 
		/// </summary>
		[EnumTextValue("UserName")]
		[ColumnEnum("UserName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		UserName,
		/// <summary>
		/// CompletedDate : 
		/// </summary>
		[EnumTextValue("CompletedDate")]
		[ColumnEnum("CompletedDate", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		CompletedDate,
		/// <summary>
		/// Status : 
		/// </summary>
		[EnumTextValue("Status")]
		[ColumnEnum("Status", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Status,
		/// <summary>
		/// courseid : 
		/// </summary>
		[EnumTextValue("courseid")]
		[ColumnEnum("courseid", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Courseid,
		/// <summary>
		/// ID : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		Id,
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		[EnumTextValue("CreatedDate")]
		[ColumnEnum("CreatedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreatedDate
	}//End enum

} // end namespace
