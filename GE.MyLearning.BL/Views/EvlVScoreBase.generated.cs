/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EvlVScore.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace GE.MyLearning.BL
{
	///<summary>
	/// An object representation of the 'evl_v_score' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("EvlVScoreBase")]
	public abstract partial class EvlVScoreBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// id : 
		/// </summary>
		private System.Int32		  _id = (int)0;
		
		/// <summary>
		/// userid : 
		/// </summary>
		private System.String		  _userid = null;
		
		/// <summary>
		/// assessmentid : 
		/// </summary>
		private System.Int32?		  _assessmentid = null;
		
		/// <summary>
		/// catalog_oneid : 
		/// </summary>
		private System.Int32?		  _catalogOneid = null;
		
		/// <summary>
		/// catalog_twoid : 
		/// </summary>
		private System.Int32?		  _catalogTwoid = null;
		
		/// <summary>
		/// behaviorid : 
		/// </summary>
		private System.Int32?		  _behaviorid = null;
		
		/// <summary>
		/// scorelevel : 
		/// </summary>
		private System.Int32?		  _scorelevel = null;
		
		/// <summary>
		/// score : 
		/// </summary>
		private System.Decimal?		  _score = null;
		
		/// <summary>
		/// evltimes : 
		/// </summary>
		private System.Int32?		  _evltimes = null;
		
		/// <summary>
		/// model_id : 
		/// </summary>
		private System.Int32?		  _modelId = null;
		
		/// <summary>
		/// assessmentname : 
		/// </summary>
		private System.String		  _assessmentname = null;
		
		/// <summary>
		/// catalog_onename : 
		/// </summary>
		private System.String		  _catalogOnename = null;
		
		/// <summary>
		/// catalog_twoname : 
		/// </summary>
		private System.String		  _catalogTwoname = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EvlVScoreBase"/> instance.
		///</summary>
		public EvlVScoreBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="EvlVScoreBase"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_userid"></param>
		///<param name="_assessmentid"></param>
		///<param name="_catalogOneid"></param>
		///<param name="_catalogTwoid"></param>
		///<param name="_behaviorid"></param>
		///<param name="_scorelevel"></param>
		///<param name="_score"></param>
		///<param name="_evltimes"></param>
		///<param name="_modelId"></param>
		///<param name="_assessmentname"></param>
		///<param name="_catalogOnename"></param>
		///<param name="_catalogTwoname"></param>
		public EvlVScoreBase(System.Int32 _id, System.String _userid, System.Int32? _assessmentid, System.Int32? _catalogOneid, System.Int32? _catalogTwoid, System.Int32? _behaviorid, System.Int32? _scorelevel, System.Decimal? _score, System.Int32? _evltimes, System.Int32? _modelId, System.String _assessmentname, System.String _catalogOnename, System.String _catalogTwoname)
		{
			this._id = _id;
			this._userid = _userid;
			this._assessmentid = _assessmentid;
			this._catalogOneid = _catalogOneid;
			this._catalogTwoid = _catalogTwoid;
			this._behaviorid = _behaviorid;
			this._scorelevel = _scorelevel;
			this._score = _score;
			this._evltimes = _evltimes;
			this._modelId = _modelId;
			this._assessmentname = _assessmentname;
			this._catalogOnename = _catalogOnename;
			this._catalogTwoname = _catalogTwoname;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EvlVScore"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_userid"></param>
		///<param name="_assessmentid"></param>
		///<param name="_catalogOneid"></param>
		///<param name="_catalogTwoid"></param>
		///<param name="_behaviorid"></param>
		///<param name="_scorelevel"></param>
		///<param name="_score"></param>
		///<param name="_evltimes"></param>
		///<param name="_modelId"></param>
		///<param name="_assessmentname"></param>
		///<param name="_catalogOnename"></param>
		///<param name="_catalogTwoname"></param>
		public static EvlVScore CreateEvlVScore(System.Int32 _id, System.String _userid, System.Int32? _assessmentid, System.Int32? _catalogOneid, System.Int32? _catalogTwoid, System.Int32? _behaviorid, System.Int32? _scorelevel, System.Decimal? _score, System.Int32? _evltimes, System.Int32? _modelId, System.String _assessmentname, System.String _catalogOnename, System.String _catalogTwoname)
		{
			EvlVScore newEvlVScore = new EvlVScore();
			newEvlVScore.Id = _id;
			newEvlVScore.Userid = _userid;
			newEvlVScore.Assessmentid = _assessmentid;
			newEvlVScore.CatalogOneid = _catalogOneid;
			newEvlVScore.CatalogTwoid = _catalogTwoid;
			newEvlVScore.Behaviorid = _behaviorid;
			newEvlVScore.Scorelevel = _scorelevel;
			newEvlVScore.Score = _score;
			newEvlVScore.Evltimes = _evltimes;
			newEvlVScore.ModelId = _modelId;
			newEvlVScore.Assessmentname = _assessmentname;
			newEvlVScore.CatalogOnename = _catalogOnename;
			newEvlVScore.CatalogTwoname = _catalogTwoname;
			return newEvlVScore;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the id property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 Id
		{
			get
			{
				return this._id; 
			}
			set
			{
				if (_id == value)
					return;
					
				this._id = value;
				this._isDirty = true;
				
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the userid property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Userid
		{
			get
			{
				return this._userid; 
			}
			set
			{
				if (_userid == value)
					return;
					
				this._userid = value;
				this._isDirty = true;
				
				OnPropertyChanged("Userid");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the assessmentid property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsAssessmentidNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? Assessmentid
		{
			get
			{
				return this._assessmentid; 
			}
			set
			{
				if (_assessmentid == value && Assessmentid != null )
					return;
					
				this._assessmentid = value;
				this._isDirty = true;
				
				OnPropertyChanged("Assessmentid");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the catalog_oneid property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCatalogOneidNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? CatalogOneid
		{
			get
			{
				return this._catalogOneid; 
			}
			set
			{
				if (_catalogOneid == value && CatalogOneid != null )
					return;
					
				this._catalogOneid = value;
				this._isDirty = true;
				
				OnPropertyChanged("CatalogOneid");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the catalog_twoid property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCatalogTwoidNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? CatalogTwoid
		{
			get
			{
				return this._catalogTwoid; 
			}
			set
			{
				if (_catalogTwoid == value && CatalogTwoid != null )
					return;
					
				this._catalogTwoid = value;
				this._isDirty = true;
				
				OnPropertyChanged("CatalogTwoid");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the behaviorid property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsBehavioridNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? Behaviorid
		{
			get
			{
				return this._behaviorid; 
			}
			set
			{
				if (_behaviorid == value && Behaviorid != null )
					return;
					
				this._behaviorid = value;
				this._isDirty = true;
				
				OnPropertyChanged("Behaviorid");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the scorelevel property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsScorelevelNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? Scorelevel
		{
			get
			{
				return this._scorelevel; 
			}
			set
			{
				if (_scorelevel == value && Scorelevel != null )
					return;
					
				this._scorelevel = value;
				this._isDirty = true;
				
				OnPropertyChanged("Scorelevel");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the score property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScoreNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? Score
		{
			get
			{
				return this._score; 
			}
			set
			{
				if (_score == value && Score != null )
					return;
					
				this._score = value;
				this._isDirty = true;
				
				OnPropertyChanged("Score");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the evltimes property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsEvltimesNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? Evltimes
		{
			get
			{
				return this._evltimes; 
			}
			set
			{
				if (_evltimes == value && Evltimes != null )
					return;
					
				this._evltimes = value;
				this._isDirty = true;
				
				OnPropertyChanged("Evltimes");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the model_id property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsModelIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? ModelId
		{
			get
			{
				return this._modelId; 
			}
			set
			{
				if (_modelId == value && ModelId != null )
					return;
					
				this._modelId = value;
				this._isDirty = true;
				
				OnPropertyChanged("ModelId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the assessmentname property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Assessmentname
		{
			get
			{
				return this._assessmentname; 
			}
			set
			{
				if (_assessmentname == value)
					return;
					
				this._assessmentname = value;
				this._isDirty = true;
				
				OnPropertyChanged("Assessmentname");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the catalog_onename property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CatalogOnename
		{
			get
			{
				return this._catalogOnename; 
			}
			set
			{
				if (_catalogOnename == value)
					return;
					
				this._catalogOnename = value;
				this._isDirty = true;
				
				OnPropertyChanged("CatalogOnename");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the catalog_twoname property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CatalogTwoname
		{
			get
			{
				return this._catalogTwoname; 
			}
			set
			{
				if (_catalogTwoname == value)
					return;
					
				this._catalogTwoname = value;
				this._isDirty = true;
				
				OnPropertyChanged("CatalogTwoname");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "evl_v_score"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EvlVScoreBase Entity 
		///</summary>
		public virtual EvlVScoreBase Copy()
		{
			//shallow copy entity
			EvlVScore copy = new EvlVScore();
				copy.Id = this.Id;
				copy.Userid = this.Userid;
				copy.Assessmentid = this.Assessmentid;
				copy.CatalogOneid = this.CatalogOneid;
				copy.CatalogTwoid = this.CatalogTwoid;
				copy.Behaviorid = this.Behaviorid;
				copy.Scorelevel = this.Scorelevel;
				copy.Score = this.Score;
				copy.Evltimes = this.Evltimes;
				copy.ModelId = this.ModelId;
				copy.Assessmentname = this.Assessmentname;
				copy.CatalogOnename = this.CatalogOnename;
				copy.CatalogTwoname = this.CatalogTwoname;
			copy.AcceptChanges();
			return (EvlVScore)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EvlVScoreBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EvlVScoreBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="EvlVScoreBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="EvlVScoreBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EvlVScoreBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(EvlVScoreBase Object1, EvlVScoreBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.Userid != null && Object2.Userid != null )
			{
				if (Object1.Userid != Object2.Userid)
					equal = false;
			}
			else if (Object1.Userid == null ^ Object1.Userid == null )
			{
				equal = false;
			}
			if (Object1.Assessmentid != null && Object2.Assessmentid != null )
			{
				if (Object1.Assessmentid != Object2.Assessmentid)
					equal = false;
			}
			else if (Object1.Assessmentid == null ^ Object1.Assessmentid == null )
			{
				equal = false;
			}
			if (Object1.CatalogOneid != null && Object2.CatalogOneid != null )
			{
				if (Object1.CatalogOneid != Object2.CatalogOneid)
					equal = false;
			}
			else if (Object1.CatalogOneid == null ^ Object1.CatalogOneid == null )
			{
				equal = false;
			}
			if (Object1.CatalogTwoid != null && Object2.CatalogTwoid != null )
			{
				if (Object1.CatalogTwoid != Object2.CatalogTwoid)
					equal = false;
			}
			else if (Object1.CatalogTwoid == null ^ Object1.CatalogTwoid == null )
			{
				equal = false;
			}
			if (Object1.Behaviorid != null && Object2.Behaviorid != null )
			{
				if (Object1.Behaviorid != Object2.Behaviorid)
					equal = false;
			}
			else if (Object1.Behaviorid == null ^ Object1.Behaviorid == null )
			{
				equal = false;
			}
			if (Object1.Scorelevel != null && Object2.Scorelevel != null )
			{
				if (Object1.Scorelevel != Object2.Scorelevel)
					equal = false;
			}
			else if (Object1.Scorelevel == null ^ Object1.Scorelevel == null )
			{
				equal = false;
			}
			if (Object1.Score != null && Object2.Score != null )
			{
				if (Object1.Score != Object2.Score)
					equal = false;
			}
			else if (Object1.Score == null ^ Object1.Score == null )
			{
				equal = false;
			}
			if (Object1.Evltimes != null && Object2.Evltimes != null )
			{
				if (Object1.Evltimes != Object2.Evltimes)
					equal = false;
			}
			else if (Object1.Evltimes == null ^ Object1.Evltimes == null )
			{
				equal = false;
			}
			if (Object1.ModelId != null && Object2.ModelId != null )
			{
				if (Object1.ModelId != Object2.ModelId)
					equal = false;
			}
			else if (Object1.ModelId == null ^ Object1.ModelId == null )
			{
				equal = false;
			}
			if (Object1.Assessmentname != null && Object2.Assessmentname != null )
			{
				if (Object1.Assessmentname != Object2.Assessmentname)
					equal = false;
			}
			else if (Object1.Assessmentname == null ^ Object1.Assessmentname == null )
			{
				equal = false;
			}
			if (Object1.CatalogOnename != null && Object2.CatalogOnename != null )
			{
				if (Object1.CatalogOnename != Object2.CatalogOnename)
					equal = false;
			}
			else if (Object1.CatalogOnename == null ^ Object1.CatalogOnename == null )
			{
				equal = false;
			}
			if (Object1.CatalogTwoname != null && Object2.CatalogTwoname != null )
			{
				if (Object1.CatalogTwoname != Object2.CatalogTwoname)
					equal = false;
			}
			else if (Object1.CatalogTwoname == null ^ Object1.CatalogTwoname == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(EvlVScore entity, string propertyName)
		{
			switch (propertyName)
			{
				case "Id":
					return entity.Id;
				case "Userid":
					return entity.Userid;
				case "Assessmentid":
					return entity.Assessmentid;
				case "CatalogOneid":
					return entity.CatalogOneid;
				case "CatalogTwoid":
					return entity.CatalogTwoid;
				case "Behaviorid":
					return entity.Behaviorid;
				case "Scorelevel":
					return entity.Scorelevel;
				case "Score":
					return entity.Score;
				case "Evltimes":
					return entity.Evltimes;
				case "ModelId":
					return entity.ModelId;
				case "Assessmentname":
					return entity.Assessmentname;
				case "CatalogOnename":
					return entity.CatalogOnename;
				case "CatalogTwoname":
					return entity.CatalogTwoname;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as EvlVScore, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{14}{13}- Id: {0}{13}- Userid: {1}{13}- Assessmentid: {2}{13}- CatalogOneid: {3}{13}- CatalogTwoid: {4}{13}- Behaviorid: {5}{13}- Scorelevel: {6}{13}- Score: {7}{13}- Evltimes: {8}{13}- ModelId: {9}{13}- Assessmentname: {10}{13}- CatalogOnename: {11}{13}- CatalogTwoname: {12}{13}", 
				this.Id,
				(this.Userid == null) ? string.Empty : this.Userid.ToString(),
			     
				(this.Assessmentid == null) ? string.Empty : this.Assessmentid.ToString(),
			     
				(this.CatalogOneid == null) ? string.Empty : this.CatalogOneid.ToString(),
			     
				(this.CatalogTwoid == null) ? string.Empty : this.CatalogTwoid.ToString(),
			     
				(this.Behaviorid == null) ? string.Empty : this.Behaviorid.ToString(),
			     
				(this.Scorelevel == null) ? string.Empty : this.Scorelevel.ToString(),
			     
				(this.Score == null) ? string.Empty : this.Score.ToString(),
			     
				(this.Evltimes == null) ? string.Empty : this.Evltimes.ToString(),
			     
				(this.ModelId == null) ? string.Empty : this.ModelId.ToString(),
			     
				(this.Assessmentname == null) ? string.Empty : this.Assessmentname.ToString(),
			     
				(this.CatalogOnename == null) ? string.Empty : this.CatalogOnename.ToString(),
			     
				(this.CatalogTwoname == null) ? string.Empty : this.CatalogTwoname.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the EvlVScore columns.
	/// </summary>
	[Serializable]
	public enum EvlVScoreColumn
	{
		/// <summary>
		/// id : 
		/// </summary>
		[EnumTextValue("id")]
		[ColumnEnum("id", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		Id,
		/// <summary>
		/// userid : 
		/// </summary>
		[EnumTextValue("userid")]
		[ColumnEnum("userid", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Userid,
		/// <summary>
		/// assessmentid : 
		/// </summary>
		[EnumTextValue("assessmentid")]
		[ColumnEnum("assessmentid", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Assessmentid,
		/// <summary>
		/// catalog_oneid : 
		/// </summary>
		[EnumTextValue("catalog_oneid")]
		[ColumnEnum("catalog_oneid", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CatalogOneid,
		/// <summary>
		/// catalog_twoid : 
		/// </summary>
		[EnumTextValue("catalog_twoid")]
		[ColumnEnum("catalog_twoid", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CatalogTwoid,
		/// <summary>
		/// behaviorid : 
		/// </summary>
		[EnumTextValue("behaviorid")]
		[ColumnEnum("behaviorid", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Behaviorid,
		/// <summary>
		/// scorelevel : 
		/// </summary>
		[EnumTextValue("scorelevel")]
		[ColumnEnum("scorelevel", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Scorelevel,
		/// <summary>
		/// score : 
		/// </summary>
		[EnumTextValue("score")]
		[ColumnEnum("score", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Score,
		/// <summary>
		/// evltimes : 
		/// </summary>
		[EnumTextValue("evltimes")]
		[ColumnEnum("evltimes", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Evltimes,
		/// <summary>
		/// model_id : 
		/// </summary>
		[EnumTextValue("model_id")]
		[ColumnEnum("model_id", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ModelId,
		/// <summary>
		/// assessmentname : 
		/// </summary>
		[EnumTextValue("assessmentname")]
		[ColumnEnum("assessmentname", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Assessmentname,
		/// <summary>
		/// catalog_onename : 
		/// </summary>
		[EnumTextValue("catalog_onename")]
		[ColumnEnum("catalog_onename", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 2000)]
		CatalogOnename,
		/// <summary>
		/// catalog_twoname : 
		/// </summary>
		[EnumTextValue("catalog_twoname")]
		[ColumnEnum("catalog_twoname", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 2000)]
		CatalogTwoname
	}//End enum

} // end namespace
