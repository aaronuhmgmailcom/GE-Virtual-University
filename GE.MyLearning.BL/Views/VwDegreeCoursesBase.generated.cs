/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file VwDegreeCourses.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace GE.MyLearning.BL
{
	///<summary>
	/// An object representation of the 'VW_DegreeCourses' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("VwDegreeCoursesBase")]
	public abstract partial class VwDegreeCoursesBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// DegreeId : 
		/// </summary>
		private System.Int32		  _degreeId = (int)0;
		
		/// <summary>
		/// DegreeName : 
		/// </summary>
		private System.String		  _degreeName = null;
		
		/// <summary>
		/// DegreesDescription : 
		/// </summary>
		private System.String		  _degreesDescription = null;
		
		/// <summary>
		/// Credithour : 
		/// </summary>
		private System.Int32?		  _credithour = null;
		
		/// <summary>
		/// DegreeStatus : 
		/// </summary>
		private System.Int32?		  _degreeStatus = null;
		
		/// <summary>
		/// DegreeCourseID : 
		/// </summary>
		private System.Int32		  _degreeCourseId = (int)0;
		
		/// <summary>
		/// CourseName : 
		/// </summary>
		private System.String		  _courseName = null;
		
		/// <summary>
		/// CourseStyle : 
		/// </summary>
		private System.Int32?		  _courseStyle = null;
		
		/// <summary>
		/// CourseId : 
		/// </summary>
		private System.String		  _courseId = null;
		
		/// <summary>
		/// DegreeCoursesDescription : 
		/// </summary>
		private System.String		  _degreeCoursesDescription = null;
		
		/// <summary>
		/// DegreeCoursesCreditHour : 
		/// </summary>
		private System.Int32?		  _degreeCoursesCreditHour = null;
		
		/// <summary>
		/// DegreeCourseStatus : 
		/// </summary>
		private System.Int32		  _degreeCourseStatus = (int)0;
		
		/// <summary>
		/// IsRequiredCourse : 
		/// </summary>
		private System.Int32		  _isRequiredCourse = (int)0;
		
		/// <summary>
		/// InstituteId : 
		/// </summary>
		private System.String		  _instituteId = string.Empty;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="VwDegreeCoursesBase"/> instance.
		///</summary>
		public VwDegreeCoursesBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="VwDegreeCoursesBase"/> instance.
		///</summary>
		///<param name="_degreeId"></param>
		///<param name="_degreeName"></param>
		///<param name="_degreesDescription"></param>
		///<param name="_credithour"></param>
		///<param name="_degreeStatus"></param>
		///<param name="_degreeCourseId"></param>
		///<param name="_courseName"></param>
		///<param name="_courseStyle"></param>
		///<param name="_courseId"></param>
		///<param name="_degreeCoursesDescription"></param>
		///<param name="_degreeCoursesCreditHour"></param>
		///<param name="_degreeCourseStatus"></param>
		///<param name="_isRequiredCourse"></param>
		///<param name="_instituteId"></param>
		public VwDegreeCoursesBase(System.Int32 _degreeId, System.String _degreeName, System.String _degreesDescription, System.Int32? _credithour, System.Int32? _degreeStatus, System.Int32 _degreeCourseId, System.String _courseName, System.Int32? _courseStyle, System.String _courseId, System.String _degreeCoursesDescription, System.Int32? _degreeCoursesCreditHour, System.Int32 _degreeCourseStatus, System.Int32 _isRequiredCourse, System.String _instituteId)
		{
			this._degreeId = _degreeId;
			this._degreeName = _degreeName;
			this._degreesDescription = _degreesDescription;
			this._credithour = _credithour;
			this._degreeStatus = _degreeStatus;
			this._degreeCourseId = _degreeCourseId;
			this._courseName = _courseName;
			this._courseStyle = _courseStyle;
			this._courseId = _courseId;
			this._degreeCoursesDescription = _degreeCoursesDescription;
			this._degreeCoursesCreditHour = _degreeCoursesCreditHour;
			this._degreeCourseStatus = _degreeCourseStatus;
			this._isRequiredCourse = _isRequiredCourse;
			this._instituteId = _instituteId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="VwDegreeCourses"/> instance.
		///</summary>
		///<param name="_degreeId"></param>
		///<param name="_degreeName"></param>
		///<param name="_degreesDescription"></param>
		///<param name="_credithour"></param>
		///<param name="_degreeStatus"></param>
		///<param name="_degreeCourseId"></param>
		///<param name="_courseName"></param>
		///<param name="_courseStyle"></param>
		///<param name="_courseId"></param>
		///<param name="_degreeCoursesDescription"></param>
		///<param name="_degreeCoursesCreditHour"></param>
		///<param name="_degreeCourseStatus"></param>
		///<param name="_isRequiredCourse"></param>
		///<param name="_instituteId"></param>
		public static VwDegreeCourses CreateVwDegreeCourses(System.Int32 _degreeId, System.String _degreeName, System.String _degreesDescription, System.Int32? _credithour, System.Int32? _degreeStatus, System.Int32 _degreeCourseId, System.String _courseName, System.Int32? _courseStyle, System.String _courseId, System.String _degreeCoursesDescription, System.Int32? _degreeCoursesCreditHour, System.Int32 _degreeCourseStatus, System.Int32 _isRequiredCourse, System.String _instituteId)
		{
			VwDegreeCourses newVwDegreeCourses = new VwDegreeCourses();
			newVwDegreeCourses.DegreeId = _degreeId;
			newVwDegreeCourses.DegreeName = _degreeName;
			newVwDegreeCourses.DegreesDescription = _degreesDescription;
			newVwDegreeCourses.Credithour = _credithour;
			newVwDegreeCourses.DegreeStatus = _degreeStatus;
			newVwDegreeCourses.DegreeCourseId = _degreeCourseId;
			newVwDegreeCourses.CourseName = _courseName;
			newVwDegreeCourses.CourseStyle = _courseStyle;
			newVwDegreeCourses.CourseId = _courseId;
			newVwDegreeCourses.DegreeCoursesDescription = _degreeCoursesDescription;
			newVwDegreeCourses.DegreeCoursesCreditHour = _degreeCoursesCreditHour;
			newVwDegreeCourses.DegreeCourseStatus = _degreeCourseStatus;
			newVwDegreeCourses.IsRequiredCourse = _isRequiredCourse;
			newVwDegreeCourses.InstituteId = _instituteId;
			return newVwDegreeCourses;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the DegreeId property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 DegreeId
		{
			get
			{
				return this._degreeId; 
			}
			set
			{
				if (_degreeId == value)
					return;
					
				this._degreeId = value;
				this._isDirty = true;
				
				OnPropertyChanged("DegreeId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DegreeName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DegreeName
		{
			get
			{
				return this._degreeName; 
			}
			set
			{
				if (_degreeName == value)
					return;
					
				this._degreeName = value;
				this._isDirty = true;
				
				OnPropertyChanged("DegreeName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DegreesDescription property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DegreesDescription
		{
			get
			{
				return this._degreesDescription; 
			}
			set
			{
				if (_degreesDescription == value)
					return;
					
				this._degreesDescription = value;
				this._isDirty = true;
				
				OnPropertyChanged("DegreesDescription");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Credithour property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCredithourNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? Credithour
		{
			get
			{
				return this._credithour; 
			}
			set
			{
				if (_credithour == value && Credithour != null )
					return;
					
				this._credithour = value;
				this._isDirty = true;
				
				OnPropertyChanged("Credithour");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DegreeStatus property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDegreeStatusNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? DegreeStatus
		{
			get
			{
				return this._degreeStatus; 
			}
			set
			{
				if (_degreeStatus == value && DegreeStatus != null )
					return;
					
				this._degreeStatus = value;
				this._isDirty = true;
				
				OnPropertyChanged("DegreeStatus");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DegreeCourseID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 DegreeCourseId
		{
			get
			{
				return this._degreeCourseId; 
			}
			set
			{
				if (_degreeCourseId == value)
					return;
					
				this._degreeCourseId = value;
				this._isDirty = true;
				
				OnPropertyChanged("DegreeCourseId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CourseName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CourseName
		{
			get
			{
				return this._courseName; 
			}
			set
			{
				if (_courseName == value)
					return;
					
				this._courseName = value;
				this._isDirty = true;
				
				OnPropertyChanged("CourseName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CourseStyle property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCourseStyleNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? CourseStyle
		{
			get
			{
				return this._courseStyle; 
			}
			set
			{
				if (_courseStyle == value && CourseStyle != null )
					return;
					
				this._courseStyle = value;
				this._isDirty = true;
				
				OnPropertyChanged("CourseStyle");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CourseId property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CourseId
		{
			get
			{
				return this._courseId; 
			}
			set
			{
				if (_courseId == value)
					return;
					
				this._courseId = value;
				this._isDirty = true;
				
				OnPropertyChanged("CourseId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DegreeCoursesDescription property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DegreeCoursesDescription
		{
			get
			{
				return this._degreeCoursesDescription; 
			}
			set
			{
				if (_degreeCoursesDescription == value)
					return;
					
				this._degreeCoursesDescription = value;
				this._isDirty = true;
				
				OnPropertyChanged("DegreeCoursesDescription");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DegreeCoursesCreditHour property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDegreeCoursesCreditHourNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? DegreeCoursesCreditHour
		{
			get
			{
				return this._degreeCoursesCreditHour; 
			}
			set
			{
				if (_degreeCoursesCreditHour == value && DegreeCoursesCreditHour != null )
					return;
					
				this._degreeCoursesCreditHour = value;
				this._isDirty = true;
				
				OnPropertyChanged("DegreeCoursesCreditHour");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DegreeCourseStatus property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 DegreeCourseStatus
		{
			get
			{
				return this._degreeCourseStatus; 
			}
			set
			{
				if (_degreeCourseStatus == value)
					return;
					
				this._degreeCourseStatus = value;
				this._isDirty = true;
				
				OnPropertyChanged("DegreeCourseStatus");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the IsRequiredCourse property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 IsRequiredCourse
		{
			get
			{
				return this._isRequiredCourse; 
			}
			set
			{
				if (_isRequiredCourse == value)
					return;
					
				this._isRequiredCourse = value;
				this._isDirty = true;
				
				OnPropertyChanged("IsRequiredCourse");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the InstituteId property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String InstituteId
		{
			get
			{
				return this._instituteId; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "InstituteId does not allow null values.");
				if (_instituteId == value)
					return;
					
				this._instituteId = value;
				this._isDirty = true;
				
				OnPropertyChanged("InstituteId");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "VW_DegreeCourses"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed VwDegreeCoursesBase Entity 
		///</summary>
		public virtual VwDegreeCoursesBase Copy()
		{
			//shallow copy entity
			VwDegreeCourses copy = new VwDegreeCourses();
				copy.DegreeId = this.DegreeId;
				copy.DegreeName = this.DegreeName;
				copy.DegreesDescription = this.DegreesDescription;
				copy.Credithour = this.Credithour;
				copy.DegreeStatus = this.DegreeStatus;
				copy.DegreeCourseId = this.DegreeCourseId;
				copy.CourseName = this.CourseName;
				copy.CourseStyle = this.CourseStyle;
				copy.CourseId = this.CourseId;
				copy.DegreeCoursesDescription = this.DegreeCoursesDescription;
				copy.DegreeCoursesCreditHour = this.DegreeCoursesCreditHour;
				copy.DegreeCourseStatus = this.DegreeCourseStatus;
				copy.IsRequiredCourse = this.IsRequiredCourse;
				copy.InstituteId = this.InstituteId;
			copy.AcceptChanges();
			return (VwDegreeCourses)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="VwDegreeCoursesBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(VwDegreeCoursesBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="VwDegreeCoursesBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="VwDegreeCoursesBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="VwDegreeCoursesBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(VwDegreeCoursesBase Object1, VwDegreeCoursesBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.DegreeId != Object2.DegreeId)
				equal = false;
			if (Object1.DegreeName != null && Object2.DegreeName != null )
			{
				if (Object1.DegreeName != Object2.DegreeName)
					equal = false;
			}
			else if (Object1.DegreeName == null ^ Object1.DegreeName == null )
			{
				equal = false;
			}
			if (Object1.DegreesDescription != null && Object2.DegreesDescription != null )
			{
				if (Object1.DegreesDescription != Object2.DegreesDescription)
					equal = false;
			}
			else if (Object1.DegreesDescription == null ^ Object1.DegreesDescription == null )
			{
				equal = false;
			}
			if (Object1.Credithour != null && Object2.Credithour != null )
			{
				if (Object1.Credithour != Object2.Credithour)
					equal = false;
			}
			else if (Object1.Credithour == null ^ Object1.Credithour == null )
			{
				equal = false;
			}
			if (Object1.DegreeStatus != null && Object2.DegreeStatus != null )
			{
				if (Object1.DegreeStatus != Object2.DegreeStatus)
					equal = false;
			}
			else if (Object1.DegreeStatus == null ^ Object1.DegreeStatus == null )
			{
				equal = false;
			}
			if (Object1.DegreeCourseId != Object2.DegreeCourseId)
				equal = false;
			if (Object1.CourseName != null && Object2.CourseName != null )
			{
				if (Object1.CourseName != Object2.CourseName)
					equal = false;
			}
			else if (Object1.CourseName == null ^ Object1.CourseName == null )
			{
				equal = false;
			}
			if (Object1.CourseStyle != null && Object2.CourseStyle != null )
			{
				if (Object1.CourseStyle != Object2.CourseStyle)
					equal = false;
			}
			else if (Object1.CourseStyle == null ^ Object1.CourseStyle == null )
			{
				equal = false;
			}
			if (Object1.CourseId != null && Object2.CourseId != null )
			{
				if (Object1.CourseId != Object2.CourseId)
					equal = false;
			}
			else if (Object1.CourseId == null ^ Object1.CourseId == null )
			{
				equal = false;
			}
			if (Object1.DegreeCoursesDescription != null && Object2.DegreeCoursesDescription != null )
			{
				if (Object1.DegreeCoursesDescription != Object2.DegreeCoursesDescription)
					equal = false;
			}
			else if (Object1.DegreeCoursesDescription == null ^ Object1.DegreeCoursesDescription == null )
			{
				equal = false;
			}
			if (Object1.DegreeCoursesCreditHour != null && Object2.DegreeCoursesCreditHour != null )
			{
				if (Object1.DegreeCoursesCreditHour != Object2.DegreeCoursesCreditHour)
					equal = false;
			}
			else if (Object1.DegreeCoursesCreditHour == null ^ Object1.DegreeCoursesCreditHour == null )
			{
				equal = false;
			}
			if (Object1.DegreeCourseStatus != Object2.DegreeCourseStatus)
				equal = false;
			if (Object1.IsRequiredCourse != Object2.IsRequiredCourse)
				equal = false;
			if (Object1.InstituteId != Object2.InstituteId)
				equal = false;
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(VwDegreeCourses entity, string propertyName)
		{
			switch (propertyName)
			{
				case "DegreeId":
					return entity.DegreeId;
				case "DegreeName":
					return entity.DegreeName;
				case "DegreesDescription":
					return entity.DegreesDescription;
				case "Credithour":
					return entity.Credithour;
				case "DegreeStatus":
					return entity.DegreeStatus;
				case "DegreeCourseId":
					return entity.DegreeCourseId;
				case "CourseName":
					return entity.CourseName;
				case "CourseStyle":
					return entity.CourseStyle;
				case "CourseId":
					return entity.CourseId;
				case "DegreeCoursesDescription":
					return entity.DegreeCoursesDescription;
				case "DegreeCoursesCreditHour":
					return entity.DegreeCoursesCreditHour;
				case "DegreeCourseStatus":
					return entity.DegreeCourseStatus;
				case "IsRequiredCourse":
					return entity.IsRequiredCourse;
				case "InstituteId":
					return entity.InstituteId;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as VwDegreeCourses, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{15}{14}- DegreeId: {0}{14}- DegreeName: {1}{14}- DegreesDescription: {2}{14}- Credithour: {3}{14}- DegreeStatus: {4}{14}- DegreeCourseId: {5}{14}- CourseName: {6}{14}- CourseStyle: {7}{14}- CourseId: {8}{14}- DegreeCoursesDescription: {9}{14}- DegreeCoursesCreditHour: {10}{14}- DegreeCourseStatus: {11}{14}- IsRequiredCourse: {12}{14}- InstituteId: {13}{14}", 
				this.DegreeId,
				(this.DegreeName == null) ? string.Empty : this.DegreeName.ToString(),
			     
				(this.DegreesDescription == null) ? string.Empty : this.DegreesDescription.ToString(),
			     
				(this.Credithour == null) ? string.Empty : this.Credithour.ToString(),
			     
				(this.DegreeStatus == null) ? string.Empty : this.DegreeStatus.ToString(),
			     
				this.DegreeCourseId,
				(this.CourseName == null) ? string.Empty : this.CourseName.ToString(),
			     
				(this.CourseStyle == null) ? string.Empty : this.CourseStyle.ToString(),
			     
				(this.CourseId == null) ? string.Empty : this.CourseId.ToString(),
			     
				(this.DegreeCoursesDescription == null) ? string.Empty : this.DegreeCoursesDescription.ToString(),
			     
				(this.DegreeCoursesCreditHour == null) ? string.Empty : this.DegreeCoursesCreditHour.ToString(),
			     
				this.DegreeCourseStatus,
				this.IsRequiredCourse,
				this.InstituteId,
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the VwDegreeCourses columns.
	/// </summary>
	[Serializable]
	public enum VwDegreeCoursesColumn
	{
		/// <summary>
		/// DegreeId : 
		/// </summary>
		[EnumTextValue("DegreeId")]
		[ColumnEnum("DegreeId", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		DegreeId,
		/// <summary>
		/// DegreeName : 
		/// </summary>
		[EnumTextValue("DegreeName")]
		[ColumnEnum("DegreeName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 150)]
		DegreeName,
		/// <summary>
		/// DegreesDescription : 
		/// </summary>
		[EnumTextValue("DegreesDescription")]
		[ColumnEnum("DegreesDescription", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 500)]
		DegreesDescription,
		/// <summary>
		/// Credithour : 
		/// </summary>
		[EnumTextValue("Credithour")]
		[ColumnEnum("Credithour", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Credithour,
		/// <summary>
		/// DegreeStatus : 
		/// </summary>
		[EnumTextValue("DegreeStatus")]
		[ColumnEnum("DegreeStatus", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DegreeStatus,
		/// <summary>
		/// DegreeCourseID : 
		/// </summary>
		[EnumTextValue("DegreeCourseID")]
		[ColumnEnum("DegreeCourseID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		DegreeCourseId,
		/// <summary>
		/// CourseName : 
		/// </summary>
		[EnumTextValue("CourseName")]
		[ColumnEnum("CourseName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 150)]
		CourseName,
		/// <summary>
		/// CourseStyle : 
		/// </summary>
		[EnumTextValue("CourseStyle")]
		[ColumnEnum("CourseStyle", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CourseStyle,
		/// <summary>
		/// CourseId : 
		/// </summary>
		[EnumTextValue("CourseId")]
		[ColumnEnum("CourseId", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		CourseId,
		/// <summary>
		/// DegreeCoursesDescription : 
		/// </summary>
		[EnumTextValue("DegreeCoursesDescription")]
		[ColumnEnum("DegreeCoursesDescription", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 500)]
		DegreeCoursesDescription,
		/// <summary>
		/// DegreeCoursesCreditHour : 
		/// </summary>
		[EnumTextValue("DegreeCoursesCreditHour")]
		[ColumnEnum("DegreeCoursesCreditHour", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DegreeCoursesCreditHour,
		/// <summary>
		/// DegreeCourseStatus : 
		/// </summary>
		[EnumTextValue("DegreeCourseStatus")]
		[ColumnEnum("DegreeCourseStatus", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		DegreeCourseStatus,
		/// <summary>
		/// IsRequiredCourse : 
		/// </summary>
		[EnumTextValue("IsRequiredCourse")]
		[ColumnEnum("IsRequiredCourse", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		IsRequiredCourse,
		/// <summary>
		/// InstituteId : 
		/// </summary>
		[EnumTextValue("InstituteId")]
		[ColumnEnum("InstituteId", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		InstituteId
	}//End enum

} // end namespace
