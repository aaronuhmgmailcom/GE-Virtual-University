
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file LearningRecordExcel.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using Microsoft.Practices.EnterpriseLibrary.Validation.Validators;
using Microsoft.Practices.EnterpriseLibrary.Validation;

using GE.MyLearning.BL.Validation;
#endregion

namespace GE.MyLearning.BL
{
	///<summary>
	/// An object representation of the 'LearningRecordExcel' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class LearningRecordExcelBase : EntityBase, ILearningRecordExcel, IEntityId<LearningRecordExcelKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private LearningRecordExcelEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private LearningRecordExcelEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private LearningRecordExcelEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<LearningRecordExcel> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event LearningRecordExcelEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event LearningRecordExcelEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="LearningRecordExcelBase"/> instance.
		///</summary>
		public LearningRecordExcelBase()
		{
			this.entityData = new LearningRecordExcelEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="LearningRecordExcelBase"/> instance.
		///</summary>
		///<param name="_courseName"></param>
		///<param name="_sso"></param>
		///<param name="_userName"></param>
		///<param name="_function"></param>
		///<param name="_startDate"></param>
		///<param name="_completedDate"></param>
		///<param name="_location"></param>
		///<param name="_trainer"></param>
		///<param name="_courseid"></param>
		///<param name="_createdDate"></param>
		public LearningRecordExcelBase(System.String _courseName, System.String _sso, 
			System.String _userName, System.String _function, System.DateTime? _startDate, 
			System.DateTime? _completedDate, System.String _location, System.String _trainer, 
			System.String _courseid, System.DateTime? _createdDate)
		{
			this.entityData = new LearningRecordExcelEntityData();
			this.backupData = null;

			this.CourseName = _courseName;
			this.Sso = _sso;
			this.UserName = _userName;
			this.Function = _function;
			this.StartDate = _startDate;
			this.CompletedDate = _completedDate;
			this.Location = _location;
			this.Trainer = _trainer;
			this.Courseid = _courseid;
			this.CreatedDate = _createdDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="LearningRecordExcel"/> instance.
		///</summary>
		///<param name="_courseName"></param>
		///<param name="_sso"></param>
		///<param name="_userName"></param>
		///<param name="_function"></param>
		///<param name="_startDate"></param>
		///<param name="_completedDate"></param>
		///<param name="_location"></param>
		///<param name="_trainer"></param>
		///<param name="_courseid"></param>
		///<param name="_createdDate"></param>
		public static LearningRecordExcel CreateLearningRecordExcel(System.String _courseName, System.String _sso, 
			System.String _userName, System.String _function, System.DateTime? _startDate, 
			System.DateTime? _completedDate, System.String _location, System.String _trainer, 
			System.String _courseid, System.DateTime? _createdDate)
		{
			LearningRecordExcel newLearningRecordExcel = new LearningRecordExcel();
			newLearningRecordExcel.CourseName = _courseName;
			newLearningRecordExcel.Sso = _sso;
			newLearningRecordExcel.UserName = _userName;
			newLearningRecordExcel.Function = _function;
			newLearningRecordExcel.StartDate = _startDate;
			newLearningRecordExcel.CompletedDate = _completedDate;
			newLearningRecordExcel.Location = _location;
			newLearningRecordExcel.Trainer = _trainer;
			newLearningRecordExcel.Courseid = _courseid;
			newLearningRecordExcel.CreatedDate = _createdDate;
			return newLearningRecordExcel;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the CourseName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="CourseName")]
		[ValidatorComposition(CompositionType.Or, Tag="CourseName")]
		[StringLengthValidator(255, MessageTemplate="Maximum length has been exceeded.", Tag="CourseName")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String CourseName
		{
			get
			{
				return this.entityData.CourseName; 
			}
			
			set
			{
				if (this.entityData.CourseName == value)
					return;
					
				OnColumnChanging(LearningRecordExcelColumn.CourseName, this.entityData.CourseName);
				this.entityData.CourseName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LearningRecordExcelColumn.CourseName, this.entityData.CourseName);
				OnPropertyChanged("CourseName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Sso property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="SSO")]
		[ValidatorComposition(CompositionType.Or, Tag="SSO")]
		[StringLengthValidator(20, MessageTemplate="Maximum length has been exceeded.", Tag="SSO")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String Sso
		{
			get
			{
				return this.entityData.Sso; 
			}
			
			set
			{
				if (this.entityData.Sso == value)
					return;
					
				OnColumnChanging(LearningRecordExcelColumn.Sso, this.entityData.Sso);
				this.entityData.Sso = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LearningRecordExcelColumn.Sso, this.entityData.Sso);
				OnPropertyChanged("Sso");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="UserName")]
		[ValidatorComposition(CompositionType.Or, Tag="UserName")]
		[StringLengthValidator(255, MessageTemplate="Maximum length has been exceeded.", Tag="UserName")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String UserName
		{
			get
			{
				return this.entityData.UserName; 
			}
			
			set
			{
				if (this.entityData.UserName == value)
					return;
					
				OnColumnChanging(LearningRecordExcelColumn.UserName, this.entityData.UserName);
				this.entityData.UserName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LearningRecordExcelColumn.UserName, this.entityData.UserName);
				OnPropertyChanged("UserName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Function property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="Function")]
		[ValidatorComposition(CompositionType.Or, Tag="Function")]
		[StringLengthValidator(255, MessageTemplate="Maximum length has been exceeded.", Tag="Function")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String Function
		{
			get
			{
				return this.entityData.Function; 
			}
			
			set
			{
				if (this.entityData.Function == value)
					return;
					
				OnColumnChanging(LearningRecordExcelColumn.Function, this.entityData.Function);
				this.entityData.Function = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LearningRecordExcelColumn.Function, this.entityData.Function);
				OnPropertyChanged("Function");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StartDate property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsStartDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? StartDate
		{
			get
			{
				return this.entityData.StartDate; 
			}
			
			set
			{
				if (this.entityData.StartDate == value)
					return;
					
				OnColumnChanging(LearningRecordExcelColumn.StartDate, this.entityData.StartDate);
				this.entityData.StartDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LearningRecordExcelColumn.StartDate, this.entityData.StartDate);
				OnPropertyChanged("StartDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CompletedDate property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCompletedDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CompletedDate
		{
			get
			{
				return this.entityData.CompletedDate; 
			}
			
			set
			{
				if (this.entityData.CompletedDate == value)
					return;
					
				OnColumnChanging(LearningRecordExcelColumn.CompletedDate, this.entityData.CompletedDate);
				this.entityData.CompletedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LearningRecordExcelColumn.CompletedDate, this.entityData.CompletedDate);
				OnPropertyChanged("CompletedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Location property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="Location")]
		[ValidatorComposition(CompositionType.Or, Tag="Location")]
		[StringLengthValidator(255, MessageTemplate="Maximum length has been exceeded.", Tag="Location")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String Location
		{
			get
			{
				return this.entityData.Location; 
			}
			
			set
			{
				if (this.entityData.Location == value)
					return;
					
				OnColumnChanging(LearningRecordExcelColumn.Location, this.entityData.Location);
				this.entityData.Location = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LearningRecordExcelColumn.Location, this.entityData.Location);
				OnPropertyChanged("Location");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Trainer property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="Trainer")]
		[ValidatorComposition(CompositionType.Or, Tag="Trainer")]
		[StringLengthValidator(255, MessageTemplate="Maximum length has been exceeded.", Tag="Trainer")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String Trainer
		{
			get
			{
				return this.entityData.Trainer; 
			}
			
			set
			{
				if (this.entityData.Trainer == value)
					return;
					
				OnColumnChanging(LearningRecordExcelColumn.Trainer, this.entityData.Trainer);
				this.entityData.Trainer = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LearningRecordExcelColumn.Trainer, this.entityData.Trainer);
				OnPropertyChanged("Trainer");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Courseid property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="courseid")]
		[ValidatorComposition(CompositionType.Or, Tag="courseid")]
		[StringLengthValidator(50, MessageTemplate="Maximum length has been exceeded.", Tag="courseid")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Courseid
		{
			get
			{
				return this.entityData.Courseid; 
			}
			
			set
			{
				if (this.entityData.Courseid == value)
					return;
					
				OnColumnChanging(LearningRecordExcelColumn.Courseid, this.entityData.Courseid);
				this.entityData.Courseid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LearningRecordExcelColumn.Courseid, this.entityData.Courseid);
				OnPropertyChanged("Courseid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(LearningRecordExcelColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LearningRecordExcelColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCreatedDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreatedDate
		{
			get
			{
				return this.entityData.CreatedDate; 
			}
			
			set
			{
				if (this.entityData.CreatedDate == value)
					return;
					
				OnColumnChanging(LearningRecordExcelColumn.CreatedDate, this.entityData.CreatedDate);
				this.entityData.CreatedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LearningRecordExcelColumn.CreatedDate, this.entityData.CreatedDate);
				OnPropertyChanged("CreatedDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "LearningRecordExcel"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"CourseName", "SSO", "UserName", "Function", "StartDate", "CompletedDate", "Location", "Trainer", "courseid", "ID", "CreatedDate"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as LearningRecordExcelEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (LearningRecordExcel) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<LearningRecordExcel>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as LearningRecordExcel);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed LearningRecordExcel Entity 
		///</summary>
		protected virtual LearningRecordExcel Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			LearningRecordExcel copy = new LearningRecordExcel();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.CourseName = this.CourseName;
				copy.Sso = this.Sso;
				copy.UserName = this.UserName;
				copy.Function = this.Function;
				copy.StartDate = this.StartDate;
				copy.CompletedDate = this.CompletedDate;
				copy.Location = this.Location;
				copy.Trainer = this.Trainer;
				copy.Courseid = this.Courseid;
				copy.Id = this.Id;
				copy.CreatedDate = this.CreatedDate;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed LearningRecordExcel Entity 
		///</summary>
		public virtual LearningRecordExcel Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed LearningRecordExcel Entity which is a deep copy of the current entity.
		///</summary>
		public virtual LearningRecordExcel DeepCopy()
		{
			return EntityHelper.Clone<LearningRecordExcel>(this as LearningRecordExcel);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as LearningRecordExcelEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new LearningRecordExcelEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as LearningRecordExcelEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(LearningRecordExcelColumn column)
		{
			switch(column)
			{
					case LearningRecordExcelColumn.CourseName:
					return entityData.CourseName != _originalData.CourseName;
					case LearningRecordExcelColumn.Sso:
					return entityData.Sso != _originalData.Sso;
					case LearningRecordExcelColumn.UserName:
					return entityData.UserName != _originalData.UserName;
					case LearningRecordExcelColumn.Function:
					return entityData.Function != _originalData.Function;
					case LearningRecordExcelColumn.StartDate:
					return entityData.StartDate != _originalData.StartDate;
					case LearningRecordExcelColumn.CompletedDate:
					return entityData.CompletedDate != _originalData.CompletedDate;
					case LearningRecordExcelColumn.Location:
					return entityData.Location != _originalData.Location;
					case LearningRecordExcelColumn.Trainer:
					return entityData.Trainer != _originalData.Trainer;
					case LearningRecordExcelColumn.Courseid:
					return entityData.Courseid != _originalData.Courseid;
					case LearningRecordExcelColumn.Id:
					return entityData.Id != _originalData.Id;
					case LearningRecordExcelColumn.CreatedDate:
					return entityData.CreatedDate != _originalData.CreatedDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< LearningRecordExcelColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.CourseName != _originalData.CourseName;
			result = result || entityData.Sso != _originalData.Sso;
			result = result || entityData.UserName != _originalData.UserName;
			result = result || entityData.Function != _originalData.Function;
			result = result || entityData.StartDate != _originalData.StartDate;
			result = result || entityData.CompletedDate != _originalData.CompletedDate;
			result = result || entityData.Location != _originalData.Location;
			result = result || entityData.Trainer != _originalData.Trainer;
			result = result || entityData.Courseid != _originalData.Courseid;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.CreatedDate != _originalData.CreatedDate;
			return result;
		}	
		
		///<summary>
		///  Returns a LearningRecordExcel Entity with the original data.
		///</summary>
		public LearningRecordExcel GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateLearningRecordExcel(
				_originalData.CourseName,
				_originalData.Sso,
				_originalData.UserName,
				_originalData.Function,
				_originalData.StartDate,
				_originalData.CompletedDate,
				_originalData.Location,
				_originalData.Trainer,
				_originalData.Courseid,
				_originalData.CreatedDate
				);
				
			return (LearningRecordExcel)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="LearningRecordExcelBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is LearningRecordExcelBase)
				return ValueEquals(this, (LearningRecordExcelBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="LearningRecordExcelBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return ((this.CourseName == null) ? string.Empty : this.CourseName.ToString()).GetHashCode() ^ 
					((this.Sso == null) ? string.Empty : this.Sso.ToString()).GetHashCode() ^ 
					((this.UserName == null) ? string.Empty : this.UserName.ToString()).GetHashCode() ^ 
					((this.Function == null) ? string.Empty : this.Function.ToString()).GetHashCode() ^ 
					((this.StartDate == null) ? string.Empty : this.StartDate.ToString()).GetHashCode() ^ 
					((this.CompletedDate == null) ? string.Empty : this.CompletedDate.ToString()).GetHashCode() ^ 
					((this.Location == null) ? string.Empty : this.Location.ToString()).GetHashCode() ^ 
					((this.Trainer == null) ? string.Empty : this.Trainer.ToString()).GetHashCode() ^ 
					((this.Courseid == null) ? string.Empty : this.Courseid.ToString()).GetHashCode() ^ 
					this.Id.GetHashCode() ^ 
					((this.CreatedDate == null) ? string.Empty : this.CreatedDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="LearningRecordExcelBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(LearningRecordExcelBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="LearningRecordExcelBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="LearningRecordExcelBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="LearningRecordExcelBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(LearningRecordExcelBase Object1, LearningRecordExcelBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if ( Object1.CourseName != null && Object2.CourseName != null )
			{
				if (Object1.CourseName != Object2.CourseName)
					equal = false;
			}
			else if (Object1.CourseName == null ^ Object2.CourseName == null )
			{
				equal = false;
			}
			if ( Object1.Sso != null && Object2.Sso != null )
			{
				if (Object1.Sso != Object2.Sso)
					equal = false;
			}
			else if (Object1.Sso == null ^ Object2.Sso == null )
			{
				equal = false;
			}
			if ( Object1.UserName != null && Object2.UserName != null )
			{
				if (Object1.UserName != Object2.UserName)
					equal = false;
			}
			else if (Object1.UserName == null ^ Object2.UserName == null )
			{
				equal = false;
			}
			if ( Object1.Function != null && Object2.Function != null )
			{
				if (Object1.Function != Object2.Function)
					equal = false;
			}
			else if (Object1.Function == null ^ Object2.Function == null )
			{
				equal = false;
			}
			if ( Object1.StartDate != null && Object2.StartDate != null )
			{
				if (Object1.StartDate != Object2.StartDate)
					equal = false;
			}
			else if (Object1.StartDate == null ^ Object2.StartDate == null )
			{
				equal = false;
			}
			if ( Object1.CompletedDate != null && Object2.CompletedDate != null )
			{
				if (Object1.CompletedDate != Object2.CompletedDate)
					equal = false;
			}
			else if (Object1.CompletedDate == null ^ Object2.CompletedDate == null )
			{
				equal = false;
			}
			if ( Object1.Location != null && Object2.Location != null )
			{
				if (Object1.Location != Object2.Location)
					equal = false;
			}
			else if (Object1.Location == null ^ Object2.Location == null )
			{
				equal = false;
			}
			if ( Object1.Trainer != null && Object2.Trainer != null )
			{
				if (Object1.Trainer != Object2.Trainer)
					equal = false;
			}
			else if (Object1.Trainer == null ^ Object2.Trainer == null )
			{
				equal = false;
			}
			if ( Object1.Courseid != null && Object2.Courseid != null )
			{
				if (Object1.Courseid != Object2.Courseid)
					equal = false;
			}
			else if (Object1.Courseid == null ^ Object2.Courseid == null )
			{
				equal = false;
			}
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.CreatedDate != null && Object2.CreatedDate != null )
			{
				if (Object1.CreatedDate != Object2.CreatedDate)
					equal = false;
			}
			else if (Object1.CreatedDate == null ^ Object2.CreatedDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((LearningRecordExcelBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static LearningRecordExcelComparer GetComparer()
        {
            return new LearningRecordExcelComparer();
        }
        */

        // Comparer delegates back to LearningRecordExcel
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(LearningRecordExcel rhs, LearningRecordExcelColumn which)
        {
            switch (which)
            {
            	
            	
            	case LearningRecordExcelColumn.CourseName:
            		return this.CourseName.CompareTo(rhs.CourseName);
            		
            		                 
            	
            	
            	case LearningRecordExcelColumn.Sso:
            		return this.Sso.CompareTo(rhs.Sso);
            		
            		                 
            	
            	
            	case LearningRecordExcelColumn.UserName:
            		return this.UserName.CompareTo(rhs.UserName);
            		
            		                 
            	
            	
            	case LearningRecordExcelColumn.Function:
            		return this.Function.CompareTo(rhs.Function);
            		
            		                 
            	
            	
            	case LearningRecordExcelColumn.StartDate:
            		return this.StartDate.Value.CompareTo(rhs.StartDate.Value);
            		
            		                 
            	
            	
            	case LearningRecordExcelColumn.CompletedDate:
            		return this.CompletedDate.Value.CompareTo(rhs.CompletedDate.Value);
            		
            		                 
            	
            	
            	case LearningRecordExcelColumn.Location:
            		return this.Location.CompareTo(rhs.Location);
            		
            		                 
            	
            	
            	case LearningRecordExcelColumn.Trainer:
            		return this.Trainer.CompareTo(rhs.Trainer);
            		
            		                 
            	
            	
            	case LearningRecordExcelColumn.Courseid:
            		return this.Courseid.CompareTo(rhs.Courseid);
            		
            		                 
            	
            	
            	case LearningRecordExcelColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case LearningRecordExcelColumn.CreatedDate:
            		return this.CreatedDate.Value.CompareTo(rhs.CreatedDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<LearningRecordExcelKey> Members
		
		// member variable for the EntityId property
		private LearningRecordExcelKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual LearningRecordExcelKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new LearningRecordExcelKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("LearningRecordExcel")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{12}{11}- CourseName: {0}{11}- Sso: {1}{11}- UserName: {2}{11}- Function: {3}{11}- StartDate: {4}{11}- CompletedDate: {5}{11}- Location: {6}{11}- Trainer: {7}{11}- Courseid: {8}{11}- Id: {9}{11}- CreatedDate: {10}{11}{13}", 
				(this.CourseName == null) ? string.Empty : this.CourseName.ToString(),
				(this.Sso == null) ? string.Empty : this.Sso.ToString(),
				(this.UserName == null) ? string.Empty : this.UserName.ToString(),
				(this.Function == null) ? string.Empty : this.Function.ToString(),
				(this.StartDate == null) ? string.Empty : this.StartDate.ToString(),
				(this.CompletedDate == null) ? string.Empty : this.CompletedDate.ToString(),
				(this.Location == null) ? string.Empty : this.Location.ToString(),
				(this.Trainer == null) ? string.Empty : this.Trainer.ToString(),
				(this.Courseid == null) ? string.Empty : this.Courseid.ToString(),
				this.Id,
				(this.CreatedDate == null) ? string.Empty : this.CreatedDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'LearningRecordExcel' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class LearningRecordExcelEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "LearningRecordExcel"</remarks>
		public System.Int32 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// CourseName : 
		/// </summary>
		public System.String		  CourseName = null;
		
		/// <summary>
		/// SSO : 
		/// </summary>
		public System.String		  Sso = null;
		
		/// <summary>
		/// UserName : 
		/// </summary>
		public System.String		  UserName = null;
		
		/// <summary>
		/// Function : 
		/// </summary>
		public System.String		  Function = null;
		
		/// <summary>
		/// StartDate : 
		/// </summary>
		public System.DateTime?		  StartDate = null;
		
		/// <summary>
		/// CompletedDate : 
		/// </summary>
		public System.DateTime?		  CompletedDate = null;
		
		/// <summary>
		/// Location : 
		/// </summary>
		public System.String		  Location = null;
		
		/// <summary>
		/// Trainer : 
		/// </summary>
		public System.String		  Trainer = null;
		
		/// <summary>
		/// courseid : 
		/// </summary>
		public System.String		  Courseid = null;
		
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		public System.DateTime?		  CreatedDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			LearningRecordExcelEntityData _tmp = new LearningRecordExcelEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.CourseName = this.CourseName;
			_tmp.Sso = this.Sso;
			_tmp.UserName = this.UserName;
			_tmp.Function = this.Function;
			_tmp.StartDate = this.StartDate;
			_tmp.CompletedDate = this.CompletedDate;
			_tmp.Location = this.Location;
			_tmp.Trainer = this.Trainer;
			_tmp.Courseid = this.Courseid;
			_tmp.CreatedDate = this.CreatedDate;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			LearningRecordExcelEntityData _tmp = new LearningRecordExcelEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.CourseName = this.CourseName;
			_tmp.Sso = this.Sso;
			_tmp.UserName = this.UserName;
			_tmp.Function = this.Function;
			_tmp.StartDate = this.StartDate;
			_tmp.CompletedDate = this.CompletedDate;
			_tmp.Location = this.Location;
			_tmp.Trainer = this.Trainer;
			_tmp.Courseid = this.Courseid;
			_tmp.CreatedDate = this.CreatedDate;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="LearningRecordExcelColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(LearningRecordExcelColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="LearningRecordExcelColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(LearningRecordExcelColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="LearningRecordExcelColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(LearningRecordExcelColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				LearningRecordExcelEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new LearningRecordExcelEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="LearningRecordExcelColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(LearningRecordExcelColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				LearningRecordExcelEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new LearningRecordExcelEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region LearningRecordExcelEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="LearningRecordExcel"/> object.
	/// </remarks>
	public class LearningRecordExcelEventArgs : System.EventArgs
	{
		private LearningRecordExcelColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the LearningRecordExcelEventArgs class.
		///</summary>
		public LearningRecordExcelEventArgs(LearningRecordExcelColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the LearningRecordExcelEventArgs class.
		///</summary>
		public LearningRecordExcelEventArgs(LearningRecordExcelColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The LearningRecordExcelColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="LearningRecordExcelColumn" />
		public LearningRecordExcelColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all LearningRecordExcel related events.
	///</summary>
	public delegate void LearningRecordExcelEventHandler(object sender, LearningRecordExcelEventArgs e);
	
	#region LearningRecordExcelComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class LearningRecordExcelComparer : System.Collections.Generic.IComparer<LearningRecordExcel>
	{
		LearningRecordExcelColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:LearningRecordExcelComparer"/> class.
        /// </summary>
		public LearningRecordExcelComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:LearningRecordExcelComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public LearningRecordExcelComparer(LearningRecordExcelColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="LearningRecordExcel"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="LearningRecordExcel"/> to compare.</param>
        /// <param name="b">The second <c>LearningRecordExcel</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(LearningRecordExcel a, LearningRecordExcel b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(LearningRecordExcel entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(LearningRecordExcel a, LearningRecordExcel b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public LearningRecordExcelColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region LearningRecordExcelKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="LearningRecordExcel"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class LearningRecordExcelKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the LearningRecordExcelKey class.
		/// </summary>
		public LearningRecordExcelKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the LearningRecordExcelKey class.
		/// </summary>
		public LearningRecordExcelKey(LearningRecordExcelBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the LearningRecordExcelKey class.
		/// </summary>
		public LearningRecordExcelKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private LearningRecordExcelBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public LearningRecordExcelBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region LearningRecordExcelColumn Enum
	
	/// <summary>
	/// Enumerate the LearningRecordExcel columns.
	/// </summary>
	[Serializable]
	public enum LearningRecordExcelColumn : int
	{
		/// <summary>
		/// CourseName : 
		/// </summary>
		[EnumTextValue("CourseName")]
		[ColumnEnum("CourseName", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		CourseName = 1,
		/// <summary>
		/// Sso : 
		/// </summary>
		[EnumTextValue("SSO")]
		[ColumnEnum("SSO", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		Sso = 2,
		/// <summary>
		/// UserName : 
		/// </summary>
		[EnumTextValue("UserName")]
		[ColumnEnum("UserName", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		UserName = 3,
		/// <summary>
		/// Function : 
		/// </summary>
		[EnumTextValue("Function")]
		[ColumnEnum("Function", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		Function = 4,
		/// <summary>
		/// StartDate : 
		/// </summary>
		[EnumTextValue("StartDate")]
		[ColumnEnum("StartDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		StartDate = 5,
		/// <summary>
		/// CompletedDate : 
		/// </summary>
		[EnumTextValue("CompletedDate")]
		[ColumnEnum("CompletedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CompletedDate = 6,
		/// <summary>
		/// Location : 
		/// </summary>
		[EnumTextValue("Location")]
		[ColumnEnum("Location", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		Location = 7,
		/// <summary>
		/// Trainer : 
		/// </summary>
		[EnumTextValue("Trainer")]
		[ColumnEnum("Trainer", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		Trainer = 8,
		/// <summary>
		/// Courseid : 
		/// </summary>
		[EnumTextValue("courseid")]
		[ColumnEnum("courseid", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Courseid = 9,
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 10,
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		[EnumTextValue("CreatedDate")]
		[ColumnEnum("CreatedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreatedDate = 11
	}//End enum

	#endregion LearningRecordExcelColumn Enum

} // end namespace
