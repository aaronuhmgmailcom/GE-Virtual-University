
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file VuReplypost.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using Microsoft.Practices.EnterpriseLibrary.Validation.Validators;
using Microsoft.Practices.EnterpriseLibrary.Validation;

using GE.MyLearning.BL.Validation;
#endregion

namespace GE.MyLearning.BL
{
	///<summary>
	/// An object representation of the 'VU_REPLYPOST' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class VuReplypostBase : EntityBase, IVuReplypost, IEntityId<VuReplypostKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private VuReplypostEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private VuReplypostEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private VuReplypostEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<VuReplypost> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event VuReplypostEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event VuReplypostEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="VuReplypostBase"/> instance.
		///</summary>
		public VuReplypostBase()
		{
			this.entityData = new VuReplypostEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="VuReplypostBase"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_conent"></param>
		///<param name="_replyman"></param>
		///<param name="_sso"></param>
		///<param name="_replytime"></param>
		///<param name="_tupian"></param>
		///<param name="_fujian"></param>
		///<param name="_icon"></param>
		///<param name="_catogary"></param>
		///<param name="_isxingming"></param>
		///<param name="_score"></param>
		///<param name="_closed"></param>
		///<param name="_isdescore"></param>
		///<param name="_comment"></param>
		///<param name="_recommend"></param>
		///<param name="_classid"></param>
		///<param name="_isjake"></param>
		public VuReplypostBase(System.Int32? _id, System.String _conent, System.String _replyman, 
			System.String _sso, System.DateTime? _replytime, System.String _tupian, System.String _fujian, 
			System.String _icon, System.Int32? _catogary, System.Int32? _isxingming, System.Decimal? _score, 
			System.Int32? _closed, System.Int32? _isdescore, System.String _comment, System.Int32? _recommend, 
			System.String _classid, System.String _isjake)
		{
			this.entityData = new VuReplypostEntityData();
			this.backupData = null;

			this.Id = _id;
			this.Conent = _conent;
			this.Replyman = _replyman;
			this.Sso = _sso;
			this.Replytime = _replytime;
			this.Tupian = _tupian;
			this.Fujian = _fujian;
			this.Icon = _icon;
			this.Catogary = _catogary;
			this.Isxingming = _isxingming;
			this.Score = _score;
			this.Closed = _closed;
			this.Isdescore = _isdescore;
			this.Comment = _comment;
			this.Recommend = _recommend;
			this.Classid = _classid;
			this.Isjake = _isjake;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="VuReplypost"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_conent"></param>
		///<param name="_replyman"></param>
		///<param name="_sso"></param>
		///<param name="_replytime"></param>
		///<param name="_tupian"></param>
		///<param name="_fujian"></param>
		///<param name="_icon"></param>
		///<param name="_catogary"></param>
		///<param name="_isxingming"></param>
		///<param name="_score"></param>
		///<param name="_closed"></param>
		///<param name="_isdescore"></param>
		///<param name="_comment"></param>
		///<param name="_recommend"></param>
		///<param name="_classid"></param>
		///<param name="_isjake"></param>
		public static VuReplypost CreateVuReplypost(System.Int32? _id, System.String _conent, System.String _replyman, 
			System.String _sso, System.DateTime? _replytime, System.String _tupian, System.String _fujian, 
			System.String _icon, System.Int32? _catogary, System.Int32? _isxingming, System.Decimal? _score, 
			System.Int32? _closed, System.Int32? _isdescore, System.String _comment, System.Int32? _recommend, 
			System.String _classid, System.String _isjake)
		{
			VuReplypost newVuReplypost = new VuReplypost();
			newVuReplypost.Id = _id;
			newVuReplypost.Conent = _conent;
			newVuReplypost.Replyman = _replyman;
			newVuReplypost.Sso = _sso;
			newVuReplypost.Replytime = _replytime;
			newVuReplypost.Tupian = _tupian;
			newVuReplypost.Fujian = _fujian;
			newVuReplypost.Icon = _icon;
			newVuReplypost.Catogary = _catogary;
			newVuReplypost.Isxingming = _isxingming;
			newVuReplypost.Score = _score;
			newVuReplypost.Closed = _closed;
			newVuReplypost.Isdescore = _isdescore;
			newVuReplypost.Comment = _comment;
			newVuReplypost.Recommend = _recommend;
			newVuReplypost.Classid = _classid;
			newVuReplypost.Isjake = _isjake;
			return newVuReplypost;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(VuReplypostColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuReplypostColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Conent property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Conent
		{
			get
			{
				return this.entityData.Conent; 
			}
			
			set
			{
				if (this.entityData.Conent == value)
					return;
					
				OnColumnChanging(VuReplypostColumn.Conent, this.entityData.Conent);
				this.entityData.Conent = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuReplypostColumn.Conent, this.entityData.Conent);
				OnPropertyChanged("Conent");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Replyman property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="REPLYMAN")]
		[ValidatorComposition(CompositionType.Or, Tag="REPLYMAN")]
		[StringLengthValidator(50, MessageTemplate="Maximum length has been exceeded.", Tag="REPLYMAN")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Replyman
		{
			get
			{
				return this.entityData.Replyman; 
			}
			
			set
			{
				if (this.entityData.Replyman == value)
					return;
					
				OnColumnChanging(VuReplypostColumn.Replyman, this.entityData.Replyman);
				this.entityData.Replyman = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuReplypostColumn.Replyman, this.entityData.Replyman);
				OnPropertyChanged("Replyman");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Sso property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="SSO")]
		[ValidatorComposition(CompositionType.Or, Tag="SSO")]
		[StringLengthValidator(50, MessageTemplate="Maximum length has been exceeded.", Tag="SSO")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Sso
		{
			get
			{
				return this.entityData.Sso; 
			}
			
			set
			{
				if (this.entityData.Sso == value)
					return;
					
				OnColumnChanging(VuReplypostColumn.Sso, this.entityData.Sso);
				this.entityData.Sso = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuReplypostColumn.Sso, this.entityData.Sso);
				OnPropertyChanged("Sso");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Replytime property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsReplytimeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? Replytime
		{
			get
			{
				return this.entityData.Replytime; 
			}
			
			set
			{
				if (this.entityData.Replytime == value)
					return;
					
				OnColumnChanging(VuReplypostColumn.Replytime, this.entityData.Replytime);
				this.entityData.Replytime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuReplypostColumn.Replytime, this.entityData.Replytime);
				OnPropertyChanged("Replytime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Tupian property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="tupian")]
		[ValidatorComposition(CompositionType.Or, Tag="tupian")]
		[StringLengthValidator(50, MessageTemplate="Maximum length has been exceeded.", Tag="tupian")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Tupian
		{
			get
			{
				return this.entityData.Tupian; 
			}
			
			set
			{
				if (this.entityData.Tupian == value)
					return;
					
				OnColumnChanging(VuReplypostColumn.Tupian, this.entityData.Tupian);
				this.entityData.Tupian = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuReplypostColumn.Tupian, this.entityData.Tupian);
				OnPropertyChanged("Tupian");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Fujian property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="fujian")]
		[ValidatorComposition(CompositionType.Or, Tag="fujian")]
		[StringLengthValidator(50, MessageTemplate="Maximum length has been exceeded.", Tag="fujian")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Fujian
		{
			get
			{
				return this.entityData.Fujian; 
			}
			
			set
			{
				if (this.entityData.Fujian == value)
					return;
					
				OnColumnChanging(VuReplypostColumn.Fujian, this.entityData.Fujian);
				this.entityData.Fujian = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuReplypostColumn.Fujian, this.entityData.Fujian);
				OnPropertyChanged("Fujian");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Icon property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="icon")]
		[ValidatorComposition(CompositionType.Or, Tag="icon")]
		[StringLengthValidator(50, MessageTemplate="Maximum length has been exceeded.", Tag="icon")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Icon
		{
			get
			{
				return this.entityData.Icon; 
			}
			
			set
			{
				if (this.entityData.Icon == value)
					return;
					
				OnColumnChanging(VuReplypostColumn.Icon, this.entityData.Icon);
				this.entityData.Icon = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuReplypostColumn.Icon, this.entityData.Icon);
				OnPropertyChanged("Icon");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Ids property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Ids
		{
			get
			{
				return this.entityData.Ids; 
			}
			
			set
			{
				if (this.entityData.Ids == value)
					return;
					
				OnColumnChanging(VuReplypostColumn.Ids, this.entityData.Ids);
				this.entityData.Ids = value;
				this.EntityId.Ids = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuReplypostColumn.Ids, this.entityData.Ids);
				OnPropertyChanged("Ids");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Catogary property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCatogaryNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Catogary
		{
			get
			{
				return this.entityData.Catogary; 
			}
			
			set
			{
				if (this.entityData.Catogary == value)
					return;
					
				OnColumnChanging(VuReplypostColumn.Catogary, this.entityData.Catogary);
				this.entityData.Catogary = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuReplypostColumn.Catogary, this.entityData.Catogary);
				OnPropertyChanged("Catogary");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Isxingming property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsIsxingmingNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Isxingming
		{
			get
			{
				return this.entityData.Isxingming; 
			}
			
			set
			{
				if (this.entityData.Isxingming == value)
					return;
					
				OnColumnChanging(VuReplypostColumn.Isxingming, this.entityData.Isxingming);
				this.entityData.Isxingming = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuReplypostColumn.Isxingming, this.entityData.Isxingming);
				OnPropertyChanged("Isxingming");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Score property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScoreNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Score
		{
			get
			{
				return this.entityData.Score; 
			}
			
			set
			{
				if (this.entityData.Score == value)
					return;
					
				OnColumnChanging(VuReplypostColumn.Score, this.entityData.Score);
				this.entityData.Score = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuReplypostColumn.Score, this.entityData.Score);
				OnPropertyChanged("Score");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Closed property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsClosedNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Closed
		{
			get
			{
				return this.entityData.Closed; 
			}
			
			set
			{
				if (this.entityData.Closed == value)
					return;
					
				OnColumnChanging(VuReplypostColumn.Closed, this.entityData.Closed);
				this.entityData.Closed = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuReplypostColumn.Closed, this.entityData.Closed);
				OnPropertyChanged("Closed");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Isdescore property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsIsdescoreNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Isdescore
		{
			get
			{
				return this.entityData.Isdescore; 
			}
			
			set
			{
				if (this.entityData.Isdescore == value)
					return;
					
				OnColumnChanging(VuReplypostColumn.Isdescore, this.entityData.Isdescore);
				this.entityData.Isdescore = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuReplypostColumn.Isdescore, this.entityData.Isdescore);
				OnPropertyChanged("Isdescore");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Comment property. 
		///		
		/// </summary>
		/// <value>This type is text.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Comment
		{
			get
			{
				return this.entityData.Comment; 
			}
			
			set
			{
				if (this.entityData.Comment == value)
					return;
					
				OnColumnChanging(VuReplypostColumn.Comment, this.entityData.Comment);
				this.entityData.Comment = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuReplypostColumn.Comment, this.entityData.Comment);
				OnPropertyChanged("Comment");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Recommend property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsRecommendNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Recommend
		{
			get
			{
				return this.entityData.Recommend; 
			}
			
			set
			{
				if (this.entityData.Recommend == value)
					return;
					
				OnColumnChanging(VuReplypostColumn.Recommend, this.entityData.Recommend);
				this.entityData.Recommend = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuReplypostColumn.Recommend, this.entityData.Recommend);
				OnPropertyChanged("Recommend");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Classid property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="classid")]
		[ValidatorComposition(CompositionType.Or, Tag="classid")]
		[StringLengthValidator(10, MessageTemplate="Maximum length has been exceeded.", Tag="classid")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String Classid
		{
			get
			{
				return this.entityData.Classid; 
			}
			
			set
			{
				if (this.entityData.Classid == value)
					return;
					
				OnColumnChanging(VuReplypostColumn.Classid, this.entityData.Classid);
				this.entityData.Classid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuReplypostColumn.Classid, this.entityData.Classid);
				OnPropertyChanged("Classid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Isjake property. 
		///		
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="isjake")]
		[ValidatorComposition(CompositionType.Or, Tag="isjake")]
		[StringLengthValidator(10, MessageTemplate="Maximum length has been exceeded.", Tag="isjake")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String Isjake
		{
			get
			{
				return this.entityData.Isjake; 
			}
			
			set
			{
				if (this.entityData.Isjake == value)
					return;
					
				OnColumnChanging(VuReplypostColumn.Isjake, this.entityData.Isjake);
				this.entityData.Isjake = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VuReplypostColumn.Isjake, this.entityData.Isjake);
				OnPropertyChanged("Isjake");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "VU_REPLYPOST"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "CONENT", "REPLYMAN", "SSO", "REPLYTIME", "tupian", "fujian", "icon", "ids", "catogary", "isxingming", "score", "closed", "isdescore", "comment", "recommend", "classid", "isjake"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as VuReplypostEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (VuReplypost) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<VuReplypost>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as VuReplypost);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed VuReplypost Entity 
		///</summary>
		protected virtual VuReplypost Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			VuReplypost copy = new VuReplypost();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.Conent = this.Conent;
				copy.Replyman = this.Replyman;
				copy.Sso = this.Sso;
				copy.Replytime = this.Replytime;
				copy.Tupian = this.Tupian;
				copy.Fujian = this.Fujian;
				copy.Icon = this.Icon;
				copy.Ids = this.Ids;
				copy.Catogary = this.Catogary;
				copy.Isxingming = this.Isxingming;
				copy.Score = this.Score;
				copy.Closed = this.Closed;
				copy.Isdescore = this.Isdescore;
				copy.Comment = this.Comment;
				copy.Recommend = this.Recommend;
				copy.Classid = this.Classid;
				copy.Isjake = this.Isjake;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed VuReplypost Entity 
		///</summary>
		public virtual VuReplypost Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed VuReplypost Entity which is a deep copy of the current entity.
		///</summary>
		public virtual VuReplypost DeepCopy()
		{
			return EntityHelper.Clone<VuReplypost>(this as VuReplypost);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as VuReplypostEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new VuReplypostEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as VuReplypostEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(VuReplypostColumn column)
		{
			switch(column)
			{
					case VuReplypostColumn.Id:
					return entityData.Id != _originalData.Id;
					case VuReplypostColumn.Conent:
					return entityData.Conent != _originalData.Conent;
					case VuReplypostColumn.Replyman:
					return entityData.Replyman != _originalData.Replyman;
					case VuReplypostColumn.Sso:
					return entityData.Sso != _originalData.Sso;
					case VuReplypostColumn.Replytime:
					return entityData.Replytime != _originalData.Replytime;
					case VuReplypostColumn.Tupian:
					return entityData.Tupian != _originalData.Tupian;
					case VuReplypostColumn.Fujian:
					return entityData.Fujian != _originalData.Fujian;
					case VuReplypostColumn.Icon:
					return entityData.Icon != _originalData.Icon;
					case VuReplypostColumn.Ids:
					return entityData.Ids != _originalData.Ids;
					case VuReplypostColumn.Catogary:
					return entityData.Catogary != _originalData.Catogary;
					case VuReplypostColumn.Isxingming:
					return entityData.Isxingming != _originalData.Isxingming;
					case VuReplypostColumn.Score:
					return entityData.Score != _originalData.Score;
					case VuReplypostColumn.Closed:
					return entityData.Closed != _originalData.Closed;
					case VuReplypostColumn.Isdescore:
					return entityData.Isdescore != _originalData.Isdescore;
					case VuReplypostColumn.Comment:
					return entityData.Comment != _originalData.Comment;
					case VuReplypostColumn.Recommend:
					return entityData.Recommend != _originalData.Recommend;
					case VuReplypostColumn.Classid:
					return entityData.Classid != _originalData.Classid;
					case VuReplypostColumn.Isjake:
					return entityData.Isjake != _originalData.Isjake;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< VuReplypostColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.Conent != _originalData.Conent;
			result = result || entityData.Replyman != _originalData.Replyman;
			result = result || entityData.Sso != _originalData.Sso;
			result = result || entityData.Replytime != _originalData.Replytime;
			result = result || entityData.Tupian != _originalData.Tupian;
			result = result || entityData.Fujian != _originalData.Fujian;
			result = result || entityData.Icon != _originalData.Icon;
			result = result || entityData.Ids != _originalData.Ids;
			result = result || entityData.Catogary != _originalData.Catogary;
			result = result || entityData.Isxingming != _originalData.Isxingming;
			result = result || entityData.Score != _originalData.Score;
			result = result || entityData.Closed != _originalData.Closed;
			result = result || entityData.Isdescore != _originalData.Isdescore;
			result = result || entityData.Comment != _originalData.Comment;
			result = result || entityData.Recommend != _originalData.Recommend;
			result = result || entityData.Classid != _originalData.Classid;
			result = result || entityData.Isjake != _originalData.Isjake;
			return result;
		}	
		
		///<summary>
		///  Returns a VuReplypost Entity with the original data.
		///</summary>
		public VuReplypost GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateVuReplypost(
				_originalData.Id,
				_originalData.Conent,
				_originalData.Replyman,
				_originalData.Sso,
				_originalData.Replytime,
				_originalData.Tupian,
				_originalData.Fujian,
				_originalData.Icon,
				_originalData.Catogary,
				_originalData.Isxingming,
				_originalData.Score,
				_originalData.Closed,
				_originalData.Isdescore,
				_originalData.Comment,
				_originalData.Recommend,
				_originalData.Classid,
				_originalData.Isjake
				);
				
			return (VuReplypost)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="VuReplypostBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is VuReplypostBase)
				return ValueEquals(this, (VuReplypostBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="VuReplypostBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return ((this.Id == null) ? string.Empty : this.Id.ToString()).GetHashCode() ^ 
					((this.Conent == null) ? string.Empty : this.Conent.ToString()).GetHashCode() ^ 
					((this.Replyman == null) ? string.Empty : this.Replyman.ToString()).GetHashCode() ^ 
					((this.Sso == null) ? string.Empty : this.Sso.ToString()).GetHashCode() ^ 
					((this.Replytime == null) ? string.Empty : this.Replytime.ToString()).GetHashCode() ^ 
					((this.Tupian == null) ? string.Empty : this.Tupian.ToString()).GetHashCode() ^ 
					((this.Fujian == null) ? string.Empty : this.Fujian.ToString()).GetHashCode() ^ 
					((this.Icon == null) ? string.Empty : this.Icon.ToString()).GetHashCode() ^ 
					this.Ids.GetHashCode() ^ 
					((this.Catogary == null) ? string.Empty : this.Catogary.ToString()).GetHashCode() ^ 
					((this.Isxingming == null) ? string.Empty : this.Isxingming.ToString()).GetHashCode() ^ 
					((this.Score == null) ? string.Empty : this.Score.ToString()).GetHashCode() ^ 
					((this.Closed == null) ? string.Empty : this.Closed.ToString()).GetHashCode() ^ 
					((this.Isdescore == null) ? string.Empty : this.Isdescore.ToString()).GetHashCode() ^ 
					((this.Comment == null) ? string.Empty : this.Comment.ToString()).GetHashCode() ^ 
					((this.Recommend == null) ? string.Empty : this.Recommend.ToString()).GetHashCode() ^ 
					((this.Classid == null) ? string.Empty : this.Classid.ToString()).GetHashCode() ^ 
					((this.Isjake == null) ? string.Empty : this.Isjake.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="VuReplypostBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(VuReplypostBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="VuReplypostBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="VuReplypostBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="VuReplypostBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(VuReplypostBase Object1, VuReplypostBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if ( Object1.Id != null && Object2.Id != null )
			{
				if (Object1.Id != Object2.Id)
					equal = false;
			}
			else if (Object1.Id == null ^ Object2.Id == null )
			{
				equal = false;
			}
			if ( Object1.Conent != null && Object2.Conent != null )
			{
				if (Object1.Conent != Object2.Conent)
					equal = false;
			}
			else if (Object1.Conent == null ^ Object2.Conent == null )
			{
				equal = false;
			}
			if ( Object1.Replyman != null && Object2.Replyman != null )
			{
				if (Object1.Replyman != Object2.Replyman)
					equal = false;
			}
			else if (Object1.Replyman == null ^ Object2.Replyman == null )
			{
				equal = false;
			}
			if ( Object1.Sso != null && Object2.Sso != null )
			{
				if (Object1.Sso != Object2.Sso)
					equal = false;
			}
			else if (Object1.Sso == null ^ Object2.Sso == null )
			{
				equal = false;
			}
			if ( Object1.Replytime != null && Object2.Replytime != null )
			{
				if (Object1.Replytime != Object2.Replytime)
					equal = false;
			}
			else if (Object1.Replytime == null ^ Object2.Replytime == null )
			{
				equal = false;
			}
			if ( Object1.Tupian != null && Object2.Tupian != null )
			{
				if (Object1.Tupian != Object2.Tupian)
					equal = false;
			}
			else if (Object1.Tupian == null ^ Object2.Tupian == null )
			{
				equal = false;
			}
			if ( Object1.Fujian != null && Object2.Fujian != null )
			{
				if (Object1.Fujian != Object2.Fujian)
					equal = false;
			}
			else if (Object1.Fujian == null ^ Object2.Fujian == null )
			{
				equal = false;
			}
			if ( Object1.Icon != null && Object2.Icon != null )
			{
				if (Object1.Icon != Object2.Icon)
					equal = false;
			}
			else if (Object1.Icon == null ^ Object2.Icon == null )
			{
				equal = false;
			}
			if (Object1.Ids != Object2.Ids)
				equal = false;
			if ( Object1.Catogary != null && Object2.Catogary != null )
			{
				if (Object1.Catogary != Object2.Catogary)
					equal = false;
			}
			else if (Object1.Catogary == null ^ Object2.Catogary == null )
			{
				equal = false;
			}
			if ( Object1.Isxingming != null && Object2.Isxingming != null )
			{
				if (Object1.Isxingming != Object2.Isxingming)
					equal = false;
			}
			else if (Object1.Isxingming == null ^ Object2.Isxingming == null )
			{
				equal = false;
			}
			if ( Object1.Score != null && Object2.Score != null )
			{
				if (Object1.Score != Object2.Score)
					equal = false;
			}
			else if (Object1.Score == null ^ Object2.Score == null )
			{
				equal = false;
			}
			if ( Object1.Closed != null && Object2.Closed != null )
			{
				if (Object1.Closed != Object2.Closed)
					equal = false;
			}
			else if (Object1.Closed == null ^ Object2.Closed == null )
			{
				equal = false;
			}
			if ( Object1.Isdescore != null && Object2.Isdescore != null )
			{
				if (Object1.Isdescore != Object2.Isdescore)
					equal = false;
			}
			else if (Object1.Isdescore == null ^ Object2.Isdescore == null )
			{
				equal = false;
			}
			if ( Object1.Comment != null && Object2.Comment != null )
			{
				if (Object1.Comment != Object2.Comment)
					equal = false;
			}
			else if (Object1.Comment == null ^ Object2.Comment == null )
			{
				equal = false;
			}
			if ( Object1.Recommend != null && Object2.Recommend != null )
			{
				if (Object1.Recommend != Object2.Recommend)
					equal = false;
			}
			else if (Object1.Recommend == null ^ Object2.Recommend == null )
			{
				equal = false;
			}
			if ( Object1.Classid != null && Object2.Classid != null )
			{
				if (Object1.Classid != Object2.Classid)
					equal = false;
			}
			else if (Object1.Classid == null ^ Object2.Classid == null )
			{
				equal = false;
			}
			if ( Object1.Isjake != null && Object2.Isjake != null )
			{
				if (Object1.Isjake != Object2.Isjake)
					equal = false;
			}
			else if (Object1.Isjake == null ^ Object2.Isjake == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((VuReplypostBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static VuReplypostComparer GetComparer()
        {
            return new VuReplypostComparer();
        }
        */

        // Comparer delegates back to VuReplypost
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(VuReplypost rhs, VuReplypostColumn which)
        {
            switch (which)
            {
            	
            	
            	case VuReplypostColumn.Id:
            		return this.Id.Value.CompareTo(rhs.Id.Value);
            		
            		                 
            	
            	
            	case VuReplypostColumn.Conent:
            		return this.Conent.CompareTo(rhs.Conent);
            		
            		                 
            	
            	
            	case VuReplypostColumn.Replyman:
            		return this.Replyman.CompareTo(rhs.Replyman);
            		
            		                 
            	
            	
            	case VuReplypostColumn.Sso:
            		return this.Sso.CompareTo(rhs.Sso);
            		
            		                 
            	
            	
            	case VuReplypostColumn.Replytime:
            		return this.Replytime.Value.CompareTo(rhs.Replytime.Value);
            		
            		                 
            	
            	
            	case VuReplypostColumn.Tupian:
            		return this.Tupian.CompareTo(rhs.Tupian);
            		
            		                 
            	
            	
            	case VuReplypostColumn.Fujian:
            		return this.Fujian.CompareTo(rhs.Fujian);
            		
            		                 
            	
            	
            	case VuReplypostColumn.Icon:
            		return this.Icon.CompareTo(rhs.Icon);
            		
            		                 
            	
            	
            	case VuReplypostColumn.Ids:
            		return this.Ids.CompareTo(rhs.Ids);
            		
            		                 
            	
            	
            	case VuReplypostColumn.Catogary:
            		return this.Catogary.Value.CompareTo(rhs.Catogary.Value);
            		
            		                 
            	
            	
            	case VuReplypostColumn.Isxingming:
            		return this.Isxingming.Value.CompareTo(rhs.Isxingming.Value);
            		
            		                 
            	
            	
            	case VuReplypostColumn.Score:
            		return this.Score.Value.CompareTo(rhs.Score.Value);
            		
            		                 
            	
            	
            	case VuReplypostColumn.Closed:
            		return this.Closed.Value.CompareTo(rhs.Closed.Value);
            		
            		                 
            	
            	
            	case VuReplypostColumn.Isdescore:
            		return this.Isdescore.Value.CompareTo(rhs.Isdescore.Value);
            		
            		                 
            	
            	
            	case VuReplypostColumn.Comment:
            		return this.Comment.CompareTo(rhs.Comment);
            		
            		                 
            	
            	
            	case VuReplypostColumn.Recommend:
            		return this.Recommend.Value.CompareTo(rhs.Recommend.Value);
            		
            		                 
            	
            	
            	case VuReplypostColumn.Classid:
            		return this.Classid.CompareTo(rhs.Classid);
            		
            		                 
            	
            	
            	case VuReplypostColumn.Isjake:
            		return this.Isjake.CompareTo(rhs.Isjake);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<VuReplypostKey> Members
		
		// member variable for the EntityId property
		private VuReplypostKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual VuReplypostKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new VuReplypostKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("VuReplypost")
					.Append("|").Append( this.Ids.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{19}{18}- Id: {0}{18}- Conent: {1}{18}- Replyman: {2}{18}- Sso: {3}{18}- Replytime: {4}{18}- Tupian: {5}{18}- Fujian: {6}{18}- Icon: {7}{18}- Ids: {8}{18}- Catogary: {9}{18}- Isxingming: {10}{18}- Score: {11}{18}- Closed: {12}{18}- Isdescore: {13}{18}- Comment: {14}{18}- Recommend: {15}{18}- Classid: {16}{18}- Isjake: {17}{18}{20}", 
				(this.Id == null) ? string.Empty : this.Id.ToString(),
				(this.Conent == null) ? string.Empty : this.Conent.ToString(),
				(this.Replyman == null) ? string.Empty : this.Replyman.ToString(),
				(this.Sso == null) ? string.Empty : this.Sso.ToString(),
				(this.Replytime == null) ? string.Empty : this.Replytime.ToString(),
				(this.Tupian == null) ? string.Empty : this.Tupian.ToString(),
				(this.Fujian == null) ? string.Empty : this.Fujian.ToString(),
				(this.Icon == null) ? string.Empty : this.Icon.ToString(),
				this.Ids,
				(this.Catogary == null) ? string.Empty : this.Catogary.ToString(),
				(this.Isxingming == null) ? string.Empty : this.Isxingming.ToString(),
				(this.Score == null) ? string.Empty : this.Score.ToString(),
				(this.Closed == null) ? string.Empty : this.Closed.ToString(),
				(this.Isdescore == null) ? string.Empty : this.Isdescore.ToString(),
				(this.Comment == null) ? string.Empty : this.Comment.ToString(),
				(this.Recommend == null) ? string.Empty : this.Recommend.ToString(),
				(this.Classid == null) ? string.Empty : this.Classid.ToString(),
				(this.Isjake == null) ? string.Empty : this.Isjake.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'VU_REPLYPOST' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class VuReplypostEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ids : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "VU_REPLYPOST"</remarks>
		public System.Int32 Ids;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ID : 
		/// </summary>
		public System.Int32?		  Id = null;
		
		/// <summary>
		/// CONENT : 
		/// </summary>
		public System.String		  Conent = null;
		
		/// <summary>
		/// REPLYMAN : 
		/// </summary>
		public System.String		  Replyman = null;
		
		/// <summary>
		/// SSO : 
		/// </summary>
		public System.String		  Sso = null;
		
		/// <summary>
		/// REPLYTIME : 
		/// </summary>
		public System.DateTime?		  Replytime = null;
		
		/// <summary>
		/// tupian : 
		/// </summary>
		public System.String		  Tupian = null;
		
		/// <summary>
		/// fujian : 
		/// </summary>
		public System.String		  Fujian = null;
		
		/// <summary>
		/// icon : 
		/// </summary>
		public System.String		  Icon = null;
		
		/// <summary>
		/// catogary : 
		/// </summary>
		public System.Int32?		  Catogary = null;
		
		/// <summary>
		/// isxingming : 
		/// </summary>
		public System.Int32?		  Isxingming = null;
		
		/// <summary>
		/// score : 
		/// </summary>
		public System.Decimal?		  Score = null;
		
		/// <summary>
		/// closed : 
		/// </summary>
		public System.Int32?		  Closed = null;
		
		/// <summary>
		/// isdescore : 
		/// </summary>
		public System.Int32?		  Isdescore = null;
		
		/// <summary>
		/// comment : 
		/// </summary>
		public System.String		  Comment = null;
		
		/// <summary>
		/// recommend : 
		/// </summary>
		public System.Int32?		  Recommend = null;
		
		/// <summary>
		/// classid : 
		/// </summary>
		public System.String		  Classid = null;
		
		/// <summary>
		/// isjake : 
		/// </summary>
		public System.String		  Isjake = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			VuReplypostEntityData _tmp = new VuReplypostEntityData();
						
			_tmp.Ids = this.Ids;
			
			_tmp.Id = this.Id;
			_tmp.Conent = this.Conent;
			_tmp.Replyman = this.Replyman;
			_tmp.Sso = this.Sso;
			_tmp.Replytime = this.Replytime;
			_tmp.Tupian = this.Tupian;
			_tmp.Fujian = this.Fujian;
			_tmp.Icon = this.Icon;
			_tmp.Catogary = this.Catogary;
			_tmp.Isxingming = this.Isxingming;
			_tmp.Score = this.Score;
			_tmp.Closed = this.Closed;
			_tmp.Isdescore = this.Isdescore;
			_tmp.Comment = this.Comment;
			_tmp.Recommend = this.Recommend;
			_tmp.Classid = this.Classid;
			_tmp.Isjake = this.Isjake;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			VuReplypostEntityData _tmp = new VuReplypostEntityData();
						
			_tmp.Ids = this.Ids;
			
			_tmp.Id = this.Id;
			_tmp.Conent = this.Conent;
			_tmp.Replyman = this.Replyman;
			_tmp.Sso = this.Sso;
			_tmp.Replytime = this.Replytime;
			_tmp.Tupian = this.Tupian;
			_tmp.Fujian = this.Fujian;
			_tmp.Icon = this.Icon;
			_tmp.Catogary = this.Catogary;
			_tmp.Isxingming = this.Isxingming;
			_tmp.Score = this.Score;
			_tmp.Closed = this.Closed;
			_tmp.Isdescore = this.Isdescore;
			_tmp.Comment = this.Comment;
			_tmp.Recommend = this.Recommend;
			_tmp.Classid = this.Classid;
			_tmp.Isjake = this.Isjake;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="VuReplypostColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(VuReplypostColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="VuReplypostColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(VuReplypostColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="VuReplypostColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(VuReplypostColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				VuReplypostEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new VuReplypostEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="VuReplypostColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(VuReplypostColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				VuReplypostEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new VuReplypostEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region VuReplypostEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="VuReplypost"/> object.
	/// </remarks>
	public class VuReplypostEventArgs : System.EventArgs
	{
		private VuReplypostColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the VuReplypostEventArgs class.
		///</summary>
		public VuReplypostEventArgs(VuReplypostColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the VuReplypostEventArgs class.
		///</summary>
		public VuReplypostEventArgs(VuReplypostColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The VuReplypostColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="VuReplypostColumn" />
		public VuReplypostColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all VuReplypost related events.
	///</summary>
	public delegate void VuReplypostEventHandler(object sender, VuReplypostEventArgs e);
	
	#region VuReplypostComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class VuReplypostComparer : System.Collections.Generic.IComparer<VuReplypost>
	{
		VuReplypostColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:VuReplypostComparer"/> class.
        /// </summary>
		public VuReplypostComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:VuReplypostComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public VuReplypostComparer(VuReplypostColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="VuReplypost"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="VuReplypost"/> to compare.</param>
        /// <param name="b">The second <c>VuReplypost</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(VuReplypost a, VuReplypost b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(VuReplypost entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(VuReplypost a, VuReplypost b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public VuReplypostColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region VuReplypostKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="VuReplypost"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class VuReplypostKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the VuReplypostKey class.
		/// </summary>
		public VuReplypostKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the VuReplypostKey class.
		/// </summary>
		public VuReplypostKey(VuReplypostBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Ids = entity.Ids;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the VuReplypostKey class.
		/// </summary>
		public VuReplypostKey(System.Int32 _ids)
		{
			#region Init Properties

			this.Ids = _ids;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private VuReplypostBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public VuReplypostBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Ids property
		private System.Int32 _ids;
		
		/// <summary>
		/// Gets or sets the Ids property.
		/// </summary>
		public System.Int32 Ids
		{
			get { return _ids; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Ids = value;
				
				_ids = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Ids = ( values["Ids"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Ids"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Ids", Ids);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Ids: {0}{1}",
								Ids,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region VuReplypostColumn Enum
	
	/// <summary>
	/// Enumerate the VuReplypost columns.
	/// </summary>
	[Serializable]
	public enum VuReplypostColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Id = 1,
		/// <summary>
		/// Conent : 
		/// </summary>
		[EnumTextValue("CONENT")]
		[ColumnEnum("CONENT", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Conent = 2,
		/// <summary>
		/// Replyman : 
		/// </summary>
		[EnumTextValue("REPLYMAN")]
		[ColumnEnum("REPLYMAN", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Replyman = 3,
		/// <summary>
		/// Sso : 
		/// </summary>
		[EnumTextValue("SSO")]
		[ColumnEnum("SSO", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Sso = 4,
		/// <summary>
		/// Replytime : 
		/// </summary>
		[EnumTextValue("REPLYTIME")]
		[ColumnEnum("REPLYTIME", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		Replytime = 5,
		/// <summary>
		/// Tupian : 
		/// </summary>
		[EnumTextValue("tupian")]
		[ColumnEnum("tupian", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Tupian = 6,
		/// <summary>
		/// Fujian : 
		/// </summary>
		[EnumTextValue("fujian")]
		[ColumnEnum("fujian", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Fujian = 7,
		/// <summary>
		/// Icon : 
		/// </summary>
		[EnumTextValue("icon")]
		[ColumnEnum("icon", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Icon = 8,
		/// <summary>
		/// Ids : 
		/// </summary>
		[EnumTextValue("ids")]
		[ColumnEnum("ids", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Ids = 9,
		/// <summary>
		/// Catogary : 
		/// </summary>
		[EnumTextValue("catogary")]
		[ColumnEnum("catogary", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Catogary = 10,
		/// <summary>
		/// Isxingming : 
		/// </summary>
		[EnumTextValue("isxingming")]
		[ColumnEnum("isxingming", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Isxingming = 11,
		/// <summary>
		/// Score : 
		/// </summary>
		[EnumTextValue("score")]
		[ColumnEnum("score", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Score = 12,
		/// <summary>
		/// Closed : 
		/// </summary>
		[EnumTextValue("closed")]
		[ColumnEnum("closed", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Closed = 13,
		/// <summary>
		/// Isdescore : 
		/// </summary>
		[EnumTextValue("isdescore")]
		[ColumnEnum("isdescore", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Isdescore = 14,
		/// <summary>
		/// Comment : 
		/// </summary>
		[EnumTextValue("comment")]
		[ColumnEnum("comment", typeof(System.String), System.Data.DbType.AnsiString, false, false, true)]
		Comment = 15,
		/// <summary>
		/// Recommend : 
		/// </summary>
		[EnumTextValue("recommend")]
		[ColumnEnum("recommend", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Recommend = 16,
		/// <summary>
		/// Classid : 
		/// </summary>
		[EnumTextValue("classid")]
		[ColumnEnum("classid", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 10)]
		Classid = 17,
		/// <summary>
		/// Isjake : 
		/// </summary>
		[EnumTextValue("isjake")]
		[ColumnEnum("isjake", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, true, 10)]
		Isjake = 18
	}//End enum

	#endregion VuReplypostColumn Enum

} // end namespace
