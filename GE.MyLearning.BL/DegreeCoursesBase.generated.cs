
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file DegreeCourses.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using Microsoft.Practices.EnterpriseLibrary.Validation.Validators;
using Microsoft.Practices.EnterpriseLibrary.Validation;

using GE.MyLearning.BL.Validation;
#endregion

namespace GE.MyLearning.BL
{
	///<summary>
	/// An object representation of the 'DegreeCourses' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class DegreeCoursesBase : EntityBase, IDegreeCourses, IEntityId<DegreeCoursesKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private DegreeCoursesEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private DegreeCoursesEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private DegreeCoursesEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<DegreeCourses> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event DegreeCoursesEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event DegreeCoursesEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="DegreeCoursesBase"/> instance.
		///</summary>
		public DegreeCoursesBase()
		{
			this.entityData = new DegreeCoursesEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="DegreeCoursesBase"/> instance.
		///</summary>
		///<param name="_courseName"></param>
		///<param name="_courseStyle"></param>
		///<param name="_courseId"></param>
		///<param name="_description"></param>
		///<param name="_creditHour"></param>
		///<param name="_createUserId"></param>
		///<param name="_createTime"></param>
		///<param name="_status"></param>
		///<param name="_degreeId"></param>
		///<param name="_isRequiredCourse"></param>
		public DegreeCoursesBase(System.String _courseName, System.Int32? _courseStyle, System.String _courseId, 
			System.String _description, System.Int32? _creditHour, System.String _createUserId, 
			System.DateTime _createTime, System.Int32 _status, System.Int32 _degreeId, System.Int32 _isRequiredCourse)
		{
			this.entityData = new DegreeCoursesEntityData();
			this.backupData = null;

			this.CourseName = _courseName;
			this.CourseStyle = _courseStyle;
			this.CourseId = _courseId;
			this.Description = _description;
			this.CreditHour = _creditHour;
			this.CreateUserId = _createUserId;
			this.CreateTime = _createTime;
			this.Status = _status;
			this.DegreeId = _degreeId;
			this.IsRequiredCourse = _isRequiredCourse;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="DegreeCourses"/> instance.
		///</summary>
		///<param name="_courseName"></param>
		///<param name="_courseStyle"></param>
		///<param name="_courseId"></param>
		///<param name="_description"></param>
		///<param name="_creditHour"></param>
		///<param name="_createUserId"></param>
		///<param name="_createTime"></param>
		///<param name="_status"></param>
		///<param name="_degreeId"></param>
		///<param name="_isRequiredCourse"></param>
		public static DegreeCourses CreateDegreeCourses(System.String _courseName, System.Int32? _courseStyle, System.String _courseId, 
			System.String _description, System.Int32? _creditHour, System.String _createUserId, 
			System.DateTime _createTime, System.Int32 _status, System.Int32 _degreeId, System.Int32 _isRequiredCourse)
		{
			DegreeCourses newDegreeCourses = new DegreeCourses();
			newDegreeCourses.CourseName = _courseName;
			newDegreeCourses.CourseStyle = _courseStyle;
			newDegreeCourses.CourseId = _courseId;
			newDegreeCourses.Description = _description;
			newDegreeCourses.CreditHour = _creditHour;
			newDegreeCourses.CreateUserId = _createUserId;
			newDegreeCourses.CreateTime = _createTime;
			newDegreeCourses.Status = _status;
			newDegreeCourses.DegreeId = _degreeId;
			newDegreeCourses.IsRequiredCourse = _isRequiredCourse;
			return newDegreeCourses;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the DegreeCourseId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 DegreeCourseId
		{
			get
			{
				return this.entityData.DegreeCourseId; 
			}
			
			set
			{
				if (this.entityData.DegreeCourseId == value)
					return;
					
				OnColumnChanging(DegreeCoursesColumn.DegreeCourseId, this.entityData.DegreeCourseId);
				this.entityData.DegreeCourseId = value;
				this.EntityId.DegreeCourseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DegreeCoursesColumn.DegreeCourseId, this.entityData.DegreeCourseId);
				OnPropertyChanged("DegreeCourseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CourseName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="CourseName")]
		[ValidatorComposition(CompositionType.Or, Tag="CourseName")]
		[StringLengthValidator(150, MessageTemplate="Maximum length has been exceeded.", Tag="CourseName")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String CourseName
		{
			get
			{
				return this.entityData.CourseName; 
			}
			
			set
			{
				if (this.entityData.CourseName == value)
					return;
					
				OnColumnChanging(DegreeCoursesColumn.CourseName, this.entityData.CourseName);
				this.entityData.CourseName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DegreeCoursesColumn.CourseName, this.entityData.CourseName);
				OnPropertyChanged("CourseName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CourseStyle property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCourseStyleNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CourseStyle
		{
			get
			{
				return this.entityData.CourseStyle; 
			}
			
			set
			{
				if (this.entityData.CourseStyle == value)
					return;
					
				OnColumnChanging(DegreeCoursesColumn.CourseStyle, this.entityData.CourseStyle);
				this.entityData.CourseStyle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DegreeCoursesColumn.CourseStyle, this.entityData.CourseStyle);
				OnPropertyChanged("CourseStyle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CourseId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="CourseId")]
		[ValidatorComposition(CompositionType.Or, Tag="CourseId")]
		[StringLengthValidator(20, MessageTemplate="Maximum length has been exceeded.", Tag="CourseId")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String CourseId
		{
			get
			{
				return this.entityData.CourseId; 
			}
			
			set
			{
				if (this.entityData.CourseId == value)
					return;
					
				OnColumnChanging(DegreeCoursesColumn.CourseId, this.entityData.CourseId);
				this.entityData.CourseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DegreeCoursesColumn.CourseId, this.entityData.CourseId);
				OnPropertyChanged("CourseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Description property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="Description")]
		[ValidatorComposition(CompositionType.Or, Tag="Description")]
		[StringLengthValidator(500, MessageTemplate="Maximum length has been exceeded.", Tag="Description")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String Description
		{
			get
			{
				return this.entityData.Description; 
			}
			
			set
			{
				if (this.entityData.Description == value)
					return;
					
				OnColumnChanging(DegreeCoursesColumn.Description, this.entityData.Description);
				this.entityData.Description = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DegreeCoursesColumn.Description, this.entityData.Description);
				OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreditHour property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCreditHourNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CreditHour
		{
			get
			{
				return this.entityData.CreditHour; 
			}
			
			set
			{
				if (this.entityData.CreditHour == value)
					return;
					
				OnColumnChanging(DegreeCoursesColumn.CreditHour, this.entityData.CreditHour);
				this.entityData.CreditHour = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DegreeCoursesColumn.CreditHour, this.entityData.CreditHour);
				OnPropertyChanged("CreditHour");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateUserId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[NotNullValidator(MessageTemplate="Property does not allow null values.", Tag="CreateUserID")]
		[ValidatorComposition(CompositionType.And, Tag="CreateUserID")]

		[StringLengthValidator(20, MessageTemplate="Maximum length has been exceeded.", Tag="CreateUserID")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual System.String CreateUserId
		{
			get
			{
				return this.entityData.CreateUserId; 
			}
			
			set
			{
				if (this.entityData.CreateUserId == value)
					return;
					
				OnColumnChanging(DegreeCoursesColumn.CreateUserId, this.entityData.CreateUserId);
				this.entityData.CreateUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DegreeCoursesColumn.CreateUserId, this.entityData.CreateUserId);
				OnPropertyChanged("CreateUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime CreateTime
		{
			get
			{
				return this.entityData.CreateTime; 
			}
			
			set
			{
				if (this.entityData.CreateTime == value)
					return;
					
				OnColumnChanging(DegreeCoursesColumn.CreateTime, this.entityData.CreateTime);
				this.entityData.CreateTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DegreeCoursesColumn.CreateTime, this.entityData.CreateTime);
				OnPropertyChanged("CreateTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
					
				OnColumnChanging(DegreeCoursesColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DegreeCoursesColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DegreeId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 DegreeId
		{
			get
			{
				return this.entityData.DegreeId; 
			}
			
			set
			{
				if (this.entityData.DegreeId == value)
					return;
					
				OnColumnChanging(DegreeCoursesColumn.DegreeId, this.entityData.DegreeId);
				this.entityData.DegreeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DegreeCoursesColumn.DegreeId, this.entityData.DegreeId);
				OnPropertyChanged("DegreeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsRequiredCourse property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 IsRequiredCourse
		{
			get
			{
				return this.entityData.IsRequiredCourse; 
			}
			
			set
			{
				if (this.entityData.IsRequiredCourse == value)
					return;
					
				OnColumnChanging(DegreeCoursesColumn.IsRequiredCourse, this.entityData.IsRequiredCourse);
				this.entityData.IsRequiredCourse = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DegreeCoursesColumn.IsRequiredCourse, this.entityData.IsRequiredCourse);
				OnPropertyChanged("IsRequiredCourse");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "DegreeCourses"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"DegreeCourseID", "CourseName", "CourseStyle", "CourseId", "Description", "CreditHour", "CreateUserID", "CreateTime", "Status", "DegreeId", "IsRequiredCourse"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as DegreeCoursesEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (DegreeCourses) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<DegreeCourses>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as DegreeCourses);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed DegreeCourses Entity 
		///</summary>
		protected virtual DegreeCourses Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			DegreeCourses copy = new DegreeCourses();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.DegreeCourseId = this.DegreeCourseId;
				copy.CourseName = this.CourseName;
				copy.CourseStyle = this.CourseStyle;
				copy.CourseId = this.CourseId;
				copy.Description = this.Description;
				copy.CreditHour = this.CreditHour;
				copy.CreateUserId = this.CreateUserId;
				copy.CreateTime = this.CreateTime;
				copy.Status = this.Status;
				copy.DegreeId = this.DegreeId;
				copy.IsRequiredCourse = this.IsRequiredCourse;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed DegreeCourses Entity 
		///</summary>
		public virtual DegreeCourses Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed DegreeCourses Entity which is a deep copy of the current entity.
		///</summary>
		public virtual DegreeCourses DeepCopy()
		{
			return EntityHelper.Clone<DegreeCourses>(this as DegreeCourses);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as DegreeCoursesEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new DegreeCoursesEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as DegreeCoursesEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(DegreeCoursesColumn column)
		{
			switch(column)
			{
					case DegreeCoursesColumn.DegreeCourseId:
					return entityData.DegreeCourseId != _originalData.DegreeCourseId;
					case DegreeCoursesColumn.CourseName:
					return entityData.CourseName != _originalData.CourseName;
					case DegreeCoursesColumn.CourseStyle:
					return entityData.CourseStyle != _originalData.CourseStyle;
					case DegreeCoursesColumn.CourseId:
					return entityData.CourseId != _originalData.CourseId;
					case DegreeCoursesColumn.Description:
					return entityData.Description != _originalData.Description;
					case DegreeCoursesColumn.CreditHour:
					return entityData.CreditHour != _originalData.CreditHour;
					case DegreeCoursesColumn.CreateUserId:
					return entityData.CreateUserId != _originalData.CreateUserId;
					case DegreeCoursesColumn.CreateTime:
					return entityData.CreateTime != _originalData.CreateTime;
					case DegreeCoursesColumn.Status:
					return entityData.Status != _originalData.Status;
					case DegreeCoursesColumn.DegreeId:
					return entityData.DegreeId != _originalData.DegreeId;
					case DegreeCoursesColumn.IsRequiredCourse:
					return entityData.IsRequiredCourse != _originalData.IsRequiredCourse;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< DegreeCoursesColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.DegreeCourseId != _originalData.DegreeCourseId;
			result = result || entityData.CourseName != _originalData.CourseName;
			result = result || entityData.CourseStyle != _originalData.CourseStyle;
			result = result || entityData.CourseId != _originalData.CourseId;
			result = result || entityData.Description != _originalData.Description;
			result = result || entityData.CreditHour != _originalData.CreditHour;
			result = result || entityData.CreateUserId != _originalData.CreateUserId;
			result = result || entityData.CreateTime != _originalData.CreateTime;
			result = result || entityData.Status != _originalData.Status;
			result = result || entityData.DegreeId != _originalData.DegreeId;
			result = result || entityData.IsRequiredCourse != _originalData.IsRequiredCourse;
			return result;
		}	
		
		///<summary>
		///  Returns a DegreeCourses Entity with the original data.
		///</summary>
		public DegreeCourses GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateDegreeCourses(
				_originalData.CourseName,
				_originalData.CourseStyle,
				_originalData.CourseId,
				_originalData.Description,
				_originalData.CreditHour,
				_originalData.CreateUserId,
				_originalData.CreateTime,
				_originalData.Status,
				_originalData.DegreeId,
				_originalData.IsRequiredCourse
				);
				
			return (DegreeCourses)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="DegreeCoursesBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is DegreeCoursesBase)
				return ValueEquals(this, (DegreeCoursesBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="DegreeCoursesBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.DegreeCourseId.GetHashCode() ^ 
					((this.CourseName == null) ? string.Empty : this.CourseName.ToString()).GetHashCode() ^ 
					((this.CourseStyle == null) ? string.Empty : this.CourseStyle.ToString()).GetHashCode() ^ 
					((this.CourseId == null) ? string.Empty : this.CourseId.ToString()).GetHashCode() ^ 
					((this.Description == null) ? string.Empty : this.Description.ToString()).GetHashCode() ^ 
					((this.CreditHour == null) ? string.Empty : this.CreditHour.ToString()).GetHashCode() ^ 
					this.CreateUserId.GetHashCode() ^ 
					this.CreateTime.GetHashCode() ^ 
					this.Status.GetHashCode() ^ 
					this.DegreeId.GetHashCode() ^ 
					this.IsRequiredCourse.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="DegreeCoursesBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(DegreeCoursesBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="DegreeCoursesBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="DegreeCoursesBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="DegreeCoursesBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(DegreeCoursesBase Object1, DegreeCoursesBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.DegreeCourseId != Object2.DegreeCourseId)
				equal = false;
			if ( Object1.CourseName != null && Object2.CourseName != null )
			{
				if (Object1.CourseName != Object2.CourseName)
					equal = false;
			}
			else if (Object1.CourseName == null ^ Object2.CourseName == null )
			{
				equal = false;
			}
			if ( Object1.CourseStyle != null && Object2.CourseStyle != null )
			{
				if (Object1.CourseStyle != Object2.CourseStyle)
					equal = false;
			}
			else if (Object1.CourseStyle == null ^ Object2.CourseStyle == null )
			{
				equal = false;
			}
			if ( Object1.CourseId != null && Object2.CourseId != null )
			{
				if (Object1.CourseId != Object2.CourseId)
					equal = false;
			}
			else if (Object1.CourseId == null ^ Object2.CourseId == null )
			{
				equal = false;
			}
			if ( Object1.Description != null && Object2.Description != null )
			{
				if (Object1.Description != Object2.Description)
					equal = false;
			}
			else if (Object1.Description == null ^ Object2.Description == null )
			{
				equal = false;
			}
			if ( Object1.CreditHour != null && Object2.CreditHour != null )
			{
				if (Object1.CreditHour != Object2.CreditHour)
					equal = false;
			}
			else if (Object1.CreditHour == null ^ Object2.CreditHour == null )
			{
				equal = false;
			}
			if (Object1.CreateUserId != Object2.CreateUserId)
				equal = false;
			if (Object1.CreateTime != Object2.CreateTime)
				equal = false;
			if (Object1.Status != Object2.Status)
				equal = false;
			if (Object1.DegreeId != Object2.DegreeId)
				equal = false;
			if (Object1.IsRequiredCourse != Object2.IsRequiredCourse)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((DegreeCoursesBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static DegreeCoursesComparer GetComparer()
        {
            return new DegreeCoursesComparer();
        }
        */

        // Comparer delegates back to DegreeCourses
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(DegreeCourses rhs, DegreeCoursesColumn which)
        {
            switch (which)
            {
            	
            	
            	case DegreeCoursesColumn.DegreeCourseId:
            		return this.DegreeCourseId.CompareTo(rhs.DegreeCourseId);
            		
            		                 
            	
            	
            	case DegreeCoursesColumn.CourseName:
            		return this.CourseName.CompareTo(rhs.CourseName);
            		
            		                 
            	
            	
            	case DegreeCoursesColumn.CourseStyle:
            		return this.CourseStyle.Value.CompareTo(rhs.CourseStyle.Value);
            		
            		                 
            	
            	
            	case DegreeCoursesColumn.CourseId:
            		return this.CourseId.CompareTo(rhs.CourseId);
            		
            		                 
            	
            	
            	case DegreeCoursesColumn.Description:
            		return this.Description.CompareTo(rhs.Description);
            		
            		                 
            	
            	
            	case DegreeCoursesColumn.CreditHour:
            		return this.CreditHour.Value.CompareTo(rhs.CreditHour.Value);
            		
            		                 
            	
            	
            	case DegreeCoursesColumn.CreateUserId:
            		return this.CreateUserId.CompareTo(rhs.CreateUserId);
            		
            		                 
            	
            	
            	case DegreeCoursesColumn.CreateTime:
            		return this.CreateTime.CompareTo(rhs.CreateTime);
            		
            		                 
            	
            	
            	case DegreeCoursesColumn.Status:
            		return this.Status.CompareTo(rhs.Status);
            		
            		                 
            	
            	
            	case DegreeCoursesColumn.DegreeId:
            		return this.DegreeId.CompareTo(rhs.DegreeId);
            		
            		                 
            	
            	
            	case DegreeCoursesColumn.IsRequiredCourse:
            		return this.IsRequiredCourse.CompareTo(rhs.IsRequiredCourse);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<DegreeCoursesKey> Members
		
		// member variable for the EntityId property
		private DegreeCoursesKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual DegreeCoursesKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new DegreeCoursesKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("DegreeCourses")
					.Append("|").Append( this.DegreeCourseId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{12}{11}- DegreeCourseId: {0}{11}- CourseName: {1}{11}- CourseStyle: {2}{11}- CourseId: {3}{11}- Description: {4}{11}- CreditHour: {5}{11}- CreateUserId: {6}{11}- CreateTime: {7}{11}- Status: {8}{11}- DegreeId: {9}{11}- IsRequiredCourse: {10}{11}{13}", 
				this.DegreeCourseId,
				(this.CourseName == null) ? string.Empty : this.CourseName.ToString(),
				(this.CourseStyle == null) ? string.Empty : this.CourseStyle.ToString(),
				(this.CourseId == null) ? string.Empty : this.CourseId.ToString(),
				(this.Description == null) ? string.Empty : this.Description.ToString(),
				(this.CreditHour == null) ? string.Empty : this.CreditHour.ToString(),
				this.CreateUserId,
				this.CreateTime,
				this.Status,
				this.DegreeId,
				this.IsRequiredCourse,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'DegreeCourses' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class DegreeCoursesEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// DegreeCourseID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "DegreeCourses"</remarks>
		public System.Int32 DegreeCourseId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// CourseName : 
		/// </summary>
		public System.String		  CourseName = null;
		
		/// <summary>
		/// CourseStyle : 
		/// </summary>
		public System.Int32?		  CourseStyle = null;
		
		/// <summary>
		/// CourseId : 
		/// </summary>
		public System.String		  CourseId = null;
		
		/// <summary>
		/// Description : 
		/// </summary>
		public System.String		  Description = null;
		
		/// <summary>
		/// CreditHour : 
		/// </summary>
		public System.Int32?		  CreditHour = null;
		
		/// <summary>
		/// CreateUserID : 
		/// </summary>
		public System.String		  CreateUserId = string.Empty;
		
		/// <summary>
		/// CreateTime : 
		/// </summary>
		public System.DateTime		  CreateTime = DateTime.MinValue;
		
		/// <summary>
		/// Status : 
		/// </summary>
		public System.Int32		  Status = (int)0;
		
		/// <summary>
		/// DegreeId : 
		/// </summary>
		public System.Int32		  DegreeId = (int)0;
		
		/// <summary>
		/// IsRequiredCourse : 
		/// </summary>
		public System.Int32		  IsRequiredCourse = (int)0;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			DegreeCoursesEntityData _tmp = new DegreeCoursesEntityData();
						
			_tmp.DegreeCourseId = this.DegreeCourseId;
			
			_tmp.CourseName = this.CourseName;
			_tmp.CourseStyle = this.CourseStyle;
			_tmp.CourseId = this.CourseId;
			_tmp.Description = this.Description;
			_tmp.CreditHour = this.CreditHour;
			_tmp.CreateUserId = this.CreateUserId;
			_tmp.CreateTime = this.CreateTime;
			_tmp.Status = this.Status;
			_tmp.DegreeId = this.DegreeId;
			_tmp.IsRequiredCourse = this.IsRequiredCourse;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			DegreeCoursesEntityData _tmp = new DegreeCoursesEntityData();
						
			_tmp.DegreeCourseId = this.DegreeCourseId;
			
			_tmp.CourseName = this.CourseName;
			_tmp.CourseStyle = this.CourseStyle;
			_tmp.CourseId = this.CourseId;
			_tmp.Description = this.Description;
			_tmp.CreditHour = this.CreditHour;
			_tmp.CreateUserId = this.CreateUserId;
			_tmp.CreateTime = this.CreateTime;
			_tmp.Status = this.Status;
			_tmp.DegreeId = this.DegreeId;
			_tmp.IsRequiredCourse = this.IsRequiredCourse;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DegreeCoursesColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(DegreeCoursesColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DegreeCoursesColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(DegreeCoursesColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DegreeCoursesColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(DegreeCoursesColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				DegreeCoursesEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new DegreeCoursesEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DegreeCoursesColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(DegreeCoursesColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				DegreeCoursesEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new DegreeCoursesEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region DegreeCoursesEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="DegreeCourses"/> object.
	/// </remarks>
	public class DegreeCoursesEventArgs : System.EventArgs
	{
		private DegreeCoursesColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the DegreeCoursesEventArgs class.
		///</summary>
		public DegreeCoursesEventArgs(DegreeCoursesColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the DegreeCoursesEventArgs class.
		///</summary>
		public DegreeCoursesEventArgs(DegreeCoursesColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The DegreeCoursesColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="DegreeCoursesColumn" />
		public DegreeCoursesColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all DegreeCourses related events.
	///</summary>
	public delegate void DegreeCoursesEventHandler(object sender, DegreeCoursesEventArgs e);
	
	#region DegreeCoursesComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class DegreeCoursesComparer : System.Collections.Generic.IComparer<DegreeCourses>
	{
		DegreeCoursesColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:DegreeCoursesComparer"/> class.
        /// </summary>
		public DegreeCoursesComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:DegreeCoursesComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public DegreeCoursesComparer(DegreeCoursesColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="DegreeCourses"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="DegreeCourses"/> to compare.</param>
        /// <param name="b">The second <c>DegreeCourses</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(DegreeCourses a, DegreeCourses b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(DegreeCourses entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(DegreeCourses a, DegreeCourses b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public DegreeCoursesColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region DegreeCoursesKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="DegreeCourses"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class DegreeCoursesKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the DegreeCoursesKey class.
		/// </summary>
		public DegreeCoursesKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the DegreeCoursesKey class.
		/// </summary>
		public DegreeCoursesKey(DegreeCoursesBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.DegreeCourseId = entity.DegreeCourseId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the DegreeCoursesKey class.
		/// </summary>
		public DegreeCoursesKey(System.Int32 _degreeCourseId)
		{
			#region Init Properties

			this.DegreeCourseId = _degreeCourseId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private DegreeCoursesBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public DegreeCoursesBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the DegreeCourseId property
		private System.Int32 _degreeCourseId;
		
		/// <summary>
		/// Gets or sets the DegreeCourseId property.
		/// </summary>
		public System.Int32 DegreeCourseId
		{
			get { return _degreeCourseId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.DegreeCourseId = value;
				
				_degreeCourseId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				DegreeCourseId = ( values["DegreeCourseId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["DegreeCourseId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("DegreeCourseId", DegreeCourseId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("DegreeCourseId: {0}{1}",
								DegreeCourseId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region DegreeCoursesColumn Enum
	
	/// <summary>
	/// Enumerate the DegreeCourses columns.
	/// </summary>
	[Serializable]
	public enum DegreeCoursesColumn : int
	{
		/// <summary>
		/// DegreeCourseId : 
		/// </summary>
		[EnumTextValue("DegreeCourseID")]
		[ColumnEnum("DegreeCourseID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		DegreeCourseId = 1,
		/// <summary>
		/// CourseName : 
		/// </summary>
		[EnumTextValue("CourseName")]
		[ColumnEnum("CourseName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 150)]
		CourseName = 2,
		/// <summary>
		/// CourseStyle : 
		/// </summary>
		[EnumTextValue("CourseStyle")]
		[ColumnEnum("CourseStyle", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CourseStyle = 3,
		/// <summary>
		/// CourseId : 
		/// </summary>
		[EnumTextValue("CourseId")]
		[ColumnEnum("CourseId", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		CourseId = 4,
		/// <summary>
		/// Description : 
		/// </summary>
		[EnumTextValue("Description")]
		[ColumnEnum("Description", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 500)]
		Description = 5,
		/// <summary>
		/// CreditHour : 
		/// </summary>
		[EnumTextValue("CreditHour")]
		[ColumnEnum("CreditHour", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CreditHour = 6,
		/// <summary>
		/// CreateUserId : 
		/// </summary>
		[EnumTextValue("CreateUserID")]
		[ColumnEnum("CreateUserID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		CreateUserId = 7,
		/// <summary>
		/// CreateTime : 
		/// </summary>
		[EnumTextValue("CreateTime")]
		[ColumnEnum("CreateTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		CreateTime = 8,
		/// <summary>
		/// Status : 
		/// </summary>
		[EnumTextValue("Status")]
		[ColumnEnum("Status", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		Status = 9,
		/// <summary>
		/// DegreeId : 
		/// </summary>
		[EnumTextValue("DegreeId")]
		[ColumnEnum("DegreeId", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		DegreeId = 10,
		/// <summary>
		/// IsRequiredCourse : 
		/// </summary>
		[EnumTextValue("IsRequiredCourse")]
		[ColumnEnum("IsRequiredCourse", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		IsRequiredCourse = 11
	}//End enum

	#endregion DegreeCoursesColumn Enum

} // end namespace
